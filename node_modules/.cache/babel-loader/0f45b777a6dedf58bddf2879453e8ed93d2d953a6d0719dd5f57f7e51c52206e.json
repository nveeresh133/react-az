{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Web Analytics, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n/**\r\n* ApplicationInsights.ts\r\n* @copyright Microsoft 2018\r\n*/\nvar _a;\nimport { __assignFn as __assign, __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { AnalyticsPluginIdentifier, Event as EventTelemetry, Exception, Metric, PageView, PageViewPerformance, PropertiesPluginIdentifier, RemoteDependencyData, Trace, createDistributedTraceContextFromTrace, createDomEvent, createTelemetryItem, dataSanitizeString, isCrossOriginError, strNotSpecified, utlDisableStorage, utlEnableStorage, utlSetStoragePrefix } from \"@microsoft/applicationinsights-common\";\nimport { BaseTelemetryPlugin, InstrumentEvent, arrForEach, cfgDfBoolean, cfgDfMerge, cfgDfSet, cfgDfString, cfgDfValidate, createProcessTelemetryContext, createUniqueNamespace, dumpObj, eventOff, eventOn, findAllScripts, generateW3CId, getDocument, getExceptionName, getHistory, getLocation, getWindow, hasHistory, hasWindow, isFunction, isNullOrUndefined, isString, isUndefined, mergeEvtNamespace, onConfigChange, safeGetCookieMgr, strUndefined, throwError } from \"@microsoft/applicationinsights-core-js\";\nimport { isError, objDeepFreeze, objDefine, scheduleTimeout, strIndexOf } from \"@nevware21/ts-utils\";\nimport { _DYN_ADD_TELEMETRY_INITIA7, _DYN_AUTO_TRACK_PAGE_VISI9, _DYN_AUTO_UNHANDLED_PROMI13, _DYN_COLUMN_NUMBER, _DYN_CORE, _DYN_DATA_TYPE, _DYN_DIAG_LOG, _DYN_DURATION, _DYN_ENABLE_AUTO_ROUTE_TR11, _DYN_ENABLE_UNHANDLED_PRO12, _DYN_ENVELOPE_TYPE, _DYN_ERROR, _DYN_ERROR_SRC, _DYN_EXCEPTION, _DYN_HREF, _DYN_IS_BROWSER_LINK_TRAC10, _DYN_IS_STORAGE_USE_DISAB0, _DYN_LENGTH, _DYN_LINE_NUMBER, _DYN_MESSAGE, _DYN_OVERRIDE_PAGE_VIEW_D8, _DYN_POPULATE_PAGE_VIEW_P4, _DYN_PROPERTIES, _DYN_SEND_EXCEPTION_INTER5, _DYN_SEND_PAGE_VIEW_INTER2, _DYN_SEND_PAGE_VIEW_PERFO3, _DYN_START_TIME, _DYN_TO_STRING, _DYN_TRACK, _DYN_TRACK_PAGE_VIEW, _DYN_TRACK_PREVIOUS_PAGE_1, _DYN__ADD_HOOK, _DYN__CREATE_AUTO_EXCEPTI6, _DYN__ONERROR } from \"../__DynamicConstants\";\nimport { PageViewManager } from \"./Telemetry/PageViewManager\";\nimport { PageViewPerformanceManager } from \"./Telemetry/PageViewPerformanceManager\";\nimport { PageVisitTimeManager } from \"./Telemetry/PageVisitTimeManager\";\nimport { Timing } from \"./Timing\";\nvar strEvent = \"event\";\nfunction _dispatchEvent(target, evnt) {\n  if (target && target.dispatchEvent && evnt) {\n    target.dispatchEvent(evnt);\n  }\n}\nfunction _getReason(error) {\n  if (error && error.reason) {\n    var reason = error.reason;\n    if (!isString(reason) && isFunction(reason[_DYN_TO_STRING /* @min:%2etoString */])) {\n      return reason[_DYN_TO_STRING /* @min:%2etoString */]();\n    }\n    return dumpObj(reason);\n  }\n  // Pass the original object down which will eventually get evaluated for any message or description\n  return error || \"\";\n}\nvar MinMilliSeconds = 60000;\nvar defaultValues = objDeepFreeze((_a = {\n  sessionRenewalMs: cfgDfSet(_chkConfigMilliseconds, 30 * 60 * 1000),\n  sessionExpirationMs: cfgDfSet(_chkConfigMilliseconds, 24 * 60 * 60 * 1000),\n  disableExceptionTracking: cfgDfBoolean()\n}, _a[_DYN_AUTO_TRACK_PAGE_VISI9 /* @min:autoTrackPageVisitTime */] = cfgDfBoolean(), _a[_DYN_OVERRIDE_PAGE_VIEW_D8 /* @min:overridePageViewDuration */] = cfgDfBoolean(), _a[_DYN_ENABLE_UNHANDLED_PRO12 /* @min:enableUnhandledPromiseRejectionTracking */] = cfgDfBoolean(), _a[_DYN_AUTO_UNHANDLED_PROMI13 /* @min:autoUnhandledPromiseInstrumented */] = false, _a.samplingPercentage = cfgDfValidate(_chkSampling, 100), _a[_DYN_IS_STORAGE_USE_DISAB0 /* @min:isStorageUseDisabled */] = cfgDfBoolean(), _a[_DYN_IS_BROWSER_LINK_TRAC10 /* @min:isBrowserLinkTrackingEnabled */] = cfgDfBoolean(), _a[_DYN_ENABLE_AUTO_ROUTE_TR11 /* @min:enableAutoRouteTracking */] = cfgDfBoolean(), _a.namePrefix = cfgDfString(), _a.enableDebug = cfgDfBoolean(), _a.disableFlushOnBeforeUnload = cfgDfBoolean(), _a.disableFlushOnUnload = cfgDfBoolean(false, \"disableFlushOnBeforeUnload\"), _a.expCfg = cfgDfMerge({\n  inclScripts: false\n}), _a));\nfunction _chkConfigMilliseconds(value, defValue) {\n  value = value || defValue;\n  if (value < MinMilliSeconds) {\n    value = MinMilliSeconds;\n  }\n  return +value;\n}\nfunction _chkSampling(value) {\n  return !isNaN(value) && value > 0 && value <= 100;\n}\nfunction _updateStorageUsage(extConfig) {\n  // Not resetting the storage usage as someone may have manually called utlDisableStorage, so this will only\n  // reset based if the configuration option is provided\n  if (!isUndefined(extConfig[_DYN_IS_STORAGE_USE_DISAB0 /* @min:%2eisStorageUseDisabled */])) {\n    if (extConfig[_DYN_IS_STORAGE_USE_DISAB0 /* @min:%2eisStorageUseDisabled */]) {\n      utlDisableStorage();\n    } else {\n      utlEnableStorage();\n    }\n  }\n}\nvar AnalyticsPlugin = /** @class */function (_super) {\n  __extends(AnalyticsPlugin, _super);\n  function AnalyticsPlugin() {\n    var _this = _super.call(this) || this;\n    _this.identifier = AnalyticsPluginIdentifier; // do not change name or priority\n    _this.priority = 180; // take from reserved priority range 100- 200\n    _this.autoRoutePVDelay = 500; // ms; Time to wait after a route change before triggering a pageview to allow DOM changes to take place\n    var _eventTracking;\n    var _pageTracking;\n    var _pageViewManager;\n    var _pageViewPerformanceManager;\n    var _pageVisitTimeManager;\n    var _preInitTelemetryInitializers;\n    var _isBrowserLinkTrackingEnabled;\n    var _browserLinkInitializerAdded;\n    var _enableAutoRouteTracking;\n    var _historyListenerAdded;\n    var _disableExceptionTracking;\n    var _autoExceptionInstrumented;\n    var _enableUnhandledPromiseRejectionTracking;\n    var _autoUnhandledPromiseInstrumented;\n    var _extConfig;\n    var _autoTrackPageVisitTime;\n    // Counts number of trackAjax invocations.\n    // By default we only monitor X ajax call per view to avoid too much load.\n    // Default value is set in config.\n    // This counter keeps increasing even after the limit is reached.\n    var _trackAjaxAttempts = 0;\n    // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\n    var _prevUri; // Assigned in the constructor\n    var _currUri;\n    var _evtNamespace;\n    dynamicProto(AnalyticsPlugin, _this, function (_self, _base) {\n      var _addHook = _base[_DYN__ADD_HOOK /* @min:%2e_addHook */];\n      _initDefaults();\n      _self.getCookieMgr = function () {\n        return safeGetCookieMgr(_self[_DYN_CORE /* @min:%2ecore */]);\n      };\n      _self.processTelemetry = function (env, itemCtx) {\n        _self.processNext(env, itemCtx);\n      };\n      _self.trackEvent = function (event, customProperties) {\n        try {\n          var telemetryItem = createTelemetryItem(event, EventTelemetry[_DYN_DATA_TYPE /* @min:%2edataType */], EventTelemetry[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\n          _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n        } catch (e) {\n          _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n       * @param   name    A string that identifies this event uniquely within the document.\r\n       */\n      _self.startTrackEvent = function (name) {\n        try {\n          _eventTracking.start(name);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 29 /* _eInternalMessageId.StartTrackEventFailed */, \"startTrackEvent failed, event will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Log an extended event that you started timing with `startTrackEvent`.\r\n       * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n       * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n       * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n       */\n      _self.stopTrackEvent = function (name, properties, measurements) {\n        try {\n          _eventTracking.stop(name, undefined, properties, measurements);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 30 /* _eInternalMessageId.StopTrackEventFailed */, \"stopTrackEvent failed, event will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * @description Log a diagnostic message\r\n       * @param trace\r\n       * @param ICustomProperties.\r\n       * @memberof ApplicationInsights\r\n       */\n      _self.trackTrace = function (trace, customProperties) {\n        try {\n          var telemetryItem = createTelemetryItem(trace, Trace[_DYN_DATA_TYPE /* @min:%2edataType */], Trace[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\n          _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n        } catch (e) {\n          _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * @description Log a numeric value that is not associated with a specific event. Typically\r\n       * used to send regular reports of performance indicators. To send single measurement, just\r\n       * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n       * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n       * and sending the resulting average at intervals\r\n       * @param metric - input object argument. Only name and average are mandatory.\r\n       * @param } customProperties additional data used to filter metrics in the\r\n       * portal. Defaults to empty.\r\n       * @memberof ApplicationInsights\r\n       */\n      _self.trackMetric = function (metric, customProperties) {\n        try {\n          var telemetryItem = createTelemetryItem(metric, Metric[_DYN_DATA_TYPE /* @min:%2edataType */], Metric[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\n          _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 36 /* _eInternalMessageId.TrackMetricFailed */, \"trackMetric failed, metric will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Logs that a page or other item was viewed.\r\n       * @param IPageViewTelemetry - The string you used as the name in startTrackPage. Defaults to the document title.\r\n       * @param customProperties - Additional data used to filter events and metrics. Defaults to empty.\r\n       * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n       */\n      _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (pageView, customProperties) {\n        try {\n          var inPv = pageView || {};\n          _pageViewManager[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */](inPv, __assign(__assign(__assign({}, inPv.properties), inPv.measurements), customProperties));\n          if (_autoTrackPageVisitTime) {\n            _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_1 /* @min:%2etrackPreviousPageVisit */](inPv.name, inPv.uri);\n          }\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageView failed, page view will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n       * @param pageView - Page view item to be sent\r\n       * @param properties - Custom properties (Part C) that a user can add to the telemetry item\r\n       * @param systemProperties - System level properties (Part A) that a user can add to the telemetry item\r\n       */\n      _self[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */] = function (pageView, properties, systemProperties) {\n        var doc = getDocument();\n        if (doc) {\n          pageView.refUri = pageView.refUri === undefined ? doc.referrer : pageView.refUri;\n        }\n        if (isNullOrUndefined(pageView[_DYN_START_TIME /* @min:%2estartTime */])) {\n          // calculate the start time manually\n          var duration = (properties || pageView[_DYN_PROPERTIES /* @min:%2eproperties */] || {})[_DYN_DURATION /* @min:%2eduration */] || 0;\n          pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(new Date().getTime() - duration);\n        }\n        var telemetryItem = createTelemetryItem(pageView, PageView[_DYN_DATA_TYPE /* @min:%2edataType */], PageView[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\n        _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n        // reset ajaxes counter\n        _trackAjaxAttempts = 0;\n      };\n      /**\r\n       * @ignore INTERNAL ONLY\r\n       * @param pageViewPerformance\r\n       * @param properties\r\n       */\n      _self[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */] = function (pageViewPerformance, properties, systemProperties) {\n        var telemetryItem = createTelemetryItem(pageViewPerformance, PageViewPerformance[_DYN_DATA_TYPE /* @min:%2edataType */], PageViewPerformance[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\n        _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n      };\n      /**\r\n       * Send browser performance metrics.\r\n       * @param pageViewPerformance\r\n       * @param customProperties\r\n       */\n      _self.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\n        var inPvp = pageViewPerformance || {};\n        try {\n          _pageViewPerformanceManager[_DYN_POPULATE_PAGE_VIEW_P4 /* @min:%2epopulatePageViewPerformanceEvent */](inPvp);\n          _self[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */](inPvp, customProperties);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageViewPerformance failed, page view will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n       * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n       * and send the event.\r\n       * @param name - A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n       */\n      _self.startTrackPage = function (name) {\n        try {\n          if (typeof name !== \"string\") {\n            var doc = getDocument();\n            name = doc && doc.title || \"\";\n          }\n          _pageTracking.start(name);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 31 /* _eInternalMessageId.StartTrackFailed */, \"startTrackPage failed, page view may not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n       * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n       * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n       * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n       * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n       * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n       */\n      _self.stopTrackPage = function (name, url, properties, measurement) {\n        try {\n          if (typeof name !== \"string\") {\n            var doc = getDocument();\n            name = doc && doc.title || \"\";\n          }\n          if (typeof url !== \"string\") {\n            var loc = getLocation();\n            url = loc && loc[_DYN_HREF /* @min:%2ehref */] || \"\";\n          }\n          _pageTracking.stop(name, url, properties, measurement);\n          if (_autoTrackPageVisitTime) {\n            _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_1 /* @min:%2etrackPreviousPageVisit */](name, url);\n          }\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 32 /* _eInternalMessageId.StopTrackFailed */, \"stopTrackPage failed, page view will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n      * @ignore INTERNAL ONLY\r\n      * @param exception\r\n      * @param properties\r\n      * @param systemProperties\r\n      */\n      _self[_DYN_SEND_EXCEPTION_INTER5 /* @min:%2esendExceptionInternal */] = function (exception, customProperties, systemProperties) {\n        var _a;\n        // Adding additional edge cases to handle\n        // - Not passing anything (null / undefined)\n        var theError = exception && (exception[_DYN_EXCEPTION /* @min:%2eexception */] || exception[_DYN_ERROR /* @min:%2eerror */]) ||\n        // - Handle someone calling trackException based of v1 API where the exception was the Error\n        isError(exception) && exception ||\n        // - Handles no error being defined and instead of creating a new Error() instance attempt to map so any stacktrace\n        //   is preserved and does not list ApplicationInsights code as the source\n        {\n          name: exception && typeof exception,\n          message: exception || strNotSpecified\n        };\n        // If no exception object was passed assign to an empty object to avoid internal exceptions\n        exception = exception || {};\n        var exceptionPartB = new Exception(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), theError, exception[_DYN_PROPERTIES /* @min:%2eproperties */] || customProperties, exception.measurements, exception.severityLevel, exception.id).toInterface();\n        var doc = getDocument();\n        if (doc && ((_a = _self.config.expCfg) === null || _a === void 0 ? void 0 : _a.inclScripts)) {\n          var scriptsInfo = findAllScripts(doc);\n          exceptionPartB[_DYN_PROPERTIES /* @min:%2eproperties */][\"exceptionScripts\"] = JSON.stringify(scriptsInfo);\n        }\n        var telemetryItem = createTelemetryItem(exceptionPartB, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties, systemProperties);\n        _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n      };\n      /**\r\n       * Log an exception you have caught.\r\n       *\r\n       * @param exception -   Object which contains exception to be sent\r\n       * @param } customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n       *\r\n       * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n       * @memberof ApplicationInsights\r\n       */\n      _self.trackException = function (exception, customProperties) {\n        if (exception && !exception[_DYN_EXCEPTION /* @min:%2eexception */] && exception[_DYN_ERROR /* @min:%2eerror */]) {\n          exception[_DYN_EXCEPTION /* @min:%2eexception */] = exception[_DYN_ERROR /* @min:%2eerror */];\n        }\n        try {\n          _self[_DYN_SEND_EXCEPTION_INTER5 /* @min:%2esendExceptionInternal */](exception, customProperties);\n        } catch (e) {\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 35 /* _eInternalMessageId.TrackExceptionFailed */, \"trackException failed, exception will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e)\n          });\n        }\n      };\n      /**\r\n       * @description Custom error handler for Application Insights Analytics\r\n       * @param exception\r\n       * @memberof ApplicationInsights\r\n       */\n      _self[_DYN__ONERROR /* @min:%2e_onerror */] = function (exception) {\n        var error = exception && exception[_DYN_ERROR /* @min:%2eerror */];\n        var evt = exception && exception.evt;\n        try {\n          if (!evt) {\n            var _window = getWindow();\n            if (_window) {\n              evt = _window[strEvent];\n            }\n          }\n          var url = exception && exception.url || (getDocument() || {}).URL;\n          // If no error source is provided assume the default window.onerror handler\n          var errorSrc = exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */] || \"window.onerror@\" + url + \":\" + (exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0) + \":\" + (exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0);\n          var properties = {\n            errorSrc: errorSrc,\n            url: url,\n            lineNumber: exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0,\n            columnNumber: exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0,\n            message: exception[_DYN_MESSAGE /* @min:%2emessage */]\n          };\n          if (isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception[_DYN_ERROR /* @min:%2eerror */])) {\n            _sendCORSException(Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](\"Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.\", url, exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0, exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0, error, evt, null, errorSrc), properties);\n          } else {\n            if (!exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */]) {\n              exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */] = errorSrc;\n            }\n            _self.trackException({\n              exception: exception,\n              severityLevel: 3 /* eSeverityLevel.Error */\n            }, properties);\n          }\n        } catch (e) {\n          var errorString = error ? error.name + \", \" + error[_DYN_MESSAGE /* @min:%2emessage */] : \"null\";\n          _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 11 /* _eInternalMessageId.ExceptionWhileLoggingError */, \"_onError threw exception while logging error, error will not be collected: \" + getExceptionName(e), {\n            exception: dumpObj(e),\n            errorString: errorString\n          });\n        }\n      };\n      _self[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */] = function (telemetryInitializer) {\n        if (_self[_DYN_CORE /* @min:%2ecore */]) {\n          // Just add to the core\n          return _self[_DYN_CORE /* @min:%2ecore */][_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](telemetryInitializer);\n        }\n        // Handle \"pre-initialization\" telemetry initializers (for backward compatibility)\n        if (!_preInitTelemetryInitializers) {\n          _preInitTelemetryInitializers = [];\n        }\n        _preInitTelemetryInitializers.push(telemetryInitializer);\n      };\n      _self.initialize = function (config, core, extensions, pluginChain) {\n        if (_self.isInitialized()) {\n          return;\n        }\n        if (isNullOrUndefined(core)) {\n          throwError(\"Error initializing\");\n        }\n        _base.initialize(config, core, extensions, pluginChain);\n        try {\n          _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\n          if (_preInitTelemetryInitializers) {\n            arrForEach(_preInitTelemetryInitializers, function (initializer) {\n              core[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](initializer);\n            });\n            _preInitTelemetryInitializers = null;\n          }\n          _populateDefaults(config);\n          _pageViewPerformanceManager = new PageViewPerformanceManager(_self[_DYN_CORE /* @min:%2ecore */]);\n          _pageViewManager = new PageViewManager(_self, _extConfig.overridePageViewDuration, _self[_DYN_CORE /* @min:%2ecore */], _pageViewPerformanceManager);\n          _pageVisitTimeManager = new PageVisitTimeManager(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), function (pageName, pageUrl, pageVisitTime) {\n            return trackPageVisitTime(pageName, pageUrl, pageVisitTime);\n          });\n          _eventTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackEvent\");\n          _eventTracking.action = function (name, url, duration, properties, measurements) {\n            if (!properties) {\n              properties = {};\n            }\n            if (!measurements) {\n              measurements = {};\n            }\n            properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\n            _self.trackEvent({\n              name: name,\n              properties: properties,\n              measurements: measurements\n            });\n          };\n          // initialize page view timing\n          _pageTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackPageView\");\n          _pageTracking.action = function (name, url, duration, properties, measurements) {\n            // duration must be a custom property in order for the collector to extract it\n            if (isNullOrUndefined(properties)) {\n              properties = {};\n            }\n            properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\n            var pageViewItem = {\n              name: name,\n              uri: url,\n              properties: properties,\n              measurements: measurements\n            };\n            _self[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageViewItem, properties);\n          };\n          if (hasWindow()) {\n            _updateExceptionTracking();\n            _updateLocationChange();\n          }\n        } catch (e) {\n          // resetting the initialized state because of failure\n          _self.setInitialized(false);\n          throw e;\n        }\n      };\n      _self._doTeardown = function (unloadCtx, unloadState) {\n        _pageViewManager && _pageViewManager.teardown(unloadCtx, unloadState);\n        // Just register to remove all events associated with this namespace\n        eventOff(window, null, null, _evtNamespace);\n        _initDefaults();\n      };\n      function _populateDefaults(config) {\n        var identifier = _self.identifier;\n        var core = _self[_DYN_CORE /* @min:%2ecore */];\n        _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(config, function () {\n          var ctx = createProcessTelemetryContext(null, config, core);\n          _extConfig = ctx.getExtCfg(identifier, defaultValues);\n          _autoTrackPageVisitTime = _extConfig[_DYN_AUTO_TRACK_PAGE_VISI9 /* @min:%2eautoTrackPageVisitTime */];\n          if (config.storagePrefix) {\n            utlSetStoragePrefix(config.storagePrefix);\n          }\n          _updateStorageUsage(_extConfig);\n          // _updateBrowserLinkTracking\n          _isBrowserLinkTrackingEnabled = _extConfig[_DYN_IS_BROWSER_LINK_TRAC10 /* @min:%2eisBrowserLinkTrackingEnabled */];\n          _addDefaultTelemetryInitializers();\n        }));\n      }\n      /**\r\n       * Log a page visit time\r\n       * @param    pageName    Name of page\r\n       * @param    pageVisitDuration Duration of visit to the page in milliseconds\r\n       */\n      function trackPageVisitTime(pageName, pageUrl, pageVisitTime) {\n        var properties = {\n          PageName: pageName,\n          PageUrl: pageUrl\n        };\n        _self.trackMetric({\n          name: \"PageVisitTime\",\n          average: pageVisitTime,\n          max: pageVisitTime,\n          min: pageVisitTime,\n          sampleCount: 1\n        }, properties);\n      }\n      function _addDefaultTelemetryInitializers() {\n        if (!_browserLinkInitializerAdded && _isBrowserLinkTrackingEnabled) {\n          var browserLinkPaths_1 = [\"/browserLinkSignalR/\", \"/__browserLink/\"];\n          var dropBrowserLinkRequests = function (envelope) {\n            if (_isBrowserLinkTrackingEnabled && envelope.baseType === RemoteDependencyData[_DYN_DATA_TYPE /* @min:%2edataType */]) {\n              var remoteData = envelope.baseData;\n              if (remoteData) {\n                for (var i = 0; i < browserLinkPaths_1[_DYN_LENGTH /* @min:%2elength */]; i++) {\n                  if (remoteData.target && strIndexOf(remoteData.target, browserLinkPaths_1[i]) >= 0) {\n                    return false;\n                  }\n                }\n              }\n            }\n            return true;\n          };\n          _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](_self[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](dropBrowserLinkRequests));\n          _browserLinkInitializerAdded = true;\n        }\n      }\n      function _sendCORSException(exception, properties) {\n        var telemetryItem = createTelemetryItem(exception, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties);\n        _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\n      }\n      function _updateExceptionTracking() {\n        var _window = getWindow();\n        var locn = getLocation(true);\n        _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\n          _disableExceptionTracking = _extConfig.disableExceptionTracking;\n          if (!_disableExceptionTracking && !_autoExceptionInstrumented && !_extConfig.autoExceptionInstrumented) {\n            // We want to enable exception auto collection and it has not been done so yet\n            _addHook(InstrumentEvent(_window, \"onerror\", {\n              ns: _evtNamespace,\n              rsp: function (callDetails, message, url, lineNumber, columnNumber, error) {\n                if (!_disableExceptionTracking && callDetails.rslt !== true) {\n                  _self[_DYN__ONERROR /* @min:%2e_onerror */](Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](message, url, lineNumber, columnNumber, error, callDetails.evt));\n                }\n              }\n            }, false));\n            _autoExceptionInstrumented = true;\n          }\n        }));\n        _addUnhandledPromiseRejectionTracking(_window, locn);\n      }\n      function _updateLocationChange() {\n        var win = getWindow();\n        var locn = getLocation(true);\n        _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\n          _enableAutoRouteTracking = _extConfig[_DYN_ENABLE_AUTO_ROUTE_TR11 /* @min:%2eenableAutoRouteTracking */] === true;\n          /**\r\n           * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n           */\n          if (win && _enableAutoRouteTracking && !_historyListenerAdded && hasHistory()) {\n            var _history = getHistory();\n            if (isFunction(_history.pushState) && isFunction(_history.replaceState) && typeof Event !== strUndefined) {\n              _addHistoryListener(win, _history, locn);\n            }\n          }\n        }));\n      }\n      function _getDistributedTraceCtx() {\n        var distributedTraceCtx = null;\n        if (_self[_DYN_CORE /* @min:%2ecore */] && _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx) {\n          distributedTraceCtx = _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx(false);\n        }\n        if (!distributedTraceCtx) {\n          // Fallback when using an older Core and PropertiesPlugin\n          var properties = _self[_DYN_CORE /* @min:%2ecore */].getPlugin(PropertiesPluginIdentifier);\n          if (properties) {\n            var context = properties.plugin.context;\n            if (context) {\n              distributedTraceCtx = createDistributedTraceContextFromTrace(context.telemetryTrace);\n            }\n          }\n        }\n        return distributedTraceCtx;\n      }\n      /**\r\n       * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n       */\n      function _addHistoryListener(win, history, locn) {\n        if (_historyListenerAdded) {\n          return;\n        }\n        // Name Prefix is only referenced during the initial initialization and cannot be changed afterwards\n        var namePrefix = _extConfig.namePrefix || \"\";\n        function _popstateHandler() {\n          if (_enableAutoRouteTracking) {\n            _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\n          }\n        }\n        function _locationChangeHandler() {\n          // We always track the changes (if the handler is installed) to handle the feature being disabled between location changes\n          if (_currUri) {\n            _prevUri = _currUri;\n            _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\n          } else {\n            _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\n          }\n          if (_enableAutoRouteTracking) {\n            var distributedTraceCtx = _getDistributedTraceCtx();\n            if (distributedTraceCtx) {\n              distributedTraceCtx.setTraceId(generateW3CId());\n              var traceLocationName = \"_unknown_\";\n              if (locn && locn.pathname) {\n                traceLocationName = locn.pathname + (locn.hash || \"\");\n              }\n              // This populates the ai.operation.name which has a maximum size of 1024 so we need to sanitize it\n              distributedTraceCtx.setName(dataSanitizeString(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), traceLocationName));\n            }\n            scheduleTimeout(function (uri) {\n              // todo: override start time so that it is not affected by autoRoutePVDelay\n              _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */]({\n                refUri: uri,\n                properties: {\n                  duration: 0\n                }\n              }); // SPA route change loading durations are undefined, so send 0\n            }.bind(_self, _prevUri), _self.autoRoutePVDelay);\n          }\n        }\n        _addHook(InstrumentEvent(history, \"pushState\", {\n          ns: _evtNamespace,\n          rsp: function () {\n            if (_enableAutoRouteTracking) {\n              _dispatchEvent(win, createDomEvent(namePrefix + \"pushState\"));\n              _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\n            }\n          }\n        }, true));\n        _addHook(InstrumentEvent(history, \"replaceState\", {\n          ns: _evtNamespace,\n          rsp: function () {\n            if (_enableAutoRouteTracking) {\n              _dispatchEvent(win, createDomEvent(namePrefix + \"replaceState\"));\n              _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\n            }\n          }\n        }, true));\n        eventOn(win, namePrefix + \"popstate\", _popstateHandler, _evtNamespace);\n        eventOn(win, namePrefix + \"locationchange\", _locationChangeHandler, _evtNamespace);\n        _historyListenerAdded = true;\n      }\n      function _addUnhandledPromiseRejectionTracking(_window, _location) {\n        _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\n          _enableUnhandledPromiseRejectionTracking = _extConfig[_DYN_ENABLE_UNHANDLED_PRO12 /* @min:%2eenableUnhandledPromiseRejectionTracking */] === true;\n          _autoExceptionInstrumented = _autoExceptionInstrumented || _extConfig[_DYN_AUTO_UNHANDLED_PROMI13 /* @min:%2eautoUnhandledPromiseInstrumented */];\n          if (_enableUnhandledPromiseRejectionTracking && !_autoUnhandledPromiseInstrumented) {\n            // We want to enable exception auto collection and it has not been done so yet\n            _addHook(InstrumentEvent(_window, \"onunhandledrejection\", {\n              ns: _evtNamespace,\n              rsp: function (callDetails, error) {\n                if (_enableUnhandledPromiseRejectionTracking && callDetails.rslt !== true) {\n                  // handled could be typeof function\n                  _self[_DYN__ONERROR /* @min:%2e_onerror */](Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](_getReason(error), _location ? _location[_DYN_HREF /* @min:%2ehref */] : \"\", 0, 0, error, callDetails.evt));\n                }\n              }\n            }, false));\n            _extConfig[_DYN_AUTO_UNHANDLED_PROMI13 /* @min:%2eautoUnhandledPromiseInstrumented */] = _autoUnhandledPromiseInstrumented = true;\n          }\n        }));\n      }\n      /**\r\n       * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n       * @param severity - {eLoggingSeverity} - The severity of the log message\r\n       * @param msgId - {_eInternalLogMessage} - The log message.\r\n       */\n      function _throwInternal(severity, msgId, msg, properties, isUserAct) {\n        _self[_DYN_DIAG_LOG /* @min:%2ediagLog */]().throwInternal(severity, msgId, msg, properties, isUserAct);\n      }\n      function _initDefaults() {\n        _eventTracking = null;\n        _pageTracking = null;\n        _pageViewManager = null;\n        _pageViewPerformanceManager = null;\n        _pageVisitTimeManager = null;\n        _preInitTelemetryInitializers = null;\n        _isBrowserLinkTrackingEnabled = false;\n        _browserLinkInitializerAdded = false;\n        _enableAutoRouteTracking = false;\n        _historyListenerAdded = false;\n        _disableExceptionTracking = false;\n        _autoExceptionInstrumented = false;\n        _enableUnhandledPromiseRejectionTracking = false;\n        _autoUnhandledPromiseInstrumented = false;\n        _autoTrackPageVisitTime = false;\n        // Counts number of trackAjax invocations.\n        // By default we only monitor X ajax call per view to avoid too much load.\n        // Default value is set in config.\n        // This counter keeps increasing even after the limit is reached.\n        _trackAjaxAttempts = 0;\n        // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\n        var location = getLocation(true);\n        _prevUri = location && location[_DYN_HREF /* @min:%2ehref */] || \"\";\n        _currUri = null;\n        _evtNamespace = null;\n        _extConfig = null;\n        // Define _self.config\n        objDefine(_self, \"config\", {\n          g: function () {\n            return _extConfig;\n          }\n        });\n      }\n      // For backward compatibility\n      objDefine(_self, \"_pageViewManager\", {\n        g: function () {\n          return _pageViewManager;\n        }\n      });\n      objDefine(_self, \"_pageViewPerformanceManager\", {\n        g: function () {\n          return _pageViewPerformanceManager;\n        }\n      });\n      objDefine(_self, \"_pageVisitTimeManager\", {\n        g: function () {\n          return _pageVisitTimeManager;\n        }\n      });\n      objDefine(_self, \"_evtNamespace\", {\n        g: function () {\n          return \".\" + _evtNamespace;\n        }\n      });\n    });\n    return _this;\n  }\n  // Removed Stub for AnalyticsPlugin.prototype.getCookieMgr.\n  // Removed Stub for AnalyticsPlugin.prototype.processTelemetry.\n  // Removed Stub for AnalyticsPlugin.prototype.trackEvent.\n  // Removed Stub for AnalyticsPlugin.prototype.startTrackEvent.\n  // Removed Stub for AnalyticsPlugin.prototype.stopTrackEvent.\n  // Removed Stub for AnalyticsPlugin.prototype.trackTrace.\n  // Removed Stub for AnalyticsPlugin.prototype.trackMetric.\n  // Removed Stub for AnalyticsPlugin.prototype.trackPageView.\n  // Removed Stub for AnalyticsPlugin.prototype.sendPageViewInternal.\n  // Removed Stub for AnalyticsPlugin.prototype.sendPageViewPerformanceInternal.\n  // Removed Stub for AnalyticsPlugin.prototype.trackPageViewPerformance.\n  // Removed Stub for AnalyticsPlugin.prototype.startTrackPage.\n  // Removed Stub for AnalyticsPlugin.prototype.stopTrackPage.\n  // Removed Stub for AnalyticsPlugin.prototype.sendExceptionInternal.\n  // Removed Stub for AnalyticsPlugin.prototype.trackException.\n  // Removed Stub for AnalyticsPlugin.prototype._onerror.\n  // Removed Stub for AnalyticsPlugin.prototype.addTelemetryInitializer.\n  // Removed Stub for AnalyticsPlugin.prototype.initialize.\n  AnalyticsPlugin.Version = '3.3.1'; // Not currently used anywhere\n  return AnalyticsPlugin;\n}(BaseTelemetryPlugin);\nexport { AnalyticsPlugin };","map":{"version":3,"names":["_a","__assignFn","__assign","__extendsFn","__extends","dynamicProto","AnalyticsPluginIdentifier","Event","EventTelemetry","Exception","Metric","PageView","PageViewPerformance","PropertiesPluginIdentifier","RemoteDependencyData","Trace","createDistributedTraceContextFromTrace","createDomEvent","createTelemetryItem","dataSanitizeString","isCrossOriginError","strNotSpecified","utlDisableStorage","utlEnableStorage","utlSetStoragePrefix","BaseTelemetryPlugin","InstrumentEvent","arrForEach","cfgDfBoolean","cfgDfMerge","cfgDfSet","cfgDfString","cfgDfValidate","createProcessTelemetryContext","createUniqueNamespace","dumpObj","eventOff","eventOn","findAllScripts","generateW3CId","getDocument","getExceptionName","getHistory","getLocation","getWindow","hasHistory","hasWindow","isFunction","isNullOrUndefined","isString","isUndefined","mergeEvtNamespace","onConfigChange","safeGetCookieMgr","strUndefined","throwError","isError","objDeepFreeze","objDefine","scheduleTimeout","strIndexOf","_DYN_ADD_TELEMETRY_INITIA7","_DYN_AUTO_TRACK_PAGE_VISI9","_DYN_AUTO_UNHANDLED_PROMI13","_DYN_COLUMN_NUMBER","_DYN_CORE","_DYN_DATA_TYPE","_DYN_DIAG_LOG","_DYN_DURATION","_DYN_ENABLE_AUTO_ROUTE_TR11","_DYN_ENABLE_UNHANDLED_PRO12","_DYN_ENVELOPE_TYPE","_DYN_ERROR","_DYN_ERROR_SRC","_DYN_EXCEPTION","_DYN_HREF","_DYN_IS_BROWSER_LINK_TRAC10","_DYN_IS_STORAGE_USE_DISAB0","_DYN_LENGTH","_DYN_LINE_NUMBER","_DYN_MESSAGE","_DYN_OVERRIDE_PAGE_VIEW_D8","_DYN_POPULATE_PAGE_VIEW_P4","_DYN_PROPERTIES","_DYN_SEND_EXCEPTION_INTER5","_DYN_SEND_PAGE_VIEW_INTER2","_DYN_SEND_PAGE_VIEW_PERFO3","_DYN_START_TIME","_DYN_TO_STRING","_DYN_TRACK","_DYN_TRACK_PAGE_VIEW","_DYN_TRACK_PREVIOUS_PAGE_1","_DYN__ADD_HOOK","_DYN__CREATE_AUTO_EXCEPTI6","_DYN__ONERROR","PageViewManager","PageViewPerformanceManager","PageVisitTimeManager","Timing","strEvent","_dispatchEvent","target","evnt","dispatchEvent","_getReason","error","reason","MinMilliSeconds","defaultValues","sessionRenewalMs","_chkConfigMilliseconds","sessionExpirationMs","disableExceptionTracking","samplingPercentage","_chkSampling","namePrefix","enableDebug","disableFlushOnBeforeUnload","disableFlushOnUnload","expCfg","inclScripts","value","defValue","isNaN","_updateStorageUsage","extConfig","AnalyticsPlugin","_super","_this","call","identifier","priority","autoRoutePVDelay","_eventTracking","_pageTracking","_pageViewManager","_pageViewPerformanceManager","_pageVisitTimeManager","_preInitTelemetryInitializers","_isBrowserLinkTrackingEnabled","_browserLinkInitializerAdded","_enableAutoRouteTracking","_historyListenerAdded","_disableExceptionTracking","_autoExceptionInstrumented","_enableUnhandledPromiseRejectionTracking","_autoUnhandledPromiseInstrumented","_extConfig","_autoTrackPageVisitTime","_trackAjaxAttempts","_prevUri","_currUri","_evtNamespace","_self","_base","_addHook","_initDefaults","getCookieMgr","processTelemetry","env","itemCtx","processNext","trackEvent","event","customProperties","telemetryItem","e","_throwInternal","exception","startTrackEvent","name","start","stopTrackEvent","properties","measurements","stop","undefined","trackTrace","trace","trackMetric","metric","pageView","inPv","uri","systemProperties","doc","refUri","referrer","duration","Date","getTime","pageViewPerformance","trackPageViewPerformance","inPvp","startTrackPage","title","stopTrackPage","url","measurement","loc","theError","message","exceptionPartB","severityLevel","id","toInterface","config","scriptsInfo","JSON","stringify","trackException","evt","_window","URL","errorSrc","lineNumber","columnNumber","_sendCORSException","errorString","telemetryInitializer","push","initialize","core","extensions","pluginChain","isInitialized","evtNamespace","initializer","_populateDefaults","overridePageViewDuration","pageName","pageUrl","pageVisitTime","trackPageVisitTime","action","pageViewItem","_updateExceptionTracking","_updateLocationChange","setInitialized","_doTeardown","unloadCtx","unloadState","teardown","window","ctx","getExtCfg","storagePrefix","_addDefaultTelemetryInitializers","PageName","PageUrl","average","max","min","sampleCount","browserLinkPaths_1","dropBrowserLinkRequests","envelope","baseType","remoteData","baseData","i","locn","autoExceptionInstrumented","ns","rsp","callDetails","rslt","_addUnhandledPromiseRejectionTracking","win","_history","pushState","replaceState","_addHistoryListener","_getDistributedTraceCtx","distributedTraceCtx","getTraceCtx","getPlugin","context","plugin","telemetryTrace","history","_popstateHandler","_locationChangeHandler","setTraceId","traceLocationName","pathname","hash","setName","bind","_location","severity","msgId","msg","isUserAct","throwInternal","location","g","Version"],"sources":["/home/veeresh133/app/api-call/react-az/node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/AnalyticsPlugin.js"],"sourcesContent":["/**\r\n* ApplicationInsights.ts\r\n* @copyright Microsoft 2018\r\n*/\r\nvar _a;\r\nimport { __assign, __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { AnalyticsPluginIdentifier, Event as EventTelemetry, Exception, Metric, PageView, PageViewPerformance, PropertiesPluginIdentifier, RemoteDependencyData, Trace, createDistributedTraceContextFromTrace, createDomEvent, createTelemetryItem, dataSanitizeString, isCrossOriginError, strNotSpecified, utlDisableStorage, utlEnableStorage, utlSetStoragePrefix } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, InstrumentEvent, arrForEach, cfgDfBoolean, cfgDfMerge, cfgDfSet, cfgDfString, cfgDfValidate, createProcessTelemetryContext, createUniqueNamespace, dumpObj, eventOff, eventOn, findAllScripts, generateW3CId, getDocument, getExceptionName, getHistory, getLocation, getWindow, hasHistory, hasWindow, isFunction, isNullOrUndefined, isString, isUndefined, mergeEvtNamespace, onConfigChange, safeGetCookieMgr, strUndefined, throwError } from \"@microsoft/applicationinsights-core-js\";\r\nimport { isError, objDeepFreeze, objDefine, scheduleTimeout, strIndexOf } from \"@nevware21/ts-utils\";\r\nimport { _DYN_ADD_TELEMETRY_INITIA7, _DYN_AUTO_TRACK_PAGE_VISI9, _DYN_AUTO_UNHANDLED_PROMI13, _DYN_COLUMN_NUMBER, _DYN_CORE, _DYN_DATA_TYPE, _DYN_DIAG_LOG, _DYN_DURATION, _DYN_ENABLE_AUTO_ROUTE_TR11, _DYN_ENABLE_UNHANDLED_PRO12, _DYN_ENVELOPE_TYPE, _DYN_ERROR, _DYN_ERROR_SRC, _DYN_EXCEPTION, _DYN_HREF, _DYN_IS_BROWSER_LINK_TRAC10, _DYN_IS_STORAGE_USE_DISAB0, _DYN_LENGTH, _DYN_LINE_NUMBER, _DYN_MESSAGE, _DYN_OVERRIDE_PAGE_VIEW_D8, _DYN_POPULATE_PAGE_VIEW_P4, _DYN_PROPERTIES, _DYN_SEND_EXCEPTION_INTER5, _DYN_SEND_PAGE_VIEW_INTER2, _DYN_SEND_PAGE_VIEW_PERFO3, _DYN_START_TIME, _DYN_TO_STRING, _DYN_TRACK, _DYN_TRACK_PAGE_VIEW, _DYN_TRACK_PREVIOUS_PAGE_1, _DYN__ADD_HOOK, _DYN__CREATE_AUTO_EXCEPTI6, _DYN__ONERROR } from \"../__DynamicConstants\";\r\nimport { PageViewManager } from \"./Telemetry/PageViewManager\";\r\nimport { PageViewPerformanceManager } from \"./Telemetry/PageViewPerformanceManager\";\r\nimport { PageVisitTimeManager } from \"./Telemetry/PageVisitTimeManager\";\r\nimport { Timing } from \"./Timing\";\r\nvar strEvent = \"event\";\r\nfunction _dispatchEvent(target, evnt) {\r\n    if (target && target.dispatchEvent && evnt) {\r\n        target.dispatchEvent(evnt);\r\n    }\r\n}\r\nfunction _getReason(error) {\r\n    if (error && error.reason) {\r\n        var reason = error.reason;\r\n        if (!isString(reason) && isFunction(reason[_DYN_TO_STRING /* @min:%2etoString */])) {\r\n            return reason[_DYN_TO_STRING /* @min:%2etoString */]();\r\n        }\r\n        return dumpObj(reason);\r\n    }\r\n    // Pass the original object down which will eventually get evaluated for any message or description\r\n    return error || \"\";\r\n}\r\nvar MinMilliSeconds = 60000;\r\nvar defaultValues = objDeepFreeze((_a = {\r\n        sessionRenewalMs: cfgDfSet(_chkConfigMilliseconds, 30 * 60 * 1000),\r\n        sessionExpirationMs: cfgDfSet(_chkConfigMilliseconds, 24 * 60 * 60 * 1000),\r\n        disableExceptionTracking: cfgDfBoolean()\r\n    },\r\n    _a[_DYN_AUTO_TRACK_PAGE_VISI9 /* @min:autoTrackPageVisitTime */] = cfgDfBoolean(),\r\n    _a[_DYN_OVERRIDE_PAGE_VIEW_D8 /* @min:overridePageViewDuration */] = cfgDfBoolean(),\r\n    _a[_DYN_ENABLE_UNHANDLED_PRO12 /* @min:enableUnhandledPromiseRejectionTracking */] = cfgDfBoolean(),\r\n    _a[_DYN_AUTO_UNHANDLED_PROMI13 /* @min:autoUnhandledPromiseInstrumented */] = false,\r\n    _a.samplingPercentage = cfgDfValidate(_chkSampling, 100),\r\n    _a[_DYN_IS_STORAGE_USE_DISAB0 /* @min:isStorageUseDisabled */] = cfgDfBoolean(),\r\n    _a[_DYN_IS_BROWSER_LINK_TRAC10 /* @min:isBrowserLinkTrackingEnabled */] = cfgDfBoolean(),\r\n    _a[_DYN_ENABLE_AUTO_ROUTE_TR11 /* @min:enableAutoRouteTracking */] = cfgDfBoolean(),\r\n    _a.namePrefix = cfgDfString(),\r\n    _a.enableDebug = cfgDfBoolean(),\r\n    _a.disableFlushOnBeforeUnload = cfgDfBoolean(),\r\n    _a.disableFlushOnUnload = cfgDfBoolean(false, \"disableFlushOnBeforeUnload\"),\r\n    _a.expCfg = cfgDfMerge({ inclScripts: false }),\r\n    _a));\r\nfunction _chkConfigMilliseconds(value, defValue) {\r\n    value = value || defValue;\r\n    if (value < MinMilliSeconds) {\r\n        value = MinMilliSeconds;\r\n    }\r\n    return +value;\r\n}\r\nfunction _chkSampling(value) {\r\n    return !isNaN(value) && value > 0 && value <= 100;\r\n}\r\nfunction _updateStorageUsage(extConfig) {\r\n    // Not resetting the storage usage as someone may have manually called utlDisableStorage, so this will only\r\n    // reset based if the configuration option is provided\r\n    if (!isUndefined(extConfig[_DYN_IS_STORAGE_USE_DISAB0 /* @min:%2eisStorageUseDisabled */])) {\r\n        if (extConfig[_DYN_IS_STORAGE_USE_DISAB0 /* @min:%2eisStorageUseDisabled */]) {\r\n            utlDisableStorage();\r\n        }\r\n        else {\r\n            utlEnableStorage();\r\n        }\r\n    }\r\n}\r\nvar AnalyticsPlugin = /** @class */ (function (_super) {\r\n    __extends(AnalyticsPlugin, _super);\r\n    function AnalyticsPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = AnalyticsPluginIdentifier; // do not change name or priority\r\n        _this.priority = 180; // take from reserved priority range 100- 200\r\n        _this.autoRoutePVDelay = 500; // ms; Time to wait after a route change before triggering a pageview to allow DOM changes to take place\r\n        var _eventTracking;\r\n        var _pageTracking;\r\n        var _pageViewManager;\r\n        var _pageViewPerformanceManager;\r\n        var _pageVisitTimeManager;\r\n        var _preInitTelemetryInitializers;\r\n        var _isBrowserLinkTrackingEnabled;\r\n        var _browserLinkInitializerAdded;\r\n        var _enableAutoRouteTracking;\r\n        var _historyListenerAdded;\r\n        var _disableExceptionTracking;\r\n        var _autoExceptionInstrumented;\r\n        var _enableUnhandledPromiseRejectionTracking;\r\n        var _autoUnhandledPromiseInstrumented;\r\n        var _extConfig;\r\n        var _autoTrackPageVisitTime;\r\n        // Counts number of trackAjax invocations.\r\n        // By default we only monitor X ajax call per view to avoid too much load.\r\n        // Default value is set in config.\r\n        // This counter keeps increasing even after the limit is reached.\r\n        var _trackAjaxAttempts = 0;\r\n        // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\r\n        var _prevUri; // Assigned in the constructor\r\n        var _currUri;\r\n        var _evtNamespace;\r\n        dynamicProto(AnalyticsPlugin, _this, function (_self, _base) {\r\n            var _addHook = _base[_DYN__ADD_HOOK /* @min:%2e_addHook */];\r\n            _initDefaults();\r\n            _self.getCookieMgr = function () {\r\n                return safeGetCookieMgr(_self[_DYN_CORE /* @min:%2ecore */]);\r\n            };\r\n            _self.processTelemetry = function (env, itemCtx) {\r\n                _self.processNext(env, itemCtx);\r\n            };\r\n            _self.trackEvent = function (event, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(event, EventTelemetry[_DYN_DATA_TYPE /* @min:%2edataType */], EventTelemetry[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n             * @param   name    A string that identifies this event uniquely within the document.\r\n             */\r\n            _self.startTrackEvent = function (name) {\r\n                try {\r\n                    _eventTracking.start(name);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 29 /* _eInternalMessageId.StartTrackEventFailed */, \"startTrackEvent failed, event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Log an extended event that you started timing with `startTrackEvent`.\r\n             * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n             * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n             * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n             */\r\n            _self.stopTrackEvent = function (name, properties, measurements) {\r\n                try {\r\n                    _eventTracking.stop(name, undefined, properties, measurements);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 30 /* _eInternalMessageId.StopTrackEventFailed */, \"stopTrackEvent failed, event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Log a diagnostic message\r\n             * @param trace\r\n             * @param ICustomProperties.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackTrace = function (trace, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(trace, Trace[_DYN_DATA_TYPE /* @min:%2edataType */], Trace[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Log a numeric value that is not associated with a specific event. Typically\r\n             * used to send regular reports of performance indicators. To send single measurement, just\r\n             * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n             * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n             * and sending the resulting average at intervals\r\n             * @param metric - input object argument. Only name and average are mandatory.\r\n             * @param } customProperties additional data used to filter metrics in the\r\n             * portal. Defaults to empty.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackMetric = function (metric, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(metric, Metric[_DYN_DATA_TYPE /* @min:%2edataType */], Metric[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 36 /* _eInternalMessageId.TrackMetricFailed */, \"trackMetric failed, metric will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Logs that a page or other item was viewed.\r\n             * @param IPageViewTelemetry - The string you used as the name in startTrackPage. Defaults to the document title.\r\n             * @param customProperties - Additional data used to filter events and metrics. Defaults to empty.\r\n             * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n             */\r\n            _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (pageView, customProperties) {\r\n                try {\r\n                    var inPv = pageView || {};\r\n                    _pageViewManager[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */](inPv, __assign(__assign(__assign({}, inPv.properties), inPv.measurements), customProperties));\r\n                    if (_autoTrackPageVisitTime) {\r\n                        _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_1 /* @min:%2etrackPreviousPageVisit */](inPv.name, inPv.uri);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageView failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n             * @param pageView - Page view item to be sent\r\n             * @param properties - Custom properties (Part C) that a user can add to the telemetry item\r\n             * @param systemProperties - System level properties (Part A) that a user can add to the telemetry item\r\n             */\r\n            _self[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */] = function (pageView, properties, systemProperties) {\r\n                var doc = getDocument();\r\n                if (doc) {\r\n                    pageView.refUri = pageView.refUri === undefined ? doc.referrer : pageView.refUri;\r\n                }\r\n                if (isNullOrUndefined(pageView[_DYN_START_TIME /* @min:%2estartTime */])) {\r\n                    // calculate the start time manually\r\n                    var duration = ((properties || pageView[_DYN_PROPERTIES /* @min:%2eproperties */] || {})[_DYN_DURATION /* @min:%2eduration */] || 0);\r\n                    pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(new Date().getTime() - duration);\r\n                }\r\n                var telemetryItem = createTelemetryItem(pageView, PageView[_DYN_DATA_TYPE /* @min:%2edataType */], PageView[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                // reset ajaxes counter\r\n                _trackAjaxAttempts = 0;\r\n            };\r\n            /**\r\n             * @ignore INTERNAL ONLY\r\n             * @param pageViewPerformance\r\n             * @param properties\r\n             */\r\n            _self[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */] = function (pageViewPerformance, properties, systemProperties) {\r\n                var telemetryItem = createTelemetryItem(pageViewPerformance, PageViewPerformance[_DYN_DATA_TYPE /* @min:%2edataType */], PageViewPerformance[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            };\r\n            /**\r\n             * Send browser performance metrics.\r\n             * @param pageViewPerformance\r\n             * @param customProperties\r\n             */\r\n            _self.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\r\n                var inPvp = pageViewPerformance || {};\r\n                try {\r\n                    _pageViewPerformanceManager[_DYN_POPULATE_PAGE_VIEW_P4 /* @min:%2epopulatePageViewPerformanceEvent */](inPvp);\r\n                    _self[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */](inPvp, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageViewPerformance failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n             * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n             * and send the event.\r\n             * @param name - A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n             */\r\n            _self.startTrackPage = function (name) {\r\n                try {\r\n                    if (typeof name !== \"string\") {\r\n                        var doc = getDocument();\r\n                        name = doc && doc.title || \"\";\r\n                    }\r\n                    _pageTracking.start(name);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 31 /* _eInternalMessageId.StartTrackFailed */, \"startTrackPage failed, page view may not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n             * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n             * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n             * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n             * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n             * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n             */\r\n            _self.stopTrackPage = function (name, url, properties, measurement) {\r\n                try {\r\n                    if (typeof name !== \"string\") {\r\n                        var doc = getDocument();\r\n                        name = doc && doc.title || \"\";\r\n                    }\r\n                    if (typeof url !== \"string\") {\r\n                        var loc = getLocation();\r\n                        url = loc && loc[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    _pageTracking.stop(name, url, properties, measurement);\r\n                    if (_autoTrackPageVisitTime) {\r\n                        _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_1 /* @min:%2etrackPreviousPageVisit */](name, url);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 32 /* _eInternalMessageId.StopTrackFailed */, \"stopTrackPage failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n            * @ignore INTERNAL ONLY\r\n            * @param exception\r\n            * @param properties\r\n            * @param systemProperties\r\n            */\r\n            _self[_DYN_SEND_EXCEPTION_INTER5 /* @min:%2esendExceptionInternal */] = function (exception, customProperties, systemProperties) {\r\n                var _a;\r\n                // Adding additional edge cases to handle\r\n                // - Not passing anything (null / undefined)\r\n                var theError = (exception && (exception[_DYN_EXCEPTION /* @min:%2eexception */] || exception[_DYN_ERROR /* @min:%2eerror */])) ||\r\n                    // - Handle someone calling trackException based of v1 API where the exception was the Error\r\n                    isError(exception) && exception ||\r\n                    // - Handles no error being defined and instead of creating a new Error() instance attempt to map so any stacktrace\r\n                    //   is preserved and does not list ApplicationInsights code as the source\r\n                    { name: (exception && typeof exception), message: exception || strNotSpecified };\r\n                // If no exception object was passed assign to an empty object to avoid internal exceptions\r\n                exception = exception || {};\r\n                var exceptionPartB = new Exception(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), theError, exception[_DYN_PROPERTIES /* @min:%2eproperties */] || customProperties, exception.measurements, exception.severityLevel, exception.id).toInterface();\r\n                var doc = getDocument();\r\n                if (doc && ((_a = _self.config.expCfg) === null || _a === void 0 ? void 0 : _a.inclScripts)) {\r\n                    var scriptsInfo = findAllScripts(doc);\r\n                    exceptionPartB[_DYN_PROPERTIES /* @min:%2eproperties */][\"exceptionScripts\"] = JSON.stringify(scriptsInfo);\r\n                }\r\n                var telemetryItem = createTelemetryItem(exceptionPartB, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            };\r\n            /**\r\n             * Log an exception you have caught.\r\n             *\r\n             * @param exception -   Object which contains exception to be sent\r\n             * @param } customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n             *\r\n             * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackException = function (exception, customProperties) {\r\n                if (exception && !exception[_DYN_EXCEPTION /* @min:%2eexception */] && exception[_DYN_ERROR /* @min:%2eerror */]) {\r\n                    exception[_DYN_EXCEPTION /* @min:%2eexception */] = exception[_DYN_ERROR /* @min:%2eerror */];\r\n                }\r\n                try {\r\n                    _self[_DYN_SEND_EXCEPTION_INTER5 /* @min:%2esendExceptionInternal */](exception, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 35 /* _eInternalMessageId.TrackExceptionFailed */, \"trackException failed, exception will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Custom error handler for Application Insights Analytics\r\n             * @param exception\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self[_DYN__ONERROR /* @min:%2e_onerror */] = function (exception) {\r\n                var error = exception && exception[_DYN_ERROR /* @min:%2eerror */];\r\n                var evt = exception && exception.evt;\r\n                try {\r\n                    if (!evt) {\r\n                        var _window = getWindow();\r\n                        if (_window) {\r\n                            evt = _window[strEvent];\r\n                        }\r\n                    }\r\n                    var url = (exception && exception.url) || (getDocument() || {}).URL;\r\n                    // If no error source is provided assume the default window.onerror handler\r\n                    var errorSrc = exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */] || \"window.onerror@\" + url + \":\" + (exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0) + \":\" + (exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0);\r\n                    var properties = {\r\n                        errorSrc: errorSrc,\r\n                        url: url,\r\n                        lineNumber: exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0,\r\n                        columnNumber: exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0,\r\n                        message: exception[_DYN_MESSAGE /* @min:%2emessage */]\r\n                    };\r\n                    if (isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception[_DYN_ERROR /* @min:%2eerror */])) {\r\n                        _sendCORSException(Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](\"Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.\", url, exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0, exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0, error, evt, null, errorSrc), properties);\r\n                    }\r\n                    else {\r\n                        if (!exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */]) {\r\n                            exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */] = errorSrc;\r\n                        }\r\n                        _self.trackException({ exception: exception, severityLevel: 3 /* eSeverityLevel.Error */ }, properties);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    var errorString = error ? (error.name + \", \" + error[_DYN_MESSAGE /* @min:%2emessage */]) : \"null\";\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 11 /* _eInternalMessageId.ExceptionWhileLoggingError */, \"_onError threw exception while logging error, error will not be collected: \"\r\n                        + getExceptionName(e), { exception: dumpObj(e), errorString: errorString });\r\n                }\r\n            };\r\n            _self[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */] = function (telemetryInitializer) {\r\n                if (_self[_DYN_CORE /* @min:%2ecore */]) {\r\n                    // Just add to the core\r\n                    return _self[_DYN_CORE /* @min:%2ecore */][_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](telemetryInitializer);\r\n                }\r\n                // Handle \"pre-initialization\" telemetry initializers (for backward compatibility)\r\n                if (!_preInitTelemetryInitializers) {\r\n                    _preInitTelemetryInitializers = [];\r\n                }\r\n                _preInitTelemetryInitializers.push(telemetryInitializer);\r\n            };\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                if (_self.isInitialized()) {\r\n                    return;\r\n                }\r\n                if (isNullOrUndefined(core)) {\r\n                    throwError(\"Error initializing\");\r\n                }\r\n                _base.initialize(config, core, extensions, pluginChain);\r\n                try {\r\n                    _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\r\n                    if (_preInitTelemetryInitializers) {\r\n                        arrForEach(_preInitTelemetryInitializers, function (initializer) {\r\n                            core[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](initializer);\r\n                        });\r\n                        _preInitTelemetryInitializers = null;\r\n                    }\r\n                    _populateDefaults(config);\r\n                    _pageViewPerformanceManager = new PageViewPerformanceManager(_self[_DYN_CORE /* @min:%2ecore */]);\r\n                    _pageViewManager = new PageViewManager(_self, _extConfig.overridePageViewDuration, _self[_DYN_CORE /* @min:%2ecore */], _pageViewPerformanceManager);\r\n                    _pageVisitTimeManager = new PageVisitTimeManager(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), function (pageName, pageUrl, pageVisitTime) { return trackPageVisitTime(pageName, pageUrl, pageVisitTime); });\r\n                    _eventTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackEvent\");\r\n                    _eventTracking.action =\r\n                        function (name, url, duration, properties, measurements) {\r\n                            if (!properties) {\r\n                                properties = {};\r\n                            }\r\n                            if (!measurements) {\r\n                                measurements = {};\r\n                            }\r\n                            properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\r\n                            _self.trackEvent({ name: name, properties: properties, measurements: measurements });\r\n                        };\r\n                    // initialize page view timing\r\n                    _pageTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackPageView\");\r\n                    _pageTracking.action = function (name, url, duration, properties, measurements) {\r\n                        // duration must be a custom property in order for the collector to extract it\r\n                        if (isNullOrUndefined(properties)) {\r\n                            properties = {};\r\n                        }\r\n                        properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\r\n                        var pageViewItem = {\r\n                            name: name,\r\n                            uri: url,\r\n                            properties: properties,\r\n                            measurements: measurements\r\n                        };\r\n                        _self[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageViewItem, properties);\r\n                    };\r\n                    if (hasWindow()) {\r\n                        _updateExceptionTracking();\r\n                        _updateLocationChange();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // resetting the initialized state because of failure\r\n                    _self.setInitialized(false);\r\n                    throw e;\r\n                }\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                _pageViewManager && _pageViewManager.teardown(unloadCtx, unloadState);\r\n                // Just register to remove all events associated with this namespace\r\n                eventOff(window, null, null, _evtNamespace);\r\n                _initDefaults();\r\n            };\r\n            function _populateDefaults(config) {\r\n                var identifier = _self.identifier;\r\n                var core = _self[_DYN_CORE /* @min:%2ecore */];\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(config, function () {\r\n                    var ctx = createProcessTelemetryContext(null, config, core);\r\n                    _extConfig = ctx.getExtCfg(identifier, defaultValues);\r\n                    _autoTrackPageVisitTime = _extConfig[_DYN_AUTO_TRACK_PAGE_VISI9 /* @min:%2eautoTrackPageVisitTime */];\r\n                    if (config.storagePrefix) {\r\n                        utlSetStoragePrefix(config.storagePrefix);\r\n                    }\r\n                    _updateStorageUsage(_extConfig);\r\n                    // _updateBrowserLinkTracking\r\n                    _isBrowserLinkTrackingEnabled = _extConfig[_DYN_IS_BROWSER_LINK_TRAC10 /* @min:%2eisBrowserLinkTrackingEnabled */];\r\n                    _addDefaultTelemetryInitializers();\r\n                }));\r\n            }\r\n            /**\r\n             * Log a page visit time\r\n             * @param    pageName    Name of page\r\n             * @param    pageVisitDuration Duration of visit to the page in milliseconds\r\n             */\r\n            function trackPageVisitTime(pageName, pageUrl, pageVisitTime) {\r\n                var properties = { PageName: pageName, PageUrl: pageUrl };\r\n                _self.trackMetric({\r\n                    name: \"PageVisitTime\",\r\n                    average: pageVisitTime,\r\n                    max: pageVisitTime,\r\n                    min: pageVisitTime,\r\n                    sampleCount: 1\r\n                }, properties);\r\n            }\r\n            function _addDefaultTelemetryInitializers() {\r\n                if (!_browserLinkInitializerAdded && _isBrowserLinkTrackingEnabled) {\r\n                    var browserLinkPaths_1 = [\"/browserLinkSignalR/\", \"/__browserLink/\"];\r\n                    var dropBrowserLinkRequests = function (envelope) {\r\n                        if (_isBrowserLinkTrackingEnabled && envelope.baseType === RemoteDependencyData[_DYN_DATA_TYPE /* @min:%2edataType */]) {\r\n                            var remoteData = envelope.baseData;\r\n                            if (remoteData) {\r\n                                for (var i = 0; i < browserLinkPaths_1[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                                    if (remoteData.target && strIndexOf(remoteData.target, browserLinkPaths_1[i]) >= 0) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        return true;\r\n                    };\r\n                    _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](_self[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](dropBrowserLinkRequests));\r\n                    _browserLinkInitializerAdded = true;\r\n                }\r\n            }\r\n            function _sendCORSException(exception, properties) {\r\n                var telemetryItem = createTelemetryItem(exception, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            }\r\n            function _updateExceptionTracking() {\r\n                var _window = getWindow();\r\n                var locn = getLocation(true);\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\r\n                    _disableExceptionTracking = _extConfig.disableExceptionTracking;\r\n                    if (!_disableExceptionTracking && !_autoExceptionInstrumented && !_extConfig.autoExceptionInstrumented) {\r\n                        // We want to enable exception auto collection and it has not been done so yet\r\n                        _addHook(InstrumentEvent(_window, \"onerror\", {\r\n                            ns: _evtNamespace,\r\n                            rsp: function (callDetails, message, url, lineNumber, columnNumber, error) {\r\n                                if (!_disableExceptionTracking && callDetails.rslt !== true) {\r\n                                    _self[_DYN__ONERROR /* @min:%2e_onerror */](Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](message, url, lineNumber, columnNumber, error, callDetails.evt));\r\n                                }\r\n                            }\r\n                        }, false));\r\n                        _autoExceptionInstrumented = true;\r\n                    }\r\n                }));\r\n                _addUnhandledPromiseRejectionTracking(_window, locn);\r\n            }\r\n            function _updateLocationChange() {\r\n                var win = getWindow();\r\n                var locn = getLocation(true);\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\r\n                    _enableAutoRouteTracking = _extConfig[_DYN_ENABLE_AUTO_ROUTE_TR11 /* @min:%2eenableAutoRouteTracking */] === true;\r\n                    /**\r\n                     * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n                     */\r\n                    if (win && _enableAutoRouteTracking && !_historyListenerAdded && hasHistory()) {\r\n                        var _history = getHistory();\r\n                        if (isFunction(_history.pushState) && isFunction(_history.replaceState) && typeof Event !== strUndefined) {\r\n                            _addHistoryListener(win, _history, locn);\r\n                        }\r\n                    }\r\n                }));\r\n            }\r\n            function _getDistributedTraceCtx() {\r\n                var distributedTraceCtx = null;\r\n                if (_self[_DYN_CORE /* @min:%2ecore */] && _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx) {\r\n                    distributedTraceCtx = _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx(false);\r\n                }\r\n                if (!distributedTraceCtx) {\r\n                    // Fallback when using an older Core and PropertiesPlugin\r\n                    var properties = _self[_DYN_CORE /* @min:%2ecore */].getPlugin(PropertiesPluginIdentifier);\r\n                    if (properties) {\r\n                        var context = properties.plugin.context;\r\n                        if (context) {\r\n                            distributedTraceCtx = createDistributedTraceContextFromTrace(context.telemetryTrace);\r\n                        }\r\n                    }\r\n                }\r\n                return distributedTraceCtx;\r\n            }\r\n            /**\r\n             * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n             */\r\n            function _addHistoryListener(win, history, locn) {\r\n                if (_historyListenerAdded) {\r\n                    return;\r\n                }\r\n                // Name Prefix is only referenced during the initial initialization and cannot be changed afterwards\r\n                var namePrefix = _extConfig.namePrefix || \"\";\r\n                function _popstateHandler() {\r\n                    if (_enableAutoRouteTracking) {\r\n                        _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                    }\r\n                }\r\n                function _locationChangeHandler() {\r\n                    // We always track the changes (if the handler is installed) to handle the feature being disabled between location changes\r\n                    if (_currUri) {\r\n                        _prevUri = _currUri;\r\n                        _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    else {\r\n                        _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    if (_enableAutoRouteTracking) {\r\n                        var distributedTraceCtx = _getDistributedTraceCtx();\r\n                        if (distributedTraceCtx) {\r\n                            distributedTraceCtx.setTraceId(generateW3CId());\r\n                            var traceLocationName = \"_unknown_\";\r\n                            if (locn && locn.pathname) {\r\n                                traceLocationName = locn.pathname + (locn.hash || \"\");\r\n                            }\r\n                            // This populates the ai.operation.name which has a maximum size of 1024 so we need to sanitize it\r\n                            distributedTraceCtx.setName(dataSanitizeString(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), traceLocationName));\r\n                        }\r\n                        scheduleTimeout((function (uri) {\r\n                            // todo: override start time so that it is not affected by autoRoutePVDelay\r\n                            _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */]({ refUri: uri, properties: { duration: 0 } }); // SPA route change loading durations are undefined, so send 0\r\n                        }).bind(_self, _prevUri), _self.autoRoutePVDelay);\r\n                    }\r\n                }\r\n                _addHook(InstrumentEvent(history, \"pushState\", {\r\n                    ns: _evtNamespace,\r\n                    rsp: function () {\r\n                        if (_enableAutoRouteTracking) {\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"pushState\"));\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                        }\r\n                    }\r\n                }, true));\r\n                _addHook(InstrumentEvent(history, \"replaceState\", {\r\n                    ns: _evtNamespace,\r\n                    rsp: function () {\r\n                        if (_enableAutoRouteTracking) {\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"replaceState\"));\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                        }\r\n                    }\r\n                }, true));\r\n                eventOn(win, namePrefix + \"popstate\", _popstateHandler, _evtNamespace);\r\n                eventOn(win, namePrefix + \"locationchange\", _locationChangeHandler, _evtNamespace);\r\n                _historyListenerAdded = true;\r\n            }\r\n            function _addUnhandledPromiseRejectionTracking(_window, _location) {\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\r\n                    _enableUnhandledPromiseRejectionTracking = _extConfig[_DYN_ENABLE_UNHANDLED_PRO12 /* @min:%2eenableUnhandledPromiseRejectionTracking */] === true;\r\n                    _autoExceptionInstrumented = _autoExceptionInstrumented || _extConfig[_DYN_AUTO_UNHANDLED_PROMI13 /* @min:%2eautoUnhandledPromiseInstrumented */];\r\n                    if (_enableUnhandledPromiseRejectionTracking && !_autoUnhandledPromiseInstrumented) {\r\n                        // We want to enable exception auto collection and it has not been done so yet\r\n                        _addHook(InstrumentEvent(_window, \"onunhandledrejection\", {\r\n                            ns: _evtNamespace,\r\n                            rsp: function (callDetails, error) {\r\n                                if (_enableUnhandledPromiseRejectionTracking && callDetails.rslt !== true) { // handled could be typeof function\r\n                                    _self[_DYN__ONERROR /* @min:%2e_onerror */](Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](_getReason(error), _location ? _location[_DYN_HREF /* @min:%2ehref */] : \"\", 0, 0, error, callDetails.evt));\r\n                                }\r\n                            }\r\n                        }, false));\r\n                        _extConfig[_DYN_AUTO_UNHANDLED_PROMI13 /* @min:%2eautoUnhandledPromiseInstrumented */] = _autoUnhandledPromiseInstrumented = true;\r\n                    }\r\n                }));\r\n            }\r\n            /**\r\n             * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n             * @param severity - {eLoggingSeverity} - The severity of the log message\r\n             * @param msgId - {_eInternalLogMessage} - The log message.\r\n             */\r\n            function _throwInternal(severity, msgId, msg, properties, isUserAct) {\r\n                _self[_DYN_DIAG_LOG /* @min:%2ediagLog */]().throwInternal(severity, msgId, msg, properties, isUserAct);\r\n            }\r\n            function _initDefaults() {\r\n                _eventTracking = null;\r\n                _pageTracking = null;\r\n                _pageViewManager = null;\r\n                _pageViewPerformanceManager = null;\r\n                _pageVisitTimeManager = null;\r\n                _preInitTelemetryInitializers = null;\r\n                _isBrowserLinkTrackingEnabled = false;\r\n                _browserLinkInitializerAdded = false;\r\n                _enableAutoRouteTracking = false;\r\n                _historyListenerAdded = false;\r\n                _disableExceptionTracking = false;\r\n                _autoExceptionInstrumented = false;\r\n                _enableUnhandledPromiseRejectionTracking = false;\r\n                _autoUnhandledPromiseInstrumented = false;\r\n                _autoTrackPageVisitTime = false;\r\n                // Counts number of trackAjax invocations.\r\n                // By default we only monitor X ajax call per view to avoid too much load.\r\n                // Default value is set in config.\r\n                // This counter keeps increasing even after the limit is reached.\r\n                _trackAjaxAttempts = 0;\r\n                // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\r\n                var location = getLocation(true);\r\n                _prevUri = location && location[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                _currUri = null;\r\n                _evtNamespace = null;\r\n                _extConfig = null;\r\n                // Define _self.config\r\n                objDefine(_self, \"config\", {\r\n                    g: function () { return _extConfig; }\r\n                });\r\n            }\r\n            // For backward compatibility\r\n            objDefine(_self, \"_pageViewManager\", { g: function () { return _pageViewManager; } });\r\n            objDefine(_self, \"_pageViewPerformanceManager\", { g: function () { return _pageViewPerformanceManager; } });\r\n            objDefine(_self, \"_pageVisitTimeManager\", { g: function () { return _pageVisitTimeManager; } });\r\n            objDefine(_self, \"_evtNamespace\", { g: function () { return \".\" + _evtNamespace; } });\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    AnalyticsPlugin.prototype.getCookieMgr = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AnalyticsPlugin.prototype.processTelemetry = function (env, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.trackEvent = function (event, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n     * @param   name    A string that identifies this event uniquely within the document.\r\n     */\r\n    AnalyticsPlugin.prototype.startTrackEvent = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Log a diagnostic message\r\n     * @param trace\r\n     * @param ICustomProperties.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackTrace = function (trace, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Log a numeric value that is not associated with a specific event. Typically\r\n     * used to send regular reports of performance indicators. To send single measurement, just\r\n     * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n     * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n     * and sending the resulting average at intervals\r\n     * @param metric - input object argument. Only name and average are mandatory.\r\n     * @param } customProperties additional data used to filter metrics in the\r\n     * portal. Defaults to empty.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackMetric = function (metric, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs that a page or other item was viewed.\r\n     * @param IPageViewTelemetry - The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param customProperties - Additional data used to filter events and metrics. Defaults to empty.\r\n     * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n     */\r\n    AnalyticsPlugin.prototype.trackPageView = function (pageView, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n     * @param pageView - Page view item to be sent\r\n     * @param properties - Custom properties (Part C) that a user can add to the telemetry item\r\n     * @param systemProperties - System level properties (Part A) that a user can add to the telemetry item\r\n     */\r\n    AnalyticsPlugin.prototype.sendPageViewInternal = function (pageView, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @ignore INTERNAL ONLY\r\n     * @param pageViewPerformance\r\n     * @param properties\r\n     */\r\n    AnalyticsPlugin.prototype.sendPageViewPerformanceInternal = function (pageViewPerformance, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Send browser performance metrics.\r\n     * @param pageViewPerformance\r\n     * @param customProperties\r\n     */\r\n    AnalyticsPlugin.prototype.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name - A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    AnalyticsPlugin.prototype.startTrackPage = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.stopTrackPage = function (name, url, properties, measurement) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n    * @ignore INTERNAL ONLY\r\n    * @param exception\r\n    * @param properties\r\n    * @param systemProperties\r\n    */\r\n    AnalyticsPlugin.prototype.sendExceptionInternal = function (exception, customProperties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an exception you have caught.\r\n     *\r\n     * @param exception -   Object which contains exception to be sent\r\n     * @param } customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     *\r\n     * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackException = function (exception, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Custom error handler for Application Insights Analytics\r\n     * @param exception\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype._onerror = function (exception) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AnalyticsPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.Version = '3.3.1'; // Not currently used anywhere\r\n    return AnalyticsPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport { AnalyticsPlugin };\r\n//# sourceMappingURL=AnalyticsPlugin.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}