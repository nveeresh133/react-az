{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Properties Plugin, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { utlRemoveStorage } from \"@microsoft/applicationinsights-common\";\nimport { _throwInternal, newId, onConfigChange, safeGetCookieMgr, safeGetLogger, toISOString } from \"@microsoft/applicationinsights-core-js\";\nimport { objDefine } from \"@nevware21/ts-utils\";\nimport { _DYN_ACCOUNT_ID, _DYN_AUTHENTICATED_ID, _DYN_AUTH_USER_COOKIE_NAM7, _DYN_COOKIE_SEPARATOR, _DYN_GET_NEW_ID, _DYN_ID_LENGTH, _DYN_IS_NEW_USER, _DYN_IS_USER_COOKIE_SET, _DYN_JOIN, _DYN_LENGTH, _DYN_NAME_PREFIX, _DYN_UPDATE, _DYN_USER_COOKIE_POSTFIX } from \"../__DynamicConstants\";\nfunction _validateUserInput(id) {\n  // Validate:\n  // 1. Id is a non-empty string.\n  // 2. It does not contain special characters for cookies.\n  if (typeof id !== \"string\" || !id || id.match(/,|;|=| |\\|/)) {\n    return false;\n  }\n  return true;\n}\nvar User = /** @class */function () {\n  function User(config, core, unloadHookContainer) {\n    /**\r\n     * A flag indicating whether this represents a new user\r\n     */\n    this.isNewUser = false;\n    /**\r\n     * A flag indicating whether the user cookie has been set\r\n     */\n    this.isUserCookieSet = false;\n    var _logger = safeGetLogger(core);\n    var _cookieManager = safeGetCookieMgr(core);\n    var _storageNamePrefix;\n    dynamicProto(User, this, function (_self) {\n      // Define _self.config\n      objDefine(_self, \"config\", {\n        g: function () {\n          return config;\n        }\n      });\n      var unloadHook = onConfigChange(config, function () {\n        var userCookiePostfix = config[_DYN_USER_COOKIE_POSTFIX /* @min:%2euserCookiePostfix */] || \"\";\n        _storageNamePrefix = User.userCookieName + userCookiePostfix;\n        // get userId or create new one if none exists\n        var cookie = _cookieManager.get(_storageNamePrefix);\n        if (cookie) {\n          _self[_DYN_IS_NEW_USER /* @min:%2eisNewUser */] = false;\n          var params = cookie.split(User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]);\n          if (params[_DYN_LENGTH /* @min:%2elength */] > 0) {\n            _self.id = params[0];\n            // we already have a cookie\n            _self[_DYN_IS_USER_COOKIE_SET /* @min:%2eisUserCookieSet */] = !!_self.id;\n          }\n        }\n        if (!_self.id) {\n          _self.id = _generateNewId();\n          var newCookie = _generateNewCookie(_self.id);\n          _setUserCookie(newCookie[_DYN_JOIN /* @min:%2ejoin */](User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]));\n          // If we have an config.namePrefix() + ai_session in local storage this means the user actively removed our cookies.\n          // We should respect their wishes and clear ourselves from local storage\n          var name_1 = (config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] || \"\") + \"ai_session\";\n          utlRemoveStorage(_logger, name_1);\n        }\n        // We still take the account id from the ctor param for backward compatibility.\n        // But if the the customer set the accountId through the newer setAuthenticatedUserContext API, we will override it.\n        _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = config[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] || undefined;\n        // Get the auth user id and account id from the cookie if exists\n        // Cookie is in the pattern: <authenticatedId>|<accountId>\n        var authCookie = _cookieManager.get(User[_DYN_AUTH_USER_COOKIE_NAM7 /* @min:%2eauthUserCookieName */]);\n        if (authCookie) {\n          authCookie = decodeURI(authCookie);\n          var authCookieString = authCookie.split(User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]);\n          if (authCookieString[0]) {\n            _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */] = authCookieString[0];\n          }\n          if (authCookieString[_DYN_LENGTH /* @min:%2elength */] > 1 && authCookieString[1]) {\n            _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = authCookieString[1];\n          }\n        }\n      });\n      unloadHookContainer && unloadHookContainer.add(unloadHook);\n      function _generateNewId() {\n        var theConfig = config || {};\n        var getNewId = theConfig[_DYN_GET_NEW_ID /* @min:%2egetNewId */] || newId;\n        var id = getNewId(theConfig[_DYN_ID_LENGTH /* @min:%2eidLength */] ? config[_DYN_ID_LENGTH /* @min:%2eidLength */] : 22);\n        return id;\n      }\n      function _generateNewCookie(userId) {\n        var acqStr = toISOString(new Date());\n        _self.accountAcquisitionDate = acqStr;\n        _self[_DYN_IS_NEW_USER /* @min:%2eisNewUser */] = true;\n        var newCookie = [userId, acqStr];\n        return newCookie;\n      }\n      function _setUserCookie(cookie) {\n        // without expiration, cookies expire at the end of the session\n        // set it to 365 days from now\n        // 365 * 24 * 60 * 60 = 31536000\n        var oneYear = 31536000;\n        _self[_DYN_IS_USER_COOKIE_SET /* @min:%2eisUserCookieSet */] = _cookieManager.set(_storageNamePrefix, cookie, oneYear);\n      }\n      _self.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\n        if (storeInCookie === void 0) {\n          storeInCookie = false;\n        }\n        // Validate inputs to ensure no cookie control characters.\n        var isInvalidInput = !_validateUserInput(authenticatedUserId) || accountId && !_validateUserInput(accountId);\n        if (isInvalidInput) {\n          _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 60 /* _eInternalMessageId.SetAuthContextFailedAccountName */, \"Setting auth user context failed. \" + \"User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.\", true);\n          return;\n        }\n        // Create cookie string.\n        _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */] = authenticatedUserId;\n        var authCookie = _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */];\n        if (accountId) {\n          _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = accountId;\n          authCookie = [_self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */], _self.accountId][_DYN_JOIN /* @min:%2ejoin */](User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]);\n        }\n        if (storeInCookie) {\n          // Set the cookie. No expiration date because this is a session cookie (expires when browser closed).\n          // Encoding the cookie to handle unexpected unicode characters.\n          _cookieManager.set(User[_DYN_AUTH_USER_COOKIE_NAM7 /* @min:%2eauthUserCookieName */], encodeURI(authCookie));\n        }\n      };\n      /**\r\n       * Clears the authenticated user id and the account id from the user context.\r\n       * @returns {}\r\n       */\n      _self.clearAuthenticatedUserContext = function () {\n        _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */] = null;\n        _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = null;\n        _cookieManager.del(User[_DYN_AUTH_USER_COOKIE_NAM7 /* @min:%2eauthUserCookieName */]);\n      };\n      _self[_DYN_UPDATE /* @min:%2eupdate */] = function (userId) {\n        // Optimizations to avoid setting and processing the cookie when not needed\n        if (_self.id !== userId || !_self[_DYN_IS_USER_COOKIE_SET /* @min:%2eisUserCookieSet */]) {\n          var user_id = userId ? userId : _generateNewId();\n          var user_cookie = _generateNewCookie(user_id);\n          _setUserCookie(user_cookie[_DYN_JOIN /* @min:%2ejoin */](User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]));\n        }\n      };\n    });\n  }\n  // Removed Stub for User.prototype.setAuthenticatedUserContext.\n  // Removed Stub for User.prototype.clearAuthenticatedUserContext.\n  // Removed Stub for User.prototype.update.\n  User.cookieSeparator = \"|\";\n  User.userCookieName = \"ai_user\";\n  User.authUserCookieName = \"ai_authUser\";\n  return User;\n}();\nexport { User };","map":{"version":3,"names":["dynamicProto","utlRemoveStorage","_throwInternal","newId","onConfigChange","safeGetCookieMgr","safeGetLogger","toISOString","objDefine","_DYN_ACCOUNT_ID","_DYN_AUTHENTICATED_ID","_DYN_AUTH_USER_COOKIE_NAM7","_DYN_COOKIE_SEPARATOR","_DYN_GET_NEW_ID","_DYN_ID_LENGTH","_DYN_IS_NEW_USER","_DYN_IS_USER_COOKIE_SET","_DYN_JOIN","_DYN_LENGTH","_DYN_NAME_PREFIX","_DYN_UPDATE","_DYN_USER_COOKIE_POSTFIX","_validateUserInput","id","match","User","config","core","unloadHookContainer","isNewUser","isUserCookieSet","_logger","_cookieManager","_storageNamePrefix","_self","g","unloadHook","userCookiePostfix","userCookieName","cookie","get","params","split","_generateNewId","newCookie","_generateNewCookie","_setUserCookie","name_1","undefined","authCookie","decodeURI","authCookieString","add","theConfig","getNewId","userId","acqStr","Date","accountAcquisitionDate","oneYear","set","setAuthenticatedUserContext","authenticatedUserId","accountId","storeInCookie","isInvalidInput","encodeURI","clearAuthenticatedUserContext","del","user_id","user_cookie","cookieSeparator","authUserCookieName"],"sources":["/home/veeresh133/app/my-app/node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/User.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { utlRemoveStorage } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, newId, onConfigChange, safeGetCookieMgr, safeGetLogger, toISOString } from \"@microsoft/applicationinsights-core-js\";\r\nimport { objDefine } from \"@nevware21/ts-utils\";\r\nimport { _DYN_ACCOUNT_ID, _DYN_AUTHENTICATED_ID, _DYN_AUTH_USER_COOKIE_NAM7, _DYN_COOKIE_SEPARATOR, _DYN_GET_NEW_ID, _DYN_ID_LENGTH, _DYN_IS_NEW_USER, _DYN_IS_USER_COOKIE_SET, _DYN_JOIN, _DYN_LENGTH, _DYN_NAME_PREFIX, _DYN_UPDATE, _DYN_USER_COOKIE_POSTFIX } from \"../__DynamicConstants\";\r\nfunction _validateUserInput(id) {\r\n    // Validate:\r\n    // 1. Id is a non-empty string.\r\n    // 2. It does not contain special characters for cookies.\r\n    if (typeof id !== \"string\" ||\r\n        !id ||\r\n        id.match(/,|;|=| |\\|/)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nvar User = /** @class */ (function () {\r\n    function User(config, core, unloadHookContainer) {\r\n        /**\r\n         * A flag indicating whether this represents a new user\r\n         */\r\n        this.isNewUser = false;\r\n        /**\r\n         * A flag indicating whether the user cookie has been set\r\n         */\r\n        this.isUserCookieSet = false;\r\n        var _logger = safeGetLogger(core);\r\n        var _cookieManager = safeGetCookieMgr(core);\r\n        var _storageNamePrefix;\r\n        dynamicProto(User, this, function (_self) {\r\n            // Define _self.config\r\n            objDefine(_self, \"config\", {\r\n                g: function () { return config; }\r\n            });\r\n            var unloadHook = onConfigChange(config, function () {\r\n                var userCookiePostfix = config[_DYN_USER_COOKIE_POSTFIX /* @min:%2euserCookiePostfix */] || \"\";\r\n                _storageNamePrefix = User.userCookieName + userCookiePostfix;\r\n                // get userId or create new one if none exists\r\n                var cookie = _cookieManager.get(_storageNamePrefix);\r\n                if (cookie) {\r\n                    _self[_DYN_IS_NEW_USER /* @min:%2eisNewUser */] = false;\r\n                    var params = cookie.split(User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]);\r\n                    if (params[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                        _self.id = params[0];\r\n                        // we already have a cookie\r\n                        _self[_DYN_IS_USER_COOKIE_SET /* @min:%2eisUserCookieSet */] = !!_self.id;\r\n                    }\r\n                }\r\n                if (!_self.id) {\r\n                    _self.id = _generateNewId();\r\n                    var newCookie = _generateNewCookie(_self.id);\r\n                    _setUserCookie(newCookie[_DYN_JOIN /* @min:%2ejoin */](User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]));\r\n                    // If we have an config.namePrefix() + ai_session in local storage this means the user actively removed our cookies.\r\n                    // We should respect their wishes and clear ourselves from local storage\r\n                    var name_1 = (config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] || \"\") + \"ai_session\";\r\n                    utlRemoveStorage(_logger, name_1);\r\n                }\r\n                // We still take the account id from the ctor param for backward compatibility.\r\n                // But if the the customer set the accountId through the newer setAuthenticatedUserContext API, we will override it.\r\n                _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = config[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] || undefined;\r\n                // Get the auth user id and account id from the cookie if exists\r\n                // Cookie is in the pattern: <authenticatedId>|<accountId>\r\n                var authCookie = _cookieManager.get(User[_DYN_AUTH_USER_COOKIE_NAM7 /* @min:%2eauthUserCookieName */]);\r\n                if (authCookie) {\r\n                    authCookie = decodeURI(authCookie);\r\n                    var authCookieString = authCookie.split(User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]);\r\n                    if (authCookieString[0]) {\r\n                        _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */] = authCookieString[0];\r\n                    }\r\n                    if (authCookieString[_DYN_LENGTH /* @min:%2elength */] > 1 && authCookieString[1]) {\r\n                        _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = authCookieString[1];\r\n                    }\r\n                }\r\n            });\r\n            unloadHookContainer && unloadHookContainer.add(unloadHook);\r\n            function _generateNewId() {\r\n                var theConfig = (config || {});\r\n                var getNewId = theConfig[_DYN_GET_NEW_ID /* @min:%2egetNewId */] || newId;\r\n                var id = getNewId(theConfig[_DYN_ID_LENGTH /* @min:%2eidLength */] ? config[_DYN_ID_LENGTH /* @min:%2eidLength */] : 22);\r\n                return id;\r\n            }\r\n            function _generateNewCookie(userId) {\r\n                var acqStr = toISOString(new Date());\r\n                _self.accountAcquisitionDate = acqStr;\r\n                _self[_DYN_IS_NEW_USER /* @min:%2eisNewUser */] = true;\r\n                var newCookie = [userId, acqStr];\r\n                return newCookie;\r\n            }\r\n            function _setUserCookie(cookie) {\r\n                // without expiration, cookies expire at the end of the session\r\n                // set it to 365 days from now\r\n                // 365 * 24 * 60 * 60 = 31536000\r\n                var oneYear = 31536000;\r\n                _self[_DYN_IS_USER_COOKIE_SET /* @min:%2eisUserCookieSet */] = _cookieManager.set(_storageNamePrefix, cookie, oneYear);\r\n            }\r\n            _self.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n                if (storeInCookie === void 0) { storeInCookie = false; }\r\n                // Validate inputs to ensure no cookie control characters.\r\n                var isInvalidInput = !_validateUserInput(authenticatedUserId) || (accountId && !_validateUserInput(accountId));\r\n                if (isInvalidInput) {\r\n                    _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 60 /* _eInternalMessageId.SetAuthContextFailedAccountName */, \"Setting auth user context failed. \" +\r\n                        \"User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.\", true);\r\n                    return;\r\n                }\r\n                // Create cookie string.\r\n                _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */] = authenticatedUserId;\r\n                var authCookie = _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */];\r\n                if (accountId) {\r\n                    _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = accountId;\r\n                    authCookie = [_self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */], _self.accountId][_DYN_JOIN /* @min:%2ejoin */](User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]);\r\n                }\r\n                if (storeInCookie) {\r\n                    // Set the cookie. No expiration date because this is a session cookie (expires when browser closed).\r\n                    // Encoding the cookie to handle unexpected unicode characters.\r\n                    _cookieManager.set(User[_DYN_AUTH_USER_COOKIE_NAM7 /* @min:%2eauthUserCookieName */], encodeURI(authCookie));\r\n                }\r\n            };\r\n            /**\r\n             * Clears the authenticated user id and the account id from the user context.\r\n             * @returns {}\r\n             */\r\n            _self.clearAuthenticatedUserContext = function () {\r\n                _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */] = null;\r\n                _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = null;\r\n                _cookieManager.del(User[_DYN_AUTH_USER_COOKIE_NAM7 /* @min:%2eauthUserCookieName */]);\r\n            };\r\n            _self[_DYN_UPDATE /* @min:%2eupdate */] = function (userId) {\r\n                // Optimizations to avoid setting and processing the cookie when not needed\r\n                if (_self.id !== userId || !_self[_DYN_IS_USER_COOKIE_SET /* @min:%2eisUserCookieSet */]) {\r\n                    var user_id = userId ? userId : _generateNewId();\r\n                    var user_cookie = _generateNewCookie(user_id);\r\n                    _setUserCookie(user_cookie[_DYN_JOIN /* @min:%2ejoin */](User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]));\r\n                }\r\n            };\r\n        });\r\n    }\r\n    /**\r\n    * Sets the authenticated user id and the account id in this session.\r\n    *\r\n    * @param authenticatedUserId - {string} - The authenticated user id. A unique and persistent string that represents each authenticated user in the service.\r\n    * @param accountId - {string} - An optional string to represent the account associated with the authenticated user.\r\n    */\r\n    User.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        if (storeInCookie === void 0) { storeInCookie = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Clears the authenticated user id and the account id from the user context.\r\n     * @returns {}\r\n     */\r\n    User.prototype.clearAuthenticatedUserContext = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Update or create the user cookie if cookies where previously disabled or the new userId does not match the existing value.\r\n     * If you pass nothing a new random user id will be created.\r\n     * @param userId - Specific either the current (via appInsights.context.user.id) or new id that you want to set\r\n     */\r\n    User.prototype.update = function (userId) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    User.cookieSeparator = \"|\";\r\n    User.userCookieName = \"ai_user\";\r\n    User.authUserCookieName = \"ai_authUser\";\r\n    return User;\r\n}());\r\nexport { User };\r\n//# sourceMappingURL=User.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}