{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - React Plugin, 17.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { __assignFn as __assign } from \"@microsoft/applicationinsights-shims\";\nimport { dateNow } from \"@microsoft/applicationinsights-core-js\";\nimport { useEffect, useRef } from \"react\";\nfunction getEngagementTimeSeconds(trackedData) {\n  return (dateNow() - trackedData.firstActiveTimestamp - trackedData.totalIdleTime - trackedData.idleCount * trackedData.idleTimeout) / 1000;\n}\nvar useComponentTracking = function (reactPlugin, componentName, customProperties) {\n  var tracking = useRef({\n    hookTimestamp: dateNow(),\n    firstActiveTimestamp: 0,\n    totalIdleTime: 0,\n    lastActiveTimestamp: 0,\n    idleStartTimestamp: 0,\n    idleCount: 0,\n    idleTimeout: 5000\n  });\n  var savedCallback = useRef();\n  var callback = function () {\n    var trackedData = tracking.current;\n    if (trackedData.lastActiveTimestamp > 0 && trackedData.idleStartTimestamp === 0 && dateNow() - trackedData.lastActiveTimestamp >= trackedData.idleTimeout) {\n      trackedData.idleStartTimestamp = dateNow();\n      trackedData.idleCount++;\n    }\n  };\n  var delay = 100;\n  savedCallback.current = callback;\n  // Set up the interval.\n  useEffect(function () {\n    var id = setInterval(savedCallback.current, delay);\n    return function () {\n      clearInterval(id);\n      var trackedData = tracking.current;\n      if (trackedData.hookTimestamp === 0) {\n        throw new Error(\"useAppInsights:unload hook: hookTimestamp is not initialized.\");\n      }\n      if (trackedData.firstActiveTimestamp === 0) {\n        return;\n      }\n      var engagementTime = getEngagementTimeSeconds(trackedData);\n      var metricData = {\n        average: engagementTime,\n        name: \"React Component Engaged Time (seconds)\",\n        sampleCount: 1\n      };\n      var additionalProperties = __assign({\n        \"Component Name\": componentName\n      }, customProperties);\n      reactPlugin.trackMetric(metricData, additionalProperties);\n    };\n  }, []);\n  var trackActivity = function () {\n    var trackedData = tracking.current;\n    if (trackedData.firstActiveTimestamp === 0) {\n      trackedData.firstActiveTimestamp = dateNow();\n      trackedData.lastActiveTimestamp = trackedData.firstActiveTimestamp;\n    } else {\n      trackedData.lastActiveTimestamp = dateNow();\n    }\n    if (trackedData.idleStartTimestamp > 0) {\n      var lastIdleTime = trackedData.lastActiveTimestamp - trackedData.idleStartTimestamp;\n      trackedData.totalIdleTime += lastIdleTime;\n      trackedData.idleStartTimestamp = 0;\n    }\n  };\n  return trackActivity;\n};\nexport default useComponentTracking;","map":{"version":3,"names":["__assignFn","__assign","dateNow","useEffect","useRef","getEngagementTimeSeconds","trackedData","firstActiveTimestamp","totalIdleTime","idleCount","idleTimeout","useComponentTracking","reactPlugin","componentName","customProperties","tracking","hookTimestamp","lastActiveTimestamp","idleStartTimestamp","savedCallback","callback","current","delay","id","setInterval","clearInterval","Error","engagementTime","metricData","average","name","sampleCount","additionalProperties","trackMetric","trackActivity","lastIdleTime"],"sources":["/home/veeresh133/app/test-error-react/react-az/node_modules/@microsoft/applicationinsights-react-js/dist-esm/useTrackMetric.js"],"sourcesContent":["import { __assign } from \"tslib\";\r\nimport { dateNow } from \"@microsoft/applicationinsights-core-js\";\r\nimport { useEffect, useRef } from \"react\";\r\nfunction getEngagementTimeSeconds(trackedData) {\r\n    return ((dateNow() -\r\n        trackedData.firstActiveTimestamp -\r\n        trackedData.totalIdleTime -\r\n        trackedData.idleCount * trackedData.idleTimeout) /\r\n        1000);\r\n}\r\nvar useComponentTracking = function (reactPlugin, componentName, customProperties) {\r\n    var tracking = useRef({\r\n        hookTimestamp: dateNow(),\r\n        firstActiveTimestamp: 0,\r\n        totalIdleTime: 0,\r\n        lastActiveTimestamp: 0,\r\n        idleStartTimestamp: 0,\r\n        idleCount: 0,\r\n        idleTimeout: 5000\r\n    });\r\n    var savedCallback = useRef();\r\n    var callback = function () {\r\n        var trackedData = tracking.current;\r\n        if (trackedData.lastActiveTimestamp > 0 &&\r\n            trackedData.idleStartTimestamp === 0 &&\r\n            dateNow() - trackedData.lastActiveTimestamp >= trackedData.idleTimeout) {\r\n            trackedData.idleStartTimestamp = dateNow();\r\n            trackedData.idleCount++;\r\n        }\r\n    };\r\n    var delay = 100;\r\n    savedCallback.current = callback;\r\n    // Set up the interval.\r\n    useEffect(function () {\r\n        var id = setInterval(savedCallback.current, delay);\r\n        return function () {\r\n            clearInterval(id);\r\n            var trackedData = tracking.current;\r\n            if (trackedData.hookTimestamp === 0) {\r\n                throw new Error(\"useAppInsights:unload hook: hookTimestamp is not initialized.\");\r\n            }\r\n            if (trackedData.firstActiveTimestamp === 0) {\r\n                return;\r\n            }\r\n            var engagementTime = getEngagementTimeSeconds(trackedData);\r\n            var metricData = {\r\n                average: engagementTime,\r\n                name: \"React Component Engaged Time (seconds)\",\r\n                sampleCount: 1\r\n            };\r\n            var additionalProperties = __assign({ \"Component Name\": componentName }, customProperties);\r\n            reactPlugin.trackMetric(metricData, additionalProperties);\r\n        };\r\n    }, []);\r\n    var trackActivity = function () {\r\n        var trackedData = tracking.current;\r\n        if (trackedData.firstActiveTimestamp === 0) {\r\n            trackedData.firstActiveTimestamp = dateNow();\r\n            trackedData.lastActiveTimestamp = trackedData.firstActiveTimestamp;\r\n        }\r\n        else {\r\n            trackedData.lastActiveTimestamp = dateNow();\r\n        }\r\n        if (trackedData.idleStartTimestamp > 0) {\r\n            var lastIdleTime = trackedData.lastActiveTimestamp - trackedData.idleStartTimestamp;\r\n            trackedData.totalIdleTime += lastIdleTime;\r\n            trackedData.idleStartTimestamp = 0;\r\n        }\r\n    };\r\n    return trackActivity;\r\n};\r\nexport default useComponentTracking;\r\n//# sourceMappingURL=useTrackMetric.js.map"],"mappings":";;;;AAAA,SAAAA,UAAA,IAAAC,QAAA;AACA,SAAAC,OAAA;AACA,SAAAC,SAAA,EAAAC,MAAA;AACA,SAAAC,yBAAAC,WAAA;EACA,QAAAJ,OAAA,KACAI,WAAA,CAAAC,oBAAA,GACAD,WAAA,CAAAE,aAAA,GACAF,WAAA,CAAAG,SAAA,GAAAH,WAAA,CAAAI,WAAA,IACA;AACA;AACA,IAAAC,oBAAA,YAAAA,CAAAC,WAAA,EAAAC,aAAA,EAAAC,gBAAA;EACA,IAAAC,QAAA,GAAAX,MAAA;IACAY,aAAA,EAAAd,OAAA;IACAK,oBAAA;IACAC,aAAA;IACAS,mBAAA;IACAC,kBAAA;IACAT,SAAA;IACAC,WAAA;EACA;EACA,IAAAS,aAAA,GAAAf,MAAA;EACA,IAAAgB,QAAA,YAAAA,CAAA;IACA,IAAAd,WAAA,GAAAS,QAAA,CAAAM,OAAA;IACA,IAAAf,WAAA,CAAAW,mBAAA,QACAX,WAAA,CAAAY,kBAAA,UACAhB,OAAA,KAAAI,WAAA,CAAAW,mBAAA,IAAAX,WAAA,CAAAI,WAAA;MACAJ,WAAA,CAAAY,kBAAA,GAAAhB,OAAA;MACAI,WAAA,CAAAG,SAAA;IACA;EACA;EACA,IAAAa,KAAA;EACAH,aAAA,CAAAE,OAAA,GAAAD,QAAA;EACA;EACAjB,SAAA;IACA,IAAAoB,EAAA,GAAAC,WAAA,CAAAL,aAAA,CAAAE,OAAA,EAAAC,KAAA;IACA;MACAG,aAAA,CAAAF,EAAA;MACA,IAAAjB,WAAA,GAAAS,QAAA,CAAAM,OAAA;MACA,IAAAf,WAAA,CAAAU,aAAA;QACA,UAAAU,KAAA;MACA;MACA,IAAApB,WAAA,CAAAC,oBAAA;QACA;MACA;MACA,IAAAoB,cAAA,GAAAtB,wBAAA,CAAAC,WAAA;MACA,IAAAsB,UAAA;QACAC,OAAA,EAAAF,cAAA;QACAG,IAAA;QACAC,WAAA;MACA;MACA,IAAAC,oBAAA,GAAA/B,QAAA;QAAA,kBAAAY;MAAA,GAAAC,gBAAA;MACAF,WAAA,CAAAqB,WAAA,CAAAL,UAAA,EAAAI,oBAAA;IACA;EACA;EACA,IAAAE,aAAA,YAAAA,CAAA;IACA,IAAA5B,WAAA,GAAAS,QAAA,CAAAM,OAAA;IACA,IAAAf,WAAA,CAAAC,oBAAA;MACAD,WAAA,CAAAC,oBAAA,GAAAL,OAAA;MACAI,WAAA,CAAAW,mBAAA,GAAAX,WAAA,CAAAC,oBAAA;IACA,OACA;MACAD,WAAA,CAAAW,mBAAA,GAAAf,OAAA;IACA;IACA,IAAAI,WAAA,CAAAY,kBAAA;MACA,IAAAiB,YAAA,GAAA7B,WAAA,CAAAW,mBAAA,GAAAX,WAAA,CAAAY,kBAAA;MACAZ,WAAA,CAAAE,aAAA,IAAA2B,YAAA;MACA7B,WAAA,CAAAY,kBAAA;IACA;EACA;EACA,OAAAgB,aAAA;AACA;AACA,eAAAvB,oBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}