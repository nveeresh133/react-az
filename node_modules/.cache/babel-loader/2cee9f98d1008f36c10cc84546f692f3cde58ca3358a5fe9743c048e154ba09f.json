{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\n\"use strict\";\n\nimport { getGlobal, strShimObject, strShimPrototype, strShimUndefined } from \"@microsoft/applicationinsights-shims\";\nimport { getDocument, getInst, getNavigator, getPerformance, hasNavigator, isFunction, isString, isUndefined, strIndexOf } from \"@nevware21/ts-utils\";\nimport { _DYN_LENGTH, _DYN_NAME, _DYN_SPLIT, _DYN_TO_LOWER_CASE, _DYN_USER_AGENT } from \"../__DynamicConstants\";\nimport { strContains } from \"./HelperFuncs\";\nimport { STR_EMPTY } from \"./InternalConstants\";\n/**\r\n * This file exists to hold environment utilities that are required to check and\r\n * validate the current operating environment. Unless otherwise required, please\r\n * only use defined methods (functions) in this class so that users of these\r\n * functions/properties only need to include those that are used within their own modules.\r\n */\nvar strDocumentMode = \"documentMode\";\nvar strLocation = \"location\";\nvar strConsole = \"console\";\nvar strJSON = \"JSON\";\nvar strCrypto = \"crypto\";\nvar strMsCrypto = \"msCrypto\";\nvar strReactNative = \"ReactNative\";\nvar strMsie = \"msie\";\nvar strTrident = \"trident/\";\nvar strXMLHttpRequest = \"XMLHttpRequest\";\nvar _isTrident = null;\nvar _navUserAgentCheck = null;\nvar _enableMocks = false;\nvar _useXDomainRequest = null;\nvar _beaconsSupported = null;\nfunction _hasProperty(theClass, property) {\n  var supported = false;\n  if (theClass) {\n    try {\n      supported = property in theClass;\n      if (!supported) {\n        var proto = theClass[strShimPrototype];\n        if (proto) {\n          supported = property in proto;\n        }\n      }\n    } catch (e) {\n      // Do Nothing\n    }\n    if (!supported) {\n      try {\n        var tmp = new theClass();\n        supported = !isUndefined(tmp[property]);\n      } catch (e) {\n        // Do Nothing\n      }\n    }\n  }\n  return supported;\n}\n/**\r\n * Enable the lookup of test mock objects if requested\r\n * @param enabled\r\n */\nexport function setEnableEnvMocks(enabled) {\n  _enableMocks = enabled;\n}\n/**\r\n * Returns the global location object if it is present otherwise null.\r\n * This helper is used to access the location object without causing an exception\r\n * \"Uncaught ReferenceError: location is not defined\"\r\n */\nexport function getLocation(checkForMock) {\n  if (checkForMock && _enableMocks) {\n    var mockLocation = getInst(\"__mockLocation\");\n    if (mockLocation) {\n      return mockLocation;\n    }\n  }\n  if (typeof location === strShimObject && location) {\n    return location;\n  }\n  return getInst(strLocation);\n}\n/**\r\n * Returns the global console object\r\n */\nexport function getConsole() {\n  if (typeof console !== strShimUndefined) {\n    return console;\n  }\n  return getInst(strConsole);\n}\n/**\r\n * Checks if JSON object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: JSON is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\nexport function hasJSON() {\n  return Boolean(typeof JSON === strShimObject && JSON || getInst(strJSON) !== null);\n}\n/**\r\n * Returns the global JSON object if it is present otherwise null.\r\n * This helper is used to access the JSON object without causing an exception\r\n * \"Uncaught ReferenceError: JSON is not defined\"\r\n */\nexport function getJSON() {\n  if (hasJSON()) {\n    return JSON || getInst(strJSON);\n  }\n  return null;\n}\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\nexport function getCrypto() {\n  return getInst(strCrypto);\n}\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\nexport function getMsCrypto() {\n  return getInst(strMsCrypto);\n}\n/**\r\n * Returns whether the environment is reporting that we are running in a React Native Environment\r\n */\nexport function isReactNative() {\n  // If running in React Native, navigator.product will be populated\n  var nav = getNavigator();\n  if (nav && nav.product) {\n    return nav.product === strReactNative;\n  }\n  return false;\n}\n/**\r\n * Identifies whether the current environment appears to be IE\r\n */\nexport function isIE() {\n  var nav = getNavigator();\n  if (nav && (nav[_DYN_USER_AGENT /* @min:%2euserAgent */] !== _navUserAgentCheck || _isTrident === null)) {\n    // Added to support test mocking of the user agent\n    _navUserAgentCheck = nav[_DYN_USER_AGENT /* @min:%2euserAgent */];\n    var userAgent = (_navUserAgentCheck || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\n    _isTrident = strContains(userAgent, strMsie) || strContains(userAgent, strTrident);\n  }\n  return _isTrident;\n}\n/**\r\n * Gets IE version returning the document emulation mode if we are running on IE, or null otherwise\r\n */\nexport function getIEVersion(userAgentStr) {\n  if (userAgentStr === void 0) {\n    userAgentStr = null;\n  }\n  if (!userAgentStr) {\n    var navigator_1 = getNavigator() || {};\n    userAgentStr = navigator_1 ? (navigator_1.userAgent || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\n  }\n  var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\n  // Also check for documentMode in case X-UA-Compatible meta tag was included in HTML.\n  if (strContains(ua, strMsie)) {\n    var doc = getDocument() || {};\n    return Math.max(parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strMsie)[1]), doc[strDocumentMode] || 0);\n  } else if (strContains(ua, strTrident)) {\n    var tridentVer = parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strTrident)[1]);\n    if (tridentVer) {\n      return tridentVer + 4;\n    }\n  }\n  return null;\n}\nexport function isSafari(userAgentStr) {\n  if (!userAgentStr || !isString(userAgentStr)) {\n    var navigator_2 = getNavigator() || {};\n    userAgentStr = navigator_2 ? (navigator_2.userAgent || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\n  }\n  var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\n  return strIndexOf(ua, \"safari\") >= 0;\n}\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n * @returns True if supported, false otherwise.\r\n */\nexport function isBeaconsSupported(useCached) {\n  if (_beaconsSupported === null || useCached === false) {\n    _beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon);\n  }\n  return _beaconsSupported;\n}\n/**\r\n * Checks if the Fetch API is supported in the current environment.\r\n * @param withKeepAlive - [Optional] If True, check if fetch is available and it supports the keepalive feature, otherwise only check if fetch is supported\r\n * @returns True if supported, otherwise false\r\n */\nexport function isFetchSupported(withKeepAlive) {\n  var isSupported = false;\n  try {\n    isSupported = !!getInst(\"fetch\");\n    var request = getInst(\"Request\");\n    if (isSupported && withKeepAlive && request) {\n      isSupported = _hasProperty(request, \"keepalive\");\n    }\n  } catch (e) {\n    // Just Swallow any failure during availability checks\n  }\n  return isSupported;\n}\nexport function useXDomainRequest() {\n  if (_useXDomainRequest === null) {\n    _useXDomainRequest = typeof XDomainRequest !== strShimUndefined;\n    if (_useXDomainRequest && isXhrSupported()) {\n      _useXDomainRequest = _useXDomainRequest && !_hasProperty(getInst(strXMLHttpRequest), \"withCredentials\");\n    }\n  }\n  return _useXDomainRequest;\n}\n/**\r\n * Checks if XMLHttpRequest is supported\r\n * @returns True if supported, otherwise false\r\n */\nexport function isXhrSupported() {\n  var isSupported = false;\n  try {\n    var xmlHttpRequest = getInst(strXMLHttpRequest);\n    isSupported = !!xmlHttpRequest;\n  } catch (e) {\n    // Just Swallow any failure during availability checks\n  }\n  return isSupported;\n}\nfunction _getNamedValue(values, name) {\n  if (values) {\n    for (var i = 0; i < values[_DYN_LENGTH /* @min:%2elength */]; i++) {\n      var value = values[i];\n      if (value[_DYN_NAME /* @min:%2ename */]) {\n        if (value[_DYN_NAME /* @min:%2ename */] === name) {\n          return value;\n        }\n      }\n    }\n  }\n  return {};\n}\n/**\r\n * Helper function to fetch the named meta-tag from the page.\r\n * @param name\r\n */\nexport function findMetaTag(name) {\n  var doc = getDocument();\n  if (doc && name) {\n    // Look for a meta-tag\n    return _getNamedValue(doc.querySelectorAll(\"meta\"), name).content;\n  }\n  return null;\n}\n/**\r\n * Helper function to fetch the named server timing value from the page response (first navigation event).\r\n * @param name\r\n */\nexport function findNamedServerTiming(name) {\n  var value;\n  var perf = getPerformance();\n  if (perf) {\n    // Try looking for a server-timing header\n    var navPerf = perf.getEntriesByType(\"navigation\") || [];\n    value = _getNamedValue((navPerf[_DYN_LENGTH /* @min:%2elength */] > 0 ? navPerf[0] : {}).serverTiming, name).description;\n  }\n  return value;\n}\n// TODO: should reuse this method for analytics plugin\nexport function dispatchEvent(target, evnt) {\n  if (target && target.dispatchEvent && evnt) {\n    target.dispatchEvent(evnt);\n    return true;\n  }\n  return false;\n}\nexport function createCustomDomEvent(eventName, details) {\n  var event = null;\n  var detail = {\n    detail: details || null\n  };\n  if (isFunction(CustomEvent)) {\n    // Use CustomEvent constructor when available\n    event = new CustomEvent(eventName, detail);\n  } else {\n    // CustomEvent has no constructor in IE\n    var doc = getDocument();\n    if (doc && doc.createEvent) {\n      event = doc.createEvent(\"CustomEvent\");\n      event.initCustomEvent(eventName, true, true, detail);\n    }\n  }\n  return event;\n}\nexport function sendCustomEvent(evtName, cfg, customDetails) {\n  var global = getGlobal();\n  if (global && global.CustomEvent) {\n    try {\n      var details = {\n        cfg: cfg || null,\n        customDetails: customDetails || null\n      };\n      return dispatchEvent(global, createCustomDomEvent(evtName, details));\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["getGlobal","strShimObject","strShimPrototype","strShimUndefined","getDocument","getInst","getNavigator","getPerformance","hasNavigator","isFunction","isString","isUndefined","strIndexOf","_DYN_LENGTH","_DYN_NAME","_DYN_SPLIT","_DYN_TO_LOWER_CASE","_DYN_USER_AGENT","strContains","STR_EMPTY","strDocumentMode","strLocation","strConsole","strJSON","strCrypto","strMsCrypto","strReactNative","strMsie","strTrident","strXMLHttpRequest","_isTrident","_navUserAgentCheck","_enableMocks","_useXDomainRequest","_beaconsSupported","_hasProperty","theClass","property","supported","proto","e","tmp","setEnableEnvMocks","enabled","getLocation","checkForMock","mockLocation","location","getConsole","console","hasJSON","Boolean","JSON","getJSON","getCrypto","getMsCrypto","isReactNative","nav","product","isIE","userAgent","getIEVersion","userAgentStr","navigator_1","ua","doc","Math","max","parseInt","tridentVer","isSafari","navigator_2","isBeaconsSupported","useCached","sendBeacon","isFetchSupported","withKeepAlive","isSupported","request","useXDomainRequest","XDomainRequest","isXhrSupported","xmlHttpRequest","_getNamedValue","values","name","i","value","findMetaTag","querySelectorAll","content","findNamedServerTiming","perf","navPerf","getEntriesByType","serverTiming","description","dispatchEvent","target","evnt","createCustomDomEvent","eventName","details","event","detail","CustomEvent","createEvent","initCustomEvent","sendCustomEvent","evtName","cfg","customDetails","global"],"sources":["/home/veeresh133/app/react-az/node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/EnvUtils.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { getGlobal, strShimObject, strShimPrototype, strShimUndefined } from \"@microsoft/applicationinsights-shims\";\r\nimport { getDocument, getInst, getNavigator, getPerformance, hasNavigator, isFunction, isString, isUndefined, strIndexOf } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH, _DYN_NAME, _DYN_SPLIT, _DYN_TO_LOWER_CASE, _DYN_USER_AGENT } from \"../__DynamicConstants\";\r\nimport { strContains } from \"./HelperFuncs\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\n/**\r\n * This file exists to hold environment utilities that are required to check and\r\n * validate the current operating environment. Unless otherwise required, please\r\n * only use defined methods (functions) in this class so that users of these\r\n * functions/properties only need to include those that are used within their own modules.\r\n */\r\nvar strDocumentMode = \"documentMode\";\r\nvar strLocation = \"location\";\r\nvar strConsole = \"console\";\r\nvar strJSON = \"JSON\";\r\nvar strCrypto = \"crypto\";\r\nvar strMsCrypto = \"msCrypto\";\r\nvar strReactNative = \"ReactNative\";\r\nvar strMsie = \"msie\";\r\nvar strTrident = \"trident/\";\r\nvar strXMLHttpRequest = \"XMLHttpRequest\";\r\nvar _isTrident = null;\r\nvar _navUserAgentCheck = null;\r\nvar _enableMocks = false;\r\nvar _useXDomainRequest = null;\r\nvar _beaconsSupported = null;\r\nfunction _hasProperty(theClass, property) {\r\n    var supported = false;\r\n    if (theClass) {\r\n        try {\r\n            supported = property in theClass;\r\n            if (!supported) {\r\n                var proto = theClass[strShimPrototype];\r\n                if (proto) {\r\n                    supported = property in proto;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Do Nothing\r\n        }\r\n        if (!supported) {\r\n            try {\r\n                var tmp = new theClass();\r\n                supported = !isUndefined(tmp[property]);\r\n            }\r\n            catch (e) {\r\n                // Do Nothing\r\n            }\r\n        }\r\n    }\r\n    return supported;\r\n}\r\n/**\r\n * Enable the lookup of test mock objects if requested\r\n * @param enabled\r\n */\r\nexport function setEnableEnvMocks(enabled) {\r\n    _enableMocks = enabled;\r\n}\r\n/**\r\n * Returns the global location object if it is present otherwise null.\r\n * This helper is used to access the location object without causing an exception\r\n * \"Uncaught ReferenceError: location is not defined\"\r\n */\r\nexport function getLocation(checkForMock) {\r\n    if (checkForMock && _enableMocks) {\r\n        var mockLocation = getInst(\"__mockLocation\");\r\n        if (mockLocation) {\r\n            return mockLocation;\r\n        }\r\n    }\r\n    if (typeof location === strShimObject && location) {\r\n        return location;\r\n    }\r\n    return getInst(strLocation);\r\n}\r\n/**\r\n * Returns the global console object\r\n */\r\nexport function getConsole() {\r\n    if (typeof console !== strShimUndefined) {\r\n        return console;\r\n    }\r\n    return getInst(strConsole);\r\n}\r\n/**\r\n * Checks if JSON object is available, this is required as we support the API running without a\r\n * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history\r\n * object to a local variable or pass as an argument an \"Uncaught ReferenceError: JSON is not defined\"\r\n * exception will be thrown.\r\n * Defined as a function to support lazy / late binding environments.\r\n */\r\nexport function hasJSON() {\r\n    return Boolean((typeof JSON === strShimObject && JSON) || getInst(strJSON) !== null);\r\n}\r\n/**\r\n * Returns the global JSON object if it is present otherwise null.\r\n * This helper is used to access the JSON object without causing an exception\r\n * \"Uncaught ReferenceError: JSON is not defined\"\r\n */\r\nexport function getJSON() {\r\n    if (hasJSON()) {\r\n        return JSON || getInst(strJSON);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getCrypto() {\r\n    return getInst(strCrypto);\r\n}\r\n/**\r\n * Returns the crypto object if it is present otherwise null.\r\n * This helper is used to access the crypto object from the current\r\n * global instance which could be window or globalThis for a web worker\r\n */\r\nexport function getMsCrypto() {\r\n    return getInst(strMsCrypto);\r\n}\r\n/**\r\n * Returns whether the environment is reporting that we are running in a React Native Environment\r\n */\r\nexport function isReactNative() {\r\n    // If running in React Native, navigator.product will be populated\r\n    var nav = getNavigator();\r\n    if (nav && nav.product) {\r\n        return nav.product === strReactNative;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Identifies whether the current environment appears to be IE\r\n */\r\nexport function isIE() {\r\n    var nav = getNavigator();\r\n    if (nav && (nav[_DYN_USER_AGENT /* @min:%2euserAgent */] !== _navUserAgentCheck || _isTrident === null)) {\r\n        // Added to support test mocking of the user agent\r\n        _navUserAgentCheck = nav[_DYN_USER_AGENT /* @min:%2euserAgent */];\r\n        var userAgent = (_navUserAgentCheck || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n        _isTrident = (strContains(userAgent, strMsie) || strContains(userAgent, strTrident));\r\n    }\r\n    return _isTrident;\r\n}\r\n/**\r\n * Gets IE version returning the document emulation mode if we are running on IE, or null otherwise\r\n */\r\nexport function getIEVersion(userAgentStr) {\r\n    if (userAgentStr === void 0) { userAgentStr = null; }\r\n    if (!userAgentStr) {\r\n        var navigator_1 = getNavigator() || {};\r\n        userAgentStr = navigator_1 ? (navigator_1.userAgent || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\r\n    }\r\n    var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n    // Also check for documentMode in case X-UA-Compatible meta tag was included in HTML.\r\n    if (strContains(ua, strMsie)) {\r\n        var doc = getDocument() || {};\r\n        return Math.max(parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strMsie)[1]), (doc[strDocumentMode] || 0));\r\n    }\r\n    else if (strContains(ua, strTrident)) {\r\n        var tridentVer = parseInt(ua[_DYN_SPLIT /* @min:%2esplit */](strTrident)[1]);\r\n        if (tridentVer) {\r\n            return tridentVer + 4;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport function isSafari(userAgentStr) {\r\n    if (!userAgentStr || !isString(userAgentStr)) {\r\n        var navigator_2 = getNavigator() || {};\r\n        userAgentStr = navigator_2 ? (navigator_2.userAgent || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() : STR_EMPTY;\r\n    }\r\n    var ua = (userAgentStr || STR_EMPTY)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n    return (strIndexOf(ua, \"safari\") >= 0);\r\n}\r\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n * @returns True if supported, false otherwise.\r\n */\r\nexport function isBeaconsSupported(useCached) {\r\n    if (_beaconsSupported === null || useCached === false) {\r\n        _beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon);\r\n    }\r\n    return _beaconsSupported;\r\n}\r\n/**\r\n * Checks if the Fetch API is supported in the current environment.\r\n * @param withKeepAlive - [Optional] If True, check if fetch is available and it supports the keepalive feature, otherwise only check if fetch is supported\r\n * @returns True if supported, otherwise false\r\n */\r\nexport function isFetchSupported(withKeepAlive) {\r\n    var isSupported = false;\r\n    try {\r\n        isSupported = !!getInst(\"fetch\");\r\n        var request = getInst(\"Request\");\r\n        if (isSupported && withKeepAlive && request) {\r\n            isSupported = _hasProperty(request, \"keepalive\");\r\n        }\r\n    }\r\n    catch (e) {\r\n        // Just Swallow any failure during availability checks\r\n    }\r\n    return isSupported;\r\n}\r\nexport function useXDomainRequest() {\r\n    if (_useXDomainRequest === null) {\r\n        _useXDomainRequest = (typeof XDomainRequest !== strShimUndefined);\r\n        if (_useXDomainRequest && isXhrSupported()) {\r\n            _useXDomainRequest = _useXDomainRequest && !_hasProperty(getInst(strXMLHttpRequest), \"withCredentials\");\r\n        }\r\n    }\r\n    return _useXDomainRequest;\r\n}\r\n/**\r\n * Checks if XMLHttpRequest is supported\r\n * @returns True if supported, otherwise false\r\n */\r\nexport function isXhrSupported() {\r\n    var isSupported = false;\r\n    try {\r\n        var xmlHttpRequest = getInst(strXMLHttpRequest);\r\n        isSupported = !!xmlHttpRequest;\r\n    }\r\n    catch (e) {\r\n        // Just Swallow any failure during availability checks\r\n    }\r\n    return isSupported;\r\n}\r\nfunction _getNamedValue(values, name) {\r\n    if (values) {\r\n        for (var i = 0; i < values[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n            var value = values[i];\r\n            if (value[_DYN_NAME /* @min:%2ename */]) {\r\n                if (value[_DYN_NAME /* @min:%2ename */] === name) {\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Helper function to fetch the named meta-tag from the page.\r\n * @param name\r\n */\r\nexport function findMetaTag(name) {\r\n    var doc = getDocument();\r\n    if (doc && name) {\r\n        // Look for a meta-tag\r\n        return _getNamedValue(doc.querySelectorAll(\"meta\"), name).content;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Helper function to fetch the named server timing value from the page response (first navigation event).\r\n * @param name\r\n */\r\nexport function findNamedServerTiming(name) {\r\n    var value;\r\n    var perf = getPerformance();\r\n    if (perf) {\r\n        // Try looking for a server-timing header\r\n        var navPerf = perf.getEntriesByType(\"navigation\") || [];\r\n        value = _getNamedValue((navPerf[_DYN_LENGTH /* @min:%2elength */] > 0 ? navPerf[0] : {}).serverTiming, name).description;\r\n    }\r\n    return value;\r\n}\r\n// TODO: should reuse this method for analytics plugin\r\nexport function dispatchEvent(target, evnt) {\r\n    if (target && target.dispatchEvent && evnt) {\r\n        target.dispatchEvent(evnt);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function createCustomDomEvent(eventName, details) {\r\n    var event = null;\r\n    var detail = { detail: details || null };\r\n    if (isFunction(CustomEvent)) { // Use CustomEvent constructor when available\r\n        event = new CustomEvent(eventName, detail);\r\n    }\r\n    else { // CustomEvent has no constructor in IE\r\n        var doc = getDocument();\r\n        if (doc && doc.createEvent) {\r\n            event = doc.createEvent(\"CustomEvent\");\r\n            event.initCustomEvent(eventName, true, true, detail);\r\n        }\r\n    }\r\n    return event;\r\n}\r\nexport function sendCustomEvent(evtName, cfg, customDetails) {\r\n    var global = getGlobal();\r\n    if (global && global.CustomEvent) {\r\n        try {\r\n            var details = { cfg: cfg || null, customDetails: customDetails || null };\r\n            return dispatchEvent(global, createCustomDomEvent(evtName, details));\r\n        }\r\n        catch (e) {\r\n            // eslint-disable-next-line no-empty\r\n        }\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=EnvUtils.js.map"],"mappings":";;;;;AAEA;;AACA,SAAAA,SAAA,EAAAC,aAAA,EAAAC,gBAAA,EAAAC,gBAAA;AACA,SAAAC,WAAA,EAAAC,OAAA,EAAAC,YAAA,EAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,QAAA,EAAAC,WAAA,EAAAC,UAAA;AACA,SAAAC,WAAA,EAAAC,SAAA,EAAAC,UAAA,EAAAC,kBAAA,EAAAC,eAAA;AACA,SAAAC,WAAA;AACA,SAAAC,SAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAC,eAAA;AACA,IAAAC,WAAA;AACA,IAAAC,UAAA;AACA,IAAAC,OAAA;AACA,IAAAC,SAAA;AACA,IAAAC,WAAA;AACA,IAAAC,cAAA;AACA,IAAAC,OAAA;AACA,IAAAC,UAAA;AACA,IAAAC,iBAAA;AACA,IAAAC,UAAA;AACA,IAAAC,kBAAA;AACA,IAAAC,YAAA;AACA,IAAAC,kBAAA;AACA,IAAAC,iBAAA;AACA,SAAAC,aAAAC,QAAA,EAAAC,QAAA;EACA,IAAAC,SAAA;EACA,IAAAF,QAAA;IACA;MACAE,SAAA,GAAAD,QAAA,IAAAD,QAAA;MACA,KAAAE,SAAA;QACA,IAAAC,KAAA,GAAAH,QAAA,CAAAlC,gBAAA;QACA,IAAAqC,KAAA;UACAD,SAAA,GAAAD,QAAA,IAAAE,KAAA;QACA;MACA;IACA,EACA,OAAAC,CAAA;MACA;IAAA;IAEA,KAAAF,SAAA;MACA;QACA,IAAAG,GAAA,OAAAL,QAAA;QACAE,SAAA,IAAA3B,WAAA,CAAA8B,GAAA,CAAAJ,QAAA;MACA,EACA,OAAAG,CAAA;QACA;MAAA;IAEA;EACA;EACA,OAAAF,SAAA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAI,kBAAAC,OAAA;EACAX,YAAA,GAAAW,OAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAC,YAAAC,YAAA;EACA,IAAAA,YAAA,IAAAb,YAAA;IACA,IAAAc,YAAA,GAAAzC,OAAA;IACA,IAAAyC,YAAA;MACA,OAAAA,YAAA;IACA;EACA;EACA,WAAAC,QAAA,KAAA9C,aAAA,IAAA8C,QAAA;IACA,OAAAA,QAAA;EACA;EACA,OAAA1C,OAAA,CAAAgB,WAAA;AACA;AACA;AACA;AACA;AACA,gBAAA2B,WAAA;EACA,WAAAC,OAAA,KAAA9C,gBAAA;IACA,OAAA8C,OAAA;EACA;EACA,OAAA5C,OAAA,CAAAiB,UAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAA4B,QAAA;EACA,OAAAC,OAAA,QAAAC,IAAA,KAAAnD,aAAA,IAAAmD,IAAA,IAAA/C,OAAA,CAAAkB,OAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAA8B,QAAA;EACA,IAAAH,OAAA;IACA,OAAAE,IAAA,IAAA/C,OAAA,CAAAkB,OAAA;EACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAA+B,UAAA;EACA,OAAAjD,OAAA,CAAAmB,SAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAA+B,YAAA;EACA,OAAAlD,OAAA,CAAAoB,WAAA;AACA;AACA;AACA;AACA;AACA,gBAAA+B,cAAA;EACA;EACA,IAAAC,GAAA,GAAAnD,YAAA;EACA,IAAAmD,GAAA,IAAAA,GAAA,CAAAC,OAAA;IACA,OAAAD,GAAA,CAAAC,OAAA,KAAAhC,cAAA;EACA;EACA;AACA;AACA;AACA;AACA;AACA,gBAAAiC,KAAA;EACA,IAAAF,GAAA,GAAAnD,YAAA;EACA,IAAAmD,GAAA,KAAAA,GAAA,CAAAxC,eAAA,8BAAAc,kBAAA,IAAAD,UAAA;IACA;IACAC,kBAAA,GAAA0B,GAAA,CAAAxC,eAAA;IACA,IAAA2C,SAAA,IAAA7B,kBAAA,IAAAZ,SAAA,EAAAH,kBAAA;IACAc,UAAA,GAAAZ,WAAA,CAAA0C,SAAA,EAAAjC,OAAA,KAAAT,WAAA,CAAA0C,SAAA,EAAAhC,UAAA;EACA;EACA,OAAAE,UAAA;AACA;AACA;AACA;AACA;AACA,gBAAA+B,aAAAC,YAAA;EACA,IAAAA,YAAA;IAAAA,YAAA;EAAA;EACA,KAAAA,YAAA;IACA,IAAAC,WAAA,GAAAzD,YAAA;IACAwD,YAAA,GAAAC,WAAA,IAAAA,WAAA,CAAAH,SAAA,IAAAzC,SAAA,EAAAH,kBAAA,gCAAAG,SAAA;EACA;EACA,IAAA6C,EAAA,IAAAF,YAAA,IAAA3C,SAAA,EAAAH,kBAAA;EACA;EACA,IAAAE,WAAA,CAAA8C,EAAA,EAAArC,OAAA;IACA,IAAAsC,GAAA,GAAA7D,WAAA;IACA,OAAA8D,IAAA,CAAAC,GAAA,CAAAC,QAAA,CAAAJ,EAAA,CAAAjD,UAAA,sBAAAY,OAAA,OAAAsC,GAAA,CAAA7C,eAAA;EACA,OACA,IAAAF,WAAA,CAAA8C,EAAA,EAAApC,UAAA;IACA,IAAAyC,UAAA,GAAAD,QAAA,CAAAJ,EAAA,CAAAjD,UAAA,sBAAAa,UAAA;IACA,IAAAyC,UAAA;MACA,OAAAA,UAAA;IACA;EACA;EACA;AACA;AACA,gBAAAC,SAAAR,YAAA;EACA,KAAAA,YAAA,KAAApD,QAAA,CAAAoD,YAAA;IACA,IAAAS,WAAA,GAAAjE,YAAA;IACAwD,YAAA,GAAAS,WAAA,IAAAA,WAAA,CAAAX,SAAA,IAAAzC,SAAA,EAAAH,kBAAA,gCAAAG,SAAA;EACA;EACA,IAAA6C,EAAA,IAAAF,YAAA,IAAA3C,SAAA,EAAAH,kBAAA;EACA,OAAAJ,UAAA,CAAAoD,EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAQ,mBAAAC,SAAA;EACA,IAAAvC,iBAAA,aAAAuC,SAAA;IACAvC,iBAAA,GAAA1B,YAAA,MAAA2C,OAAA,CAAA7C,YAAA,GAAAoE,UAAA;EACA;EACA,OAAAxC,iBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAyC,iBAAAC,aAAA;EACA,IAAAC,WAAA;EACA;IACAA,WAAA,KAAAxE,OAAA;IACA,IAAAyE,OAAA,GAAAzE,OAAA;IACA,IAAAwE,WAAA,IAAAD,aAAA,IAAAE,OAAA;MACAD,WAAA,GAAA1C,YAAA,CAAA2C,OAAA;IACA;EACA,EACA,OAAAtC,CAAA;IACA;EAAA;EAEA,OAAAqC,WAAA;AACA;AACA,gBAAAE,kBAAA;EACA,IAAA9C,kBAAA;IACAA,kBAAA,UAAA+C,cAAA,KAAA7E,gBAAA;IACA,IAAA8B,kBAAA,IAAAgD,cAAA;MACAhD,kBAAA,GAAAA,kBAAA,KAAAE,YAAA,CAAA9B,OAAA,CAAAwB,iBAAA;IACA;EACA;EACA,OAAAI,kBAAA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAgD,eAAA;EACA,IAAAJ,WAAA;EACA;IACA,IAAAK,cAAA,GAAA7E,OAAA,CAAAwB,iBAAA;IACAgD,WAAA,KAAAK,cAAA;EACA,EACA,OAAA1C,CAAA;IACA;EAAA;EAEA,OAAAqC,WAAA;AACA;AACA,SAAAM,eAAAC,MAAA,EAAAC,IAAA;EACA,IAAAD,MAAA;IACA,SAAAE,CAAA,MAAAA,CAAA,GAAAF,MAAA,CAAAvE,WAAA,wBAAAyE,CAAA;MACA,IAAAC,KAAA,GAAAH,MAAA,CAAAE,CAAA;MACA,IAAAC,KAAA,CAAAzE,SAAA;QACA,IAAAyE,KAAA,CAAAzE,SAAA,yBAAAuE,IAAA;UACA,OAAAE,KAAA;QACA;MACA;IACA;EACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAC,YAAAH,IAAA;EACA,IAAApB,GAAA,GAAA7D,WAAA;EACA,IAAA6D,GAAA,IAAAoB,IAAA;IACA;IACA,OAAAF,cAAA,CAAAlB,GAAA,CAAAwB,gBAAA,UAAAJ,IAAA,EAAAK,OAAA;EACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAC,sBAAAN,IAAA;EACA,IAAAE,KAAA;EACA,IAAAK,IAAA,GAAArF,cAAA;EACA,IAAAqF,IAAA;IACA;IACA,IAAAC,OAAA,GAAAD,IAAA,CAAAE,gBAAA;IACAP,KAAA,GAAAJ,cAAA,EAAAU,OAAA,CAAAhF,WAAA,6BAAAgF,OAAA,UAAAE,YAAA,EAAAV,IAAA,EAAAW,WAAA;EACA;EACA,OAAAT,KAAA;AACA;AACA;AACA,gBAAAU,cAAAC,MAAA,EAAAC,IAAA;EACA,IAAAD,MAAA,IAAAA,MAAA,CAAAD,aAAA,IAAAE,IAAA;IACAD,MAAA,CAAAD,aAAA,CAAAE,IAAA;IACA;EACA;EACA;AACA;AACA,gBAAAC,qBAAAC,SAAA,EAAAC,OAAA;EACA,IAAAC,KAAA;EACA,IAAAC,MAAA;IAAAA,MAAA,EAAAF,OAAA;EAAA;EACA,IAAA7F,UAAA,CAAAgG,WAAA;IAAA;IACAF,KAAA,OAAAE,WAAA,CAAAJ,SAAA,EAAAG,MAAA;EACA,OACA;IAAA;IACA,IAAAvC,GAAA,GAAA7D,WAAA;IACA,IAAA6D,GAAA,IAAAA,GAAA,CAAAyC,WAAA;MACAH,KAAA,GAAAtC,GAAA,CAAAyC,WAAA;MACAH,KAAA,CAAAI,eAAA,CAAAN,SAAA,cAAAG,MAAA;IACA;EACA;EACA,OAAAD,KAAA;AACA;AACA,gBAAAK,gBAAAC,OAAA,EAAAC,GAAA,EAAAC,aAAA;EACA,IAAAC,MAAA,GAAAhH,SAAA;EACA,IAAAgH,MAAA,IAAAA,MAAA,CAAAP,WAAA;IACA;MACA,IAAAH,OAAA;QAAAQ,GAAA,EAAAA,GAAA;QAAAC,aAAA,EAAAA,aAAA;MAAA;MACA,OAAAd,aAAA,CAAAe,MAAA,EAAAZ,oBAAA,CAAAS,OAAA,EAAAP,OAAA;IACA,EACA,OAAA9D,CAAA;MACA;IAAA;EAEA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}