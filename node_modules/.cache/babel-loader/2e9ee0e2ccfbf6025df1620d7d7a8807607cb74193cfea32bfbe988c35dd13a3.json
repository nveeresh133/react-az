{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Common, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { _throwInternal, getJSON, hasJSON, isObject, objForEachKey, strTrim } from \"@microsoft/applicationinsights-core-js\";\nimport { asString, strSubstr, strSubstring } from \"@nevware21/ts-utils\";\nimport { _DYN_LENGTH, _DYN_STRINGIFY, _DYN_TO_STRING } from \"../../__DynamicConstants\";\nexport function dataSanitizeKeyAndAddUniqueness(logger, key, map) {\n  var origLength = key[_DYN_LENGTH /* @min:%2elength */];\n  var field = dataSanitizeKey(logger, key);\n  // validation truncated the length.  We need to add uniqueness\n  if (field[_DYN_LENGTH /* @min:%2elength */] !== origLength) {\n    var i = 0;\n    var uniqueField = field;\n    while (map[uniqueField] !== undefined) {\n      i++;\n      uniqueField = strSubstring(field, 0, 150 /* DataSanitizerValues.MAX_NAME_LENGTH */ - 3) + dsPadNumber(i);\n    }\n    field = uniqueField;\n  }\n  return field;\n}\nexport function dataSanitizeKey(logger, name) {\n  var nameTrunc;\n  if (name) {\n    // Remove any leading or trailing whitespace\n    name = strTrim(asString(name));\n    // truncate the string to 150 chars\n    if (name[_DYN_LENGTH /* @min:%2elength */] > 150 /* DataSanitizerValues.MAX_NAME_LENGTH */) {\n      nameTrunc = strSubstring(name, 0, 150 /* DataSanitizerValues.MAX_NAME_LENGTH */);\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 57 /* _eInternalMessageId.NameTooLong */, \"name is too long.  It has been truncated to \" + 150 /* DataSanitizerValues.MAX_NAME_LENGTH */ + \" characters.\", {\n        name: name\n      }, true);\n    }\n  }\n  return nameTrunc || name;\n}\nexport function dataSanitizeString(logger, value, maxLength) {\n  if (maxLength === void 0) {\n    maxLength = 1024 /* DataSanitizerValues.MAX_STRING_LENGTH */;\n  }\n  var valueTrunc;\n  if (value) {\n    maxLength = maxLength ? maxLength : 1024 /* DataSanitizerValues.MAX_STRING_LENGTH */; // in case default parameters dont work\n    value = strTrim(asString(value));\n    if (value[_DYN_LENGTH /* @min:%2elength */] > maxLength) {\n      valueTrunc = strSubstring(value, 0, maxLength);\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 61 /* _eInternalMessageId.StringValueTooLong */, \"string value is too long. It has been truncated to \" + maxLength + \" characters.\", {\n        value: value\n      }, true);\n    }\n  }\n  return valueTrunc || value;\n}\nexport function dataSanitizeUrl(logger, url) {\n  return dataSanitizeInput(logger, url, 2048 /* DataSanitizerValues.MAX_URL_LENGTH */, 66 /* _eInternalMessageId.UrlTooLong */);\n}\nexport function dataSanitizeMessage(logger, message) {\n  var messageTrunc;\n  if (message) {\n    if (message[_DYN_LENGTH /* @min:%2elength */] > 32768 /* DataSanitizerValues.MAX_MESSAGE_LENGTH */) {\n      messageTrunc = strSubstring(message, 0, 32768 /* DataSanitizerValues.MAX_MESSAGE_LENGTH */);\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 56 /* _eInternalMessageId.MessageTruncated */, \"message is too long, it has been truncated to \" + 32768 /* DataSanitizerValues.MAX_MESSAGE_LENGTH */ + \" characters.\", {\n        message: message\n      }, true);\n    }\n  }\n  return messageTrunc || message;\n}\nexport function dataSanitizeException(logger, exception) {\n  var exceptionTrunc;\n  if (exception) {\n    // Make surte its a string\n    var value = \"\" + exception;\n    if (value[_DYN_LENGTH /* @min:%2elength */] > 32768 /* DataSanitizerValues.MAX_EXCEPTION_LENGTH */) {\n      exceptionTrunc = strSubstring(value, 0, 32768 /* DataSanitizerValues.MAX_EXCEPTION_LENGTH */);\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 52 /* _eInternalMessageId.ExceptionTruncated */, \"exception is too long, it has been truncated to \" + 32768 /* DataSanitizerValues.MAX_EXCEPTION_LENGTH */ + \" characters.\", {\n        exception: exception\n      }, true);\n    }\n  }\n  return exceptionTrunc || exception;\n}\nexport function dataSanitizeProperties(logger, properties) {\n  if (properties) {\n    var tempProps_1 = {};\n    objForEachKey(properties, function (prop, value) {\n      if (isObject(value) && hasJSON()) {\n        // Stringify any part C properties\n        try {\n          value = getJSON()[_DYN_STRINGIFY /* @min:%2estringify */](value);\n        } catch (e) {\n          _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 49 /* _eInternalMessageId.CannotSerializeObjectNonSerializable */, \"custom property is not valid\", {\n            exception: e\n          }, true);\n        }\n      }\n      value = dataSanitizeString(logger, value, 8192 /* DataSanitizerValues.MAX_PROPERTY_LENGTH */);\n      prop = dataSanitizeKeyAndAddUniqueness(logger, prop, tempProps_1);\n      tempProps_1[prop] = value;\n    });\n    properties = tempProps_1;\n  }\n  return properties;\n}\nexport function dataSanitizeMeasurements(logger, measurements) {\n  if (measurements) {\n    var tempMeasurements_1 = {};\n    objForEachKey(measurements, function (measure, value) {\n      measure = dataSanitizeKeyAndAddUniqueness(logger, measure, tempMeasurements_1);\n      tempMeasurements_1[measure] = value;\n    });\n    measurements = tempMeasurements_1;\n  }\n  return measurements;\n}\nexport function dataSanitizeId(logger, id) {\n  return id ? dataSanitizeInput(logger, id, 128 /* DataSanitizerValues.MAX_ID_LENGTH */, 69 /* _eInternalMessageId.IdTooLong */)[_DYN_TO_STRING /* @min:%2etoString */]() : id;\n}\nexport function dataSanitizeInput(logger, input, maxLength, _msgId) {\n  var inputTrunc;\n  if (input) {\n    input = strTrim(asString(input));\n    if (input[_DYN_LENGTH /* @min:%2elength */] > maxLength) {\n      inputTrunc = strSubstring(input, 0, maxLength);\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, _msgId, \"input is too long, it has been truncated to \" + maxLength + \" characters.\", {\n        data: input\n      }, true);\n    }\n  }\n  return inputTrunc || input;\n}\nexport function dsPadNumber(num) {\n  var s = \"00\" + num;\n  return strSubstr(s, s[_DYN_LENGTH /* @min:%2elength */] - 3);\n}","map":{"version":3,"names":["_throwInternal","getJSON","hasJSON","isObject","objForEachKey","strTrim","asString","strSubstr","strSubstring","_DYN_LENGTH","_DYN_STRINGIFY","_DYN_TO_STRING","dataSanitizeKeyAndAddUniqueness","logger","key","map","origLength","field","dataSanitizeKey","i","uniqueField","undefined","dsPadNumber","name","nameTrunc","dataSanitizeString","value","maxLength","valueTrunc","dataSanitizeUrl","url","dataSanitizeInput","dataSanitizeMessage","message","messageTrunc","dataSanitizeException","exception","exceptionTrunc","dataSanitizeProperties","properties","tempProps_1","prop","e","dataSanitizeMeasurements","measurements","tempMeasurements_1","measure","dataSanitizeId","id","input","_msgId","inputTrunc","data","num","s"],"sources":["/home/veeresh133/app/test-error-react/react-az/node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/Common/DataSanitizer.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { _throwInternal, getJSON, hasJSON, isObject, objForEachKey, strTrim } from \"@microsoft/applicationinsights-core-js\";\r\nimport { asString, strSubstr, strSubstring } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH, _DYN_STRINGIFY, _DYN_TO_STRING } from \"../../__DynamicConstants\";\r\nexport function dataSanitizeKeyAndAddUniqueness(logger, key, map) {\r\n    var origLength = key[_DYN_LENGTH /* @min:%2elength */];\r\n    var field = dataSanitizeKey(logger, key);\r\n    // validation truncated the length.  We need to add uniqueness\r\n    if (field[_DYN_LENGTH /* @min:%2elength */] !== origLength) {\r\n        var i = 0;\r\n        var uniqueField = field;\r\n        while (map[uniqueField] !== undefined) {\r\n            i++;\r\n            uniqueField = strSubstring(field, 0, 150 /* DataSanitizerValues.MAX_NAME_LENGTH */ - 3) + dsPadNumber(i);\r\n        }\r\n        field = uniqueField;\r\n    }\r\n    return field;\r\n}\r\nexport function dataSanitizeKey(logger, name) {\r\n    var nameTrunc;\r\n    if (name) {\r\n        // Remove any leading or trailing whitespace\r\n        name = strTrim(asString(name));\r\n        // truncate the string to 150 chars\r\n        if (name[_DYN_LENGTH /* @min:%2elength */] > 150 /* DataSanitizerValues.MAX_NAME_LENGTH */) {\r\n            nameTrunc = strSubstring(name, 0, 150 /* DataSanitizerValues.MAX_NAME_LENGTH */);\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 57 /* _eInternalMessageId.NameTooLong */, \"name is too long.  It has been truncated to \" + 150 /* DataSanitizerValues.MAX_NAME_LENGTH */ + \" characters.\", { name: name }, true);\r\n        }\r\n    }\r\n    return nameTrunc || name;\r\n}\r\nexport function dataSanitizeString(logger, value, maxLength) {\r\n    if (maxLength === void 0) { maxLength = 1024 /* DataSanitizerValues.MAX_STRING_LENGTH */; }\r\n    var valueTrunc;\r\n    if (value) {\r\n        maxLength = maxLength ? maxLength : 1024 /* DataSanitizerValues.MAX_STRING_LENGTH */; // in case default parameters dont work\r\n        value = strTrim(asString(value));\r\n        if (value[_DYN_LENGTH /* @min:%2elength */] > maxLength) {\r\n            valueTrunc = strSubstring(value, 0, maxLength);\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 61 /* _eInternalMessageId.StringValueTooLong */, \"string value is too long. It has been truncated to \" + maxLength + \" characters.\", { value: value }, true);\r\n        }\r\n    }\r\n    return valueTrunc || value;\r\n}\r\nexport function dataSanitizeUrl(logger, url) {\r\n    return dataSanitizeInput(logger, url, 2048 /* DataSanitizerValues.MAX_URL_LENGTH */, 66 /* _eInternalMessageId.UrlTooLong */);\r\n}\r\nexport function dataSanitizeMessage(logger, message) {\r\n    var messageTrunc;\r\n    if (message) {\r\n        if (message[_DYN_LENGTH /* @min:%2elength */] > 32768 /* DataSanitizerValues.MAX_MESSAGE_LENGTH */) {\r\n            messageTrunc = strSubstring(message, 0, 32768 /* DataSanitizerValues.MAX_MESSAGE_LENGTH */);\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 56 /* _eInternalMessageId.MessageTruncated */, \"message is too long, it has been truncated to \" + 32768 /* DataSanitizerValues.MAX_MESSAGE_LENGTH */ + \" characters.\", { message: message }, true);\r\n        }\r\n    }\r\n    return messageTrunc || message;\r\n}\r\nexport function dataSanitizeException(logger, exception) {\r\n    var exceptionTrunc;\r\n    if (exception) {\r\n        // Make surte its a string\r\n        var value = \"\" + exception;\r\n        if (value[_DYN_LENGTH /* @min:%2elength */] > 32768 /* DataSanitizerValues.MAX_EXCEPTION_LENGTH */) {\r\n            exceptionTrunc = strSubstring(value, 0, 32768 /* DataSanitizerValues.MAX_EXCEPTION_LENGTH */);\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 52 /* _eInternalMessageId.ExceptionTruncated */, \"exception is too long, it has been truncated to \" + 32768 /* DataSanitizerValues.MAX_EXCEPTION_LENGTH */ + \" characters.\", { exception: exception }, true);\r\n        }\r\n    }\r\n    return exceptionTrunc || exception;\r\n}\r\nexport function dataSanitizeProperties(logger, properties) {\r\n    if (properties) {\r\n        var tempProps_1 = {};\r\n        objForEachKey(properties, function (prop, value) {\r\n            if (isObject(value) && hasJSON()) {\r\n                // Stringify any part C properties\r\n                try {\r\n                    value = getJSON()[_DYN_STRINGIFY /* @min:%2estringify */](value);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 49 /* _eInternalMessageId.CannotSerializeObjectNonSerializable */, \"custom property is not valid\", { exception: e }, true);\r\n                }\r\n            }\r\n            value = dataSanitizeString(logger, value, 8192 /* DataSanitizerValues.MAX_PROPERTY_LENGTH */);\r\n            prop = dataSanitizeKeyAndAddUniqueness(logger, prop, tempProps_1);\r\n            tempProps_1[prop] = value;\r\n        });\r\n        properties = tempProps_1;\r\n    }\r\n    return properties;\r\n}\r\nexport function dataSanitizeMeasurements(logger, measurements) {\r\n    if (measurements) {\r\n        var tempMeasurements_1 = {};\r\n        objForEachKey(measurements, function (measure, value) {\r\n            measure = dataSanitizeKeyAndAddUniqueness(logger, measure, tempMeasurements_1);\r\n            tempMeasurements_1[measure] = value;\r\n        });\r\n        measurements = tempMeasurements_1;\r\n    }\r\n    return measurements;\r\n}\r\nexport function dataSanitizeId(logger, id) {\r\n    return id ? dataSanitizeInput(logger, id, 128 /* DataSanitizerValues.MAX_ID_LENGTH */, 69 /* _eInternalMessageId.IdTooLong */)[_DYN_TO_STRING /* @min:%2etoString */]() : id;\r\n}\r\nexport function dataSanitizeInput(logger, input, maxLength, _msgId) {\r\n    var inputTrunc;\r\n    if (input) {\r\n        input = strTrim(asString(input));\r\n        if (input[_DYN_LENGTH /* @min:%2elength */] > maxLength) {\r\n            inputTrunc = strSubstring(input, 0, maxLength);\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, _msgId, \"input is too long, it has been truncated to \" + maxLength + \" characters.\", { data: input }, true);\r\n        }\r\n    }\r\n    return inputTrunc || input;\r\n}\r\nexport function dsPadNumber(num) {\r\n    var s = \"00\" + num;\r\n    return strSubstr(s, s[_DYN_LENGTH /* @min:%2elength */] - 3);\r\n}\r\n//# sourceMappingURL=DataSanitizer.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}