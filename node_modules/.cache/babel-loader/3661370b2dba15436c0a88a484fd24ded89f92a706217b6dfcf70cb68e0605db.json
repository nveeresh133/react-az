{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Dependencies Plugin, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nvar _a;\nimport { __assignFn as __assign, __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { DisabledPropertyName, PropertiesPluginIdentifier, RemoteDependencyData, RequestHeaders, correlationIdCanIncludeCorrelationHeader, correlationIdGetCorrelationContext, createDistributedTraceContextFromTrace, createTelemetryItem, createTraceParent, dateTimeUtilsNow, formatTraceParent, isInternalApplicationInsightsEndpoint } from \"@microsoft/applicationinsights-common\";\nimport { BaseTelemetryPlugin, InstrumentFunc, InstrumentProto, _throwInternal, arrForEach, createProcessTelemetryContext, createUniqueNamespace, dumpObj, eventOn, generateW3CId, getExceptionName, getGlobal, getIEVersion, getLocation, getPerformance, isFunction, isNullOrUndefined, isString, isXhrSupported, mergeEvtNamespace, onConfigChange, strPrototype, strTrim } from \"@microsoft/applicationinsights-core-js\";\nimport { isWebWorker, objFreeze, scheduleTimeout, strIndexOf, strSplit, strSubstr } from \"@nevware21/ts-utils\";\nimport { STR_PROPERTIES } from \"./InternalConstants\";\nimport { _DYN_ABORTED, _DYN_ABORT_DONE, _DYN_ADD_REQUEST_CONTEXT, _DYN_AJAX_DIAGNOSTICS_MES16, _DYN_AJAX_PERF_LOOKUP_DEL10, _DYN_CONTEXT, _DYN_CORE, _DYN_CORRELATION_CONTEXT, _DYN_DISABLE_AJAX_TRACKIN9, _DYN_DISABLE_FETCH_TRACKI11, _DYN_ENABLE_AJAX_ERROR_ST5, _DYN_ENABLE_AJAX_PERF_TRA6, _DYN_ENABLE_REQUEST_HEADE4, _DYN_ENABLE_RESPONSE_HEAD12, _DYN_ERROR_STATUS_TEXT, _DYN_EXCEPTION, _DYN_EXCLUDE_REQUEST_FROM8, _DYN_GET_ABSOLUTE_URL, _DYN_GET_ALL_RESPONSE_HEA15, _DYN_GET_PART_APROPS, _DYN_GET_TRACE_FLAGS, _DYN_GET_TRACE_ID, _DYN_HEADERS, _DYN_HEADER_MAP, _DYN_INCLUDE_CORRELATION_2, _DYN_INST, _DYN_LENGTH, _DYN_MAX_AJAX_CALLS_PER_V7, _DYN_METHOD, _DYN_NAME, _DYN_OPEN_DONE, _DYN_PERF_MARK, _DYN_PERF_TIMING, _DYN_REQUEST_HEADERS, _DYN_REQUEST_SENT_TIME, _DYN_REQUEST_URL, _DYN_RESPONSE, _DYN_RESPONSE_FINISHED_TI14, _DYN_RESPONSE_TEXT, _DYN_SEND_DONE, _DYN_SET_REQUEST_HEADER, _DYN_SPAN_ID, _DYN_SPAN_ID1, _DYN_START_TIME, _DYN_STATE_CHANGE_ATTACHE13, _DYN_STATUS, _DYN_STATUS_TEXT, _DYN_TO_LOWER_CASE, _DYN_TRACE_FLAGS, _DYN_TRACE_ID, _DYN_TRACE_ID0, _DYN_TRACK_DEPENDENCY_DAT3, _DYN__ADD_HOOK, _DYN__CREATE_TRACK_ITEM } from \"./__DynamicConstants\";\nimport { ajaxRecord } from \"./ajaxRecord\";\nvar AJAX_MONITOR_PREFIX = \"ai.ajxmn.\";\nvar strDiagLog = \"diagLog\";\nvar AJAX_DATA_CONTAINER = \"_ajaxData\";\nvar STR_FETCH = \"fetch\";\nvar ERROR_HEADER = \"Failed to monitor XMLHttpRequest\";\nvar ERROR_PREFIX = \", monitoring data for this ajax call \";\nvar ERROR_POSTFIX = ERROR_PREFIX + \"may be incorrect.\";\nvar ERROR_NOT_SENT = ERROR_PREFIX + \"won't be sent.\";\nvar CORRELATION_HEADER_ERROR = \"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.\";\nvar CUSTOM_REQUEST_CONTEXT_ERROR = \"Failed to add custom defined request context as configured call back may missing a null check.\";\nvar FAILED_TO_CALCULATE_DURATION_ERROR = \"Failed to calculate the duration of the \";\n// Using a global value so that to handle same iKey with multiple app insights instances (mostly for testing)\nvar _markCount = 0;\n/** @Ignore */\nfunction _supportsFetch() {\n  var _global = getGlobal();\n  if (!_global || isNullOrUndefined(_global.Request) || isNullOrUndefined(_global.Request[strPrototype]) || isNullOrUndefined(_global[STR_FETCH])) {\n    return null;\n  }\n  return _global[STR_FETCH];\n}\n/**\r\n * Determines whether ajax monitoring can be enabled on this document\r\n * @returns True if Ajax monitoring is supported on this page, otherwise false\r\n * @ignore\r\n */\nfunction _supportsAjaxMonitoring(ajaxMonitorInstance, ajaxDataId) {\n  var _a, _b;\n  var result = false;\n  if (isXhrSupported()) {\n    var proto = XMLHttpRequest[strPrototype];\n    result = !isNullOrUndefined(proto) && !isNullOrUndefined(proto.open) &&\n    // eslint-disable-line security/detect-non-literal-fs-filename -- false positive\n    !isNullOrUndefined(proto.send) && !isNullOrUndefined(proto.abort);\n  }\n  var ieVer = getIEVersion();\n  if (ieVer && ieVer < 9) {\n    result = false;\n  }\n  if (result) {\n    // Disable if the XmlHttpRequest can't be extended or hooked\n    try {\n      var xhr = new XMLHttpRequest();\n      var xhrData = {\n        xh: [],\n        i: (_a = {}, _a[ajaxDataId] = {}, _a)\n      };\n      xhr[AJAX_DATA_CONTAINER] = xhrData;\n      // Check that we can update the prototype\n      var theOpen = XMLHttpRequest[strPrototype].open;\n      XMLHttpRequest[strPrototype].open = theOpen;\n    } catch (e) {\n      // We can't decorate the xhr object so disable monitoring\n      result = false;\n      _throwInternalCritical(ajaxMonitorInstance, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to enable XMLHttpRequest monitoring, extension is not supported\", (_b = {}, _b[_DYN_EXCEPTION /* @min:exception */] = dumpObj(e), _b));\n    }\n  }\n  return result;\n}\n/**\r\n * Internal helper to fetch the SDK instance tracking data for this XHR request\r\n * @param xhr\r\n * @param ajaxDataId\r\n * @returns\r\n */\nvar _getAjaxData = function (xhr, ajaxDataId) {\n  if (xhr && ajaxDataId && xhr[AJAX_DATA_CONTAINER]) {\n    return (xhr[AJAX_DATA_CONTAINER].i || {})[ajaxDataId];\n  }\n  return null;\n};\n/**\r\n * @ignore\r\n * Internal helper to track the singleton shared tracking headers, so we can attempt to not create headers\r\n * that might cause an issue if multiple values are populated.\r\n * @param xhr - The instrumented XHR instance\r\n */\nvar _addSharedXhrHeaders = function (xhr, name, value) {\n  if (xhr) {\n    var headers = (xhr[AJAX_DATA_CONTAINER] || {}).xh;\n    if (headers) {\n      headers.push({\n        n: name,\n        v: value\n      });\n    }\n  }\n};\nvar _isHeaderSet = function (xhr, name) {\n  var isPresent = false;\n  if (xhr) {\n    var headers = (xhr[AJAX_DATA_CONTAINER] || {}).xh;\n    if (headers) {\n      arrForEach(headers, function (header) {\n        if (header.n === name) {\n          isPresent = true;\n          return -1;\n        }\n      });\n    }\n  }\n  return isPresent;\n};\n/** @Ignore */\nfunction _getFailedAjaxDiagnosticsMessage(xhr, ajaxDataId) {\n  var result = \"\";\n  try {\n    var ajaxData = _getAjaxData(xhr, ajaxDataId);\n    if (ajaxData && ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */]) {\n      result += \"(url: '\" + ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] + \"')\";\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-empty\n  }\n  return result;\n}\n/** @ignore */\nfunction _throwInternalCritical(ajaxMonitorInstance, msgId, message, properties, isUserAct) {\n  _throwInternal(ajaxMonitorInstance[strDiagLog](), 1 /* eLoggingSeverity.CRITICAL */, msgId, message, properties, isUserAct);\n}\n/** @ignore */\nfunction _throwInternalWarning(ajaxMonitorInstance, msgId, message, properties, isUserAct) {\n  _throwInternal(ajaxMonitorInstance[strDiagLog](), 2 /* eLoggingSeverity.WARNING */, msgId, message, properties, isUserAct);\n}\n/** @Ignore */\nfunction _createErrorCallbackFunc(ajaxMonitorInstance, internalMessage, message) {\n  // tslint:disable-next-line\n  return function (callDetails) {\n    var _a;\n    _throwInternalCritical(ajaxMonitorInstance, internalMessage, message, (_a = {\n      ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(callDetails[_DYN_INST /* @min:%2einst */], ajaxMonitorInstance._ajaxDataId)\n    }, _a[_DYN_EXCEPTION /* @min:exception */] = dumpObj(callDetails.err), _a));\n  };\n}\nfunction _indexOf(value, match) {\n  if (value && match) {\n    return strIndexOf(value, match);\n  }\n  return -1;\n}\nfunction _addHandler(container, id, theFunc) {\n  var theHandler = {\n    id: id,\n    fn: theFunc\n  };\n  container.push(theHandler);\n  return {\n    remove: function () {\n      arrForEach(container, function (initializer, idx) {\n        if (initializer.id === theHandler.id) {\n          container.splice(idx, 1);\n          return -1;\n        }\n      });\n    }\n  };\n}\nfunction _processDependencyContainer(core, container, details, message) {\n  var result = true;\n  arrForEach(container, function (theFunc, idx) {\n    try {\n      if (theFunc.fn.call(null, details) === false) {\n        result = false;\n      }\n    } catch (e) {\n      _throwInternal(core && core.logger, 1 /* eLoggingSeverity.CRITICAL */, 64 /* _eInternalMessageId.TelemetryInitializerFailed */, \"Dependency \" + message + \" [#\" + idx + \"] failed: \" + getExceptionName(e), {\n        exception: dumpObj(e)\n      }, true);\n    }\n  });\n  return result;\n}\nfunction _processDependencyListeners(listeners, core, ajaxData, xhr, input, init) {\n  var _a;\n  var initializersCount = listeners[_DYN_LENGTH /* @min:%2elength */];\n  if (initializersCount > 0) {\n    var details = (_a = {}, _a[_DYN_CORE /* @min:core */] = core, _a.xhr = xhr, _a.input = input, _a.init = init, _a.traceId = ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */], _a.spanId = ajaxData[_DYN_SPAN_ID /* @min:%2espanID */], _a.traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */], _a.context = ajaxData[_DYN_CONTEXT /* @min:%2econtext */] || {}, _a.aborted = !!ajaxData[_DYN_ABORTED /* @min:%2eaborted */], _a);\n    _processDependencyContainer(core, listeners, details, \"listener\");\n    ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] = details[_DYN_TRACE_ID0 /* @min:%2etraceId */];\n    ajaxData[_DYN_SPAN_ID /* @min:%2espanID */] = details[_DYN_SPAN_ID1 /* @min:%2espanId */];\n    ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = details[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\n    ajaxData[_DYN_CONTEXT /* @min:%2econtext */] = details[_DYN_CONTEXT /* @min:%2econtext */];\n  }\n}\nvar BLOB_CORE = \"*.blob.core.\";\nexport var DfltAjaxCorrelationHeaderExDomains = objFreeze([BLOB_CORE + \"windows.net\", BLOB_CORE + \"chinacloudapi.cn\", BLOB_CORE + \"cloudapi.de\", BLOB_CORE + \"usgovcloudapi.net\"]);\nvar _internalExcludeEndpoints = [/https:\\/\\/[^\\/]*(\\.pipe\\.aria|aria\\.pipe|events\\.data|collector\\.azure)\\.[^\\/]+\\/(OneCollector\\/1|Collector\\/3)\\.0/i];\nvar _defaultConfig = objFreeze((_a = {}, _a[_DYN_MAX_AJAX_CALLS_PER_V7 /* @min:maxAjaxCallsPerView */] = 500, _a[_DYN_DISABLE_AJAX_TRACKIN9 /* @min:disableAjaxTracking */] = false, _a[_DYN_DISABLE_FETCH_TRACKI11 /* @min:disableFetchTracking */] = false, _a[_DYN_EXCLUDE_REQUEST_FROM8 /* @min:excludeRequestFromAutoTrackingPatterns */] = undefined, _a.disableCorrelationHeaders = false, _a.distributedTracingMode = 1 /* eDistributedTracingModes.AI_AND_W3C */, _a.correlationHeaderExcludedDomains = DfltAjaxCorrelationHeaderExDomains, _a.correlationHeaderDomains = undefined, _a.correlationHeaderExcludePatterns = undefined, _a.appId = undefined, _a.enableCorsCorrelation = false, _a[_DYN_ENABLE_REQUEST_HEADE4 /* @min:enableRequestHeaderTracking */] = false, _a[_DYN_ENABLE_RESPONSE_HEAD12 /* @min:enableResponseHeaderTracking */] = false, _a[_DYN_ENABLE_AJAX_ERROR_ST5 /* @min:enableAjaxErrorStatusText */] = false, _a[_DYN_ENABLE_AJAX_PERF_TRA6 /* @min:enableAjaxPerfTracking */] = false, _a.maxAjaxPerfLookupAttempts = 3, _a[_DYN_AJAX_PERF_LOOKUP_DEL10 /* @min:ajaxPerfLookupDelay */] = 25, _a.ignoreHeaders = [\"Authorization\", \"X-API-Key\", \"WWW-Authenticate\"], _a[_DYN_ADD_REQUEST_CONTEXT /* @min:addRequestContext */] = undefined, _a.addIntEndpoints = true, _a));\nvar AjaxMonitor = /** @class */function (_super) {\n  __extends(AjaxMonitor, _super);\n  function AjaxMonitor() {\n    var _this = _super.call(this) || this;\n    _this.identifier = AjaxMonitor.identifier;\n    _this.priority = 120;\n    var _fetchInitialized; // fetch monitoring initialized\n    var _xhrInitialized; // XHR monitoring initialized\n    var _currentWindowHost;\n    var _extensionConfig;\n    var _enableRequestHeaderTracking;\n    var _enableAjaxErrorStatusText;\n    var _trackAjaxAttempts;\n    var _context;\n    var _isUsingW3CHeaders;\n    var _isUsingAIHeaders;\n    var _markPrefix;\n    var _enableAjaxPerfTracking;\n    var _maxAjaxCallsPerView;\n    var _enableResponseHeaderTracking;\n    var _disabledUrls;\n    var _disableAjaxTracking;\n    var _disableFetchTracking;\n    var _excludeRequestFromAutoTrackingPatterns;\n    var _addRequestContext;\n    var _evtNamespace;\n    var _ajaxDataId;\n    var _dependencyHandlerId;\n    var _dependencyListeners;\n    var _dependencyInitializers;\n    var _ignoreHeaders;\n    var _maxAjaxPerfLookupAttempts;\n    var _ajaxPerfLookupDelay;\n    var _distributedTracingMode;\n    var _appId;\n    var _polyfillInitialized;\n    dynamicProto(AjaxMonitor, _this, function (_self, _base) {\n      var _addHook = _base[_DYN__ADD_HOOK /* @min:%2e_addHook */];\n      _initDefaults();\n      _self.initialize = function (config, core, extensions, pluginChain) {\n        if (!_self.isInitialized()) {\n          _base.initialize(config, core, extensions, pluginChain);\n          _evtNamespace = mergeEvtNamespace(createUniqueNamespace(\"ajax\"), core && core.evtNamespace && core.evtNamespace());\n          _populateDefaults(config);\n          _instrumentXhr();\n          _instrumentFetch();\n          _populateContext();\n        }\n      };\n      _self._doTeardown = function () {\n        _initDefaults();\n      };\n      _self.trackDependencyData = function (dependency, properties) {\n        _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], null, dependency, properties);\n      };\n      _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */] = function (ajaxData, input, init, xhr) {\n        // Test Hook to allow the overriding of the location host\n        var currentWindowHost = _self[\"_currentWindowHost\"] || _currentWindowHost;\n        _processDependencyListeners(_dependencyListeners, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, xhr, input, init);\n        if (input || input === \"\") {\n          // Fetch\n          if (correlationIdCanIncludeCorrelationHeader(_extensionConfig, ajaxData[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */](), currentWindowHost)) {\n            if (!init) {\n              init = {};\n            }\n            // init headers override original request headers\n            // so, if they exist use only them, otherwise use request's because they should have been applied in the first place\n            // not using original request headers will result in them being lost\n            var headers = new Headers(init[_DYN_HEADERS /* @min:%2eheaders */] || (input instanceof Request ? input[_DYN_HEADERS /* @min:%2eheaders */] || {} : {}));\n            if (_isUsingAIHeaders) {\n              var id = \"|\" + ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + ajaxData[_DYN_SPAN_ID /* @min:%2espanID */];\n              headers.set(RequestHeaders[3 /* eRequestHeaders.requestIdHeader */], id);\n              if (_enableRequestHeaderTracking) {\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[3 /* eRequestHeaders.requestIdHeader */]] = id;\n              }\n            }\n            var appId = _appId || _context && _context.appId();\n            if (appId) {\n              headers.set(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */], RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId);\n              if (_enableRequestHeaderTracking) {\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]] = RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId;\n              }\n            }\n            if (_isUsingW3CHeaders) {\n              var traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\n              if (isNullOrUndefined(traceFlags)) {\n                traceFlags = 0x01;\n              }\n              var traceParent = formatTraceParent(createTraceParent(ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */], ajaxData[_DYN_SPAN_ID /* @min:%2espanID */], traceFlags));\n              headers.set(RequestHeaders[4 /* eRequestHeaders.traceParentHeader */], traceParent);\n              if (_enableRequestHeaderTracking) {\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[4 /* eRequestHeaders.traceParentHeader */]] = traceParent;\n              }\n            }\n            init[_DYN_HEADERS /* @min:%2eheaders */] = headers;\n          }\n          return init;\n        } else if (xhr) {\n          // XHR\n          if (correlationIdCanIncludeCorrelationHeader(_extensionConfig, ajaxData[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */](), currentWindowHost)) {\n            if (_isUsingAIHeaders) {\n              if (!_isHeaderSet(xhr, RequestHeaders[3 /* eRequestHeaders.requestIdHeader */])) {\n                var id = \"|\" + ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + ajaxData[_DYN_SPAN_ID /* @min:%2espanID */];\n                xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[3 /* eRequestHeaders.requestIdHeader */], id);\n                if (_enableRequestHeaderTracking) {\n                  ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[3 /* eRequestHeaders.requestIdHeader */]] = id;\n                }\n              } else {\n                _throwInternalWarning(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, \"Unable to set [\" + RequestHeaders[3 /* eRequestHeaders.requestIdHeader */] + \"] as it has already been set by another instance\");\n              }\n            }\n            var appId = _appId || _context && _context.appId();\n            if (appId) {\n              if (!_isHeaderSet(xhr, RequestHeaders[0 /* eRequestHeaders.requestContextHeader */])) {\n                xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[0 /* eRequestHeaders.requestContextHeader */], RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId);\n                if (_enableRequestHeaderTracking) {\n                  ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]] = RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId;\n                }\n              } else {\n                _throwInternalWarning(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, \"Unable to set [\" + RequestHeaders[0 /* eRequestHeaders.requestContextHeader */] + \"] as it has already been set by another instance\");\n              }\n            }\n            if (_isUsingW3CHeaders) {\n              var traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\n              if (isNullOrUndefined(traceFlags)) {\n                traceFlags = 0x01;\n              }\n              if (!_isHeaderSet(xhr, RequestHeaders[4 /* eRequestHeaders.traceParentHeader */])) {\n                var traceParent = formatTraceParent(createTraceParent(ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */], ajaxData[_DYN_SPAN_ID /* @min:%2espanID */], traceFlags));\n                xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[4 /* eRequestHeaders.traceParentHeader */], traceParent);\n                if (_enableRequestHeaderTracking) {\n                  ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[4 /* eRequestHeaders.traceParentHeader */]] = traceParent;\n                }\n              } else {\n                _throwInternalWarning(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, \"Unable to set [\" + RequestHeaders[4 /* eRequestHeaders.traceParentHeader */] + \"] as it has already been set by another instance\");\n              }\n            }\n          }\n          return xhr;\n        }\n        return undefined;\n      };\n      _self[_DYN_TRACK_DEPENDENCY_DAT3 /* @min:%2etrackDependencyDataInternal */] = function (dependency, properties, systemProperties) {\n        if (_maxAjaxCallsPerView === -1 || _trackAjaxAttempts < _maxAjaxCallsPerView) {\n          // Hack since expected format in w3c mode is |abc.def.\n          // Non-w3c format is |abc.def\n          // @todo Remove if better solution is available, e.g. handle in portal\n          if ((_distributedTracingMode === 2 /* eDistributedTracingModes.W3C */ || _distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */) && typeof dependency.id === \"string\" && dependency.id[dependency.id[_DYN_LENGTH /* @min:%2elength */] - 1] !== \".\") {\n            dependency.id += \".\";\n          }\n          if (isNullOrUndefined(dependency[_DYN_START_TIME /* @min:%2estartTime */])) {\n            dependency[_DYN_START_TIME /* @min:%2estartTime */] = new Date();\n          }\n          var item = createTelemetryItem(dependency, RemoteDependencyData.dataType, RemoteDependencyData.envelopeType, _self[strDiagLog](), properties, systemProperties);\n          _self[_DYN_CORE /* @min:%2ecore */].track(item);\n        } else if (_trackAjaxAttempts === _maxAjaxCallsPerView) {\n          _throwInternalCritical(_self, 55 /* _eInternalMessageId.MaxAjaxPerPVExceeded */, \"Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.\", true);\n        }\n        ++_trackAjaxAttempts;\n      };\n      _self.addDependencyListener = function (dependencyListener) {\n        return _addHandler(_dependencyListeners, _dependencyHandlerId++, dependencyListener);\n      };\n      _self.addDependencyInitializer = function (dependencyInitializer) {\n        return _addHandler(_dependencyInitializers, _dependencyHandlerId++, dependencyInitializer);\n      };\n      function _initDefaults() {\n        var location = getLocation();\n        _fetchInitialized = false; // fetch monitoring initialized\n        _xhrInitialized = false; // XHR monitoring initialized\n        _polyfillInitialized = false; // polyfill monitoring initialized\n        _currentWindowHost = location && location.host && location.host[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\n        _extensionConfig = null;\n        _enableRequestHeaderTracking = false;\n        _enableAjaxErrorStatusText = false;\n        _trackAjaxAttempts = 0;\n        _context = null;\n        _isUsingW3CHeaders = false;\n        _isUsingAIHeaders = false;\n        _markPrefix = null;\n        _enableAjaxPerfTracking = false;\n        _maxAjaxCallsPerView = 0;\n        _enableResponseHeaderTracking = false;\n        _disabledUrls = {};\n        _disableAjaxTracking = false;\n        _disableFetchTracking = false;\n        _excludeRequestFromAutoTrackingPatterns = null;\n        _addRequestContext = null;\n        _evtNamespace = null;\n        _dependencyHandlerId = 0;\n        _dependencyListeners = [];\n        _dependencyInitializers = [];\n        _ajaxDataId = createUniqueNamespace(\"ajaxData\");\n        _self._ajaxDataId = _ajaxDataId;\n        _ignoreHeaders = null;\n        _maxAjaxPerfLookupAttempts = 1;\n        _ajaxPerfLookupDelay = 1;\n        _distributedTracingMode = 1 /* eDistributedTracingModes.AI_AND_W3C */;\n        _appId = null;\n      }\n      function _populateDefaults(config) {\n        _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(config, function (details) {\n          var config = details.cfg;\n          var ctx = createProcessTelemetryContext(null, config, _self[_DYN_CORE /* @min:%2ecore */]);\n          _extensionConfig = ctx.getExtCfg(AjaxMonitor.identifier, _defaultConfig);\n          _distributedTracingMode = _extensionConfig.distributedTracingMode;\n          _enableRequestHeaderTracking = _extensionConfig[_DYN_ENABLE_REQUEST_HEADE4 /* @min:%2eenableRequestHeaderTracking */];\n          _enableAjaxErrorStatusText = _extensionConfig[_DYN_ENABLE_AJAX_ERROR_ST5 /* @min:%2eenableAjaxErrorStatusText */];\n          _enableAjaxPerfTracking = _extensionConfig[_DYN_ENABLE_AJAX_PERF_TRA6 /* @min:%2eenableAjaxPerfTracking */];\n          _maxAjaxCallsPerView = _extensionConfig[_DYN_MAX_AJAX_CALLS_PER_V7 /* @min:%2emaxAjaxCallsPerView */];\n          _excludeRequestFromAutoTrackingPatterns = [].concat(_extensionConfig[_DYN_EXCLUDE_REQUEST_FROM8 /* @min:%2eexcludeRequestFromAutoTrackingPatterns */] || [], _extensionConfig.addIntEndpoints !== false ? _internalExcludeEndpoints : []);\n          _addRequestContext = _extensionConfig[_DYN_ADD_REQUEST_CONTEXT /* @min:%2eaddRequestContext */];\n          _isUsingAIHeaders = _distributedTracingMode === 0 /* eDistributedTracingModes.AI */ || _distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */;\n          _isUsingW3CHeaders = _distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */ || _distributedTracingMode === 2 /* eDistributedTracingModes.W3C */;\n          if (_enableAjaxPerfTracking) {\n            _markPrefix = _ajaxDataId;\n          }\n          _disableAjaxTracking = !!_extensionConfig[_DYN_DISABLE_AJAX_TRACKIN9 /* @min:%2edisableAjaxTracking */];\n          _maxAjaxPerfLookupAttempts = _extensionConfig.maxAjaxPerfLookupAttempts;\n          _ajaxPerfLookupDelay = _extensionConfig[_DYN_AJAX_PERF_LOOKUP_DEL10 /* @min:%2eajaxPerfLookupDelay */];\n          _ignoreHeaders = _extensionConfig.ignoreHeaders;\n          _appId = _extensionConfig.appId;\n        }));\n      }\n      function _populateContext() {\n        var propExt = _self[_DYN_CORE /* @min:%2ecore */].getPlugin(PropertiesPluginIdentifier);\n        if (propExt) {\n          _context = propExt.plugin[_DYN_CONTEXT /* @min:%2econtext */]; // we could move IPropertiesPlugin to common as well\n        }\n      }\n      // discard the header if it's defined as ignoreHeaders in ICorrelationConfig\n      function _canIncludeHeaders(header) {\n        var rlt = true;\n        if (header || _ignoreHeaders) {\n          arrForEach(_ignoreHeaders, function (key) {\n            if (key[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() === header[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]()) {\n              rlt = false;\n              return -1;\n            }\n          });\n        }\n        return rlt;\n      }\n      // Fetch Stuff\n      function _instrumentFetch() {\n        var fetch = _supportsFetch();\n        if (!fetch) {\n          return;\n        }\n        var global = getGlobal();\n        var isPolyfill = fetch.polyfill;\n        _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extensionConfig, function () {\n          _disableFetchTracking = !!_extensionConfig[_DYN_DISABLE_FETCH_TRACKI11 /* @min:%2edisableFetchTracking */];\n          _enableResponseHeaderTracking = _extensionConfig[_DYN_ENABLE_RESPONSE_HEAD12 /* @min:%2eenableResponseHeaderTracking */];\n          if (!_disableFetchTracking && !_fetchInitialized) {\n            _addHook(InstrumentFunc(global, STR_FETCH, {\n              ns: _evtNamespace,\n              // Add request hook\n              req: function (callDetails, input, init) {\n                var fetchData;\n                if (!_disableFetchTracking && _fetchInitialized && !_isDisabledRequest(null, input, init) &&\n                // If we have a polyfil and XHR instrumented then let XHR report otherwise we get duplicates\n                !(isPolyfill && _xhrInitialized)) {\n                  var ctx = callDetails.ctx();\n                  fetchData = _createFetchRecord(input, init);\n                  var newInit = _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */](fetchData, input, init);\n                  if (newInit !== init) {\n                    callDetails.set(1, newInit);\n                  }\n                  ctx.data = fetchData;\n                }\n              },\n              rsp: function (callDetails, input) {\n                if (!_disableFetchTracking) {\n                  var fetchData_1 = callDetails.ctx().data;\n                  if (fetchData_1) {\n                    // Replace the result with the new promise from this code\n                    callDetails.rslt = callDetails.rslt.then(function (response) {\n                      _reportFetchMetrics(callDetails, (response || {})[_DYN_STATUS /* @min:%2estatus */], input, response, fetchData_1, function () {\n                        var _a;\n                        var ajaxResponse = (_a = {\n                          statusText: (response || {})[_DYN_STATUS_TEXT /* @min:%2estatusText */]\n                        }, _a[_DYN_HEADER_MAP /* @min:headerMap */] = null, _a[_DYN_CORRELATION_CONTEXT /* @min:correlationContext */] = _getFetchCorrelationContext(response), _a);\n                        if (_enableResponseHeaderTracking && response) {\n                          var responseHeaderMap_1 = {};\n                          response.headers.forEach(function (value, name) {\n                            if (_canIncludeHeaders(name)) {\n                              responseHeaderMap_1[name] = value;\n                            }\n                          });\n                          ajaxResponse[_DYN_HEADER_MAP /* @min:%2eheaderMap */] = responseHeaderMap_1;\n                        }\n                        return ajaxResponse;\n                      });\n                      return response;\n                    }).catch(function (reason) {\n                      _reportFetchMetrics(callDetails, 0, input, null, fetchData_1, null, {\n                        error: reason.message || dumpObj(reason)\n                      });\n                      throw reason;\n                    });\n                  }\n                }\n              },\n              // Create an error callback to report any hook errors\n              hkErr: _createErrorCallbackFunc(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to monitor Window.fetch\" + ERROR_POSTFIX)\n            }, true, isWebWorker()));\n            _fetchInitialized = true;\n          } else if (isPolyfill && !_polyfillInitialized) {\n            // If fetch is a polyfill we need to capture the request to ensure that we correctly track\n            // disabled request URLS (i.e. internal urls) to ensure we don't end up in a constant loop\n            // of reporting ourselves, for example React Native uses a polyfill for fetch\n            // Note: Polyfill implementations that don't support the \"polyfill\" tag are not supported\n            // the workaround is to add a polyfill property to your fetch implementation before initializing\n            // App Insights\n            _addHook(InstrumentFunc(global, STR_FETCH, {\n              ns: _evtNamespace,\n              req: function (callDetails, input, init) {\n                // Just call so that we record any disabled URL\n                _isDisabledRequest(null, input, init);\n              }\n            }));\n            _polyfillInitialized = true;\n          }\n        }));\n        if (isPolyfill) {\n          // retag the instrumented fetch with the same polyfill settings this is mostly for testing\n          // But also supports multiple App Insights usages\n          global[STR_FETCH].polyfill = isPolyfill;\n        }\n      }\n      function _hookProto(target, funcName, callbacks) {\n        _addHook(InstrumentProto(target, funcName, callbacks));\n      }\n      function _instrumentXhr() {\n        if (!_supportsAjaxMonitoring(_self, _ajaxDataId)) {\n          return;\n        }\n        _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extensionConfig, function () {\n          _disableAjaxTracking = !!_extensionConfig[_DYN_DISABLE_AJAX_TRACKIN9 /* @min:%2edisableAjaxTracking */];\n          _enableRequestHeaderTracking = _extensionConfig[_DYN_ENABLE_REQUEST_HEADE4 /* @min:%2eenableRequestHeaderTracking */];\n          if (!_disableAjaxTracking && !_xhrInitialized) {\n            // Instrument open\n            _hookProto(XMLHttpRequest, \"open\", {\n              ns: _evtNamespace,\n              req: function (callDetails, method, url, async) {\n                if (!_disableAjaxTracking) {\n                  var xhr = callDetails[_DYN_INST /* @min:%2einst */];\n                  var ajaxData = _getAjaxData(xhr, _ajaxDataId);\n                  if (!_isDisabledRequest(xhr, url) && _isMonitoredXhrInstance(xhr, ajaxData, true)) {\n                    if (!ajaxData || !ajaxData.xhrMonitoringState[_DYN_OPEN_DONE /* @min:%2eopenDone */]) {\n                      // Only create a single ajaxData (even when multiple AI instances are running)\n                      ajaxData = _openHandler(xhr, method, url, async);\n                    }\n                    // always attach to the on ready state change (required for handling multiple instances)\n                    _attachToOnReadyStateChange(xhr, ajaxData);\n                  }\n                }\n              },\n              hkErr: _createErrorCallbackFunc(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, ERROR_HEADER + \".open\" + ERROR_POSTFIX)\n            });\n            // Instrument send\n            _hookProto(XMLHttpRequest, \"send\", {\n              ns: _evtNamespace,\n              req: function (callDetails, context) {\n                if (!_disableAjaxTracking) {\n                  var xhr = callDetails[_DYN_INST /* @min:%2einst */];\n                  var ajaxData = _getAjaxData(xhr, _ajaxDataId);\n                  if (_isMonitoredXhrInstance(xhr, ajaxData) && !ajaxData.xhrMonitoringState[_DYN_SEND_DONE /* @min:%2esendDone */]) {\n                    _createMarkId(\"xhr\", ajaxData);\n                    ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = dateTimeUtilsNow();\n                    _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */](ajaxData, undefined, undefined, xhr);\n                    ajaxData.xhrMonitoringState[_DYN_SEND_DONE /* @min:%2esendDone */] = true;\n                  }\n                }\n              },\n              hkErr: _createErrorCallbackFunc(_self, 17 /* _eInternalMessageId.FailedMonitorAjaxSend */, ERROR_HEADER + ERROR_POSTFIX)\n            });\n            // Instrument abort\n            _hookProto(XMLHttpRequest, \"abort\", {\n              ns: _evtNamespace,\n              req: function (callDetails) {\n                if (!_disableAjaxTracking) {\n                  var xhr = callDetails[_DYN_INST /* @min:%2einst */];\n                  var ajaxData = _getAjaxData(xhr, _ajaxDataId);\n                  if (_isMonitoredXhrInstance(xhr, ajaxData) && !ajaxData.xhrMonitoringState[_DYN_ABORT_DONE /* @min:%2eabortDone */]) {\n                    ajaxData[_DYN_ABORTED /* @min:%2eaborted */] = 1;\n                    ajaxData.xhrMonitoringState[_DYN_ABORT_DONE /* @min:%2eabortDone */] = true;\n                  }\n                }\n              },\n              hkErr: _createErrorCallbackFunc(_self, 13 /* _eInternalMessageId.FailedMonitorAjaxAbort */, ERROR_HEADER + \".abort\" + ERROR_POSTFIX)\n            });\n            // Instrument setRequestHeader\n            _hookProto(XMLHttpRequest, \"setRequestHeader\", {\n              ns: _evtNamespace,\n              req: function (callDetails, header, value) {\n                if (!_disableAjaxTracking) {\n                  var xhr = callDetails[_DYN_INST /* @min:%2einst */];\n                  var ajaxData = _getAjaxData(xhr, _ajaxDataId);\n                  if (ajaxData && _isMonitoredXhrInstance(xhr, ajaxData)) {\n                    _addSharedXhrHeaders(xhr, header, value);\n                    if (_enableRequestHeaderTracking && _canIncludeHeaders(header)) {\n                      if (ajaxData) {\n                        ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][header] = value;\n                      }\n                    }\n                  }\n                }\n              },\n              hkErr: _createErrorCallbackFunc(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, ERROR_HEADER + \".setRequestHeader\" + ERROR_POSTFIX)\n            });\n            _xhrInitialized = true;\n          }\n        }));\n      }\n      function _isDisabledRequest(xhr, request, init) {\n        var isDisabled = false;\n        var theUrl = ((!isString(request) ? (request || {}).url || \"\" : request) || \"\")[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\n        // check excludeRequestFromAutoTrackingPatterns before stripping off any query string\n        arrForEach(_excludeRequestFromAutoTrackingPatterns, function (regex) {\n          var theRegex = regex;\n          if (isString(regex)) {\n            theRegex = new RegExp(regex);\n          }\n          if (!isDisabled) {\n            isDisabled = theRegex.test(theUrl);\n          }\n        });\n        // if request url matches with exclude regex pattern, return true and no need to check for headers\n        if (isDisabled) {\n          return isDisabled;\n        }\n        var idx = _indexOf(theUrl, \"?\");\n        var idx2 = _indexOf(theUrl, \"#\");\n        if (idx === -1 || idx2 !== -1 && idx2 < idx) {\n          idx = idx2;\n        }\n        if (idx !== -1) {\n          // Strip off any Query string\n          theUrl = theUrl.substring(0, idx);\n        }\n        // check that this instance is not not used by ajax call performed inside client side monitoring to send data to collector\n        if (!isNullOrUndefined(xhr)) {\n          // Look on the XMLHttpRequest of the URL string value\n          isDisabled = xhr[DisabledPropertyName] === true || theUrl[DisabledPropertyName] === true;\n        } else if (!isNullOrUndefined(request)) {\n          // fetch\n          // Look for DisabledPropertyName in either Request or RequestInit\n          isDisabled = (typeof request === \"object\" ? request[DisabledPropertyName] === true : false) || (init ? init[DisabledPropertyName] === true : false);\n        }\n        // Also add extra check just in case the XHR or fetch objects where not decorated with the DisableProperty due to sealing or freezing\n        if (!isDisabled && theUrl && isInternalApplicationInsightsEndpoint(theUrl)) {\n          isDisabled = true;\n        }\n        if (isDisabled) {\n          // Add the disabled url if not present\n          if (!_disabledUrls[theUrl]) {\n            _disabledUrls[theUrl] = 1;\n          }\n        } else {\n          // Check to see if the url is listed as disabled\n          if (_disabledUrls[theUrl]) {\n            isDisabled = true;\n          }\n        }\n        return isDisabled;\n      }\n      /// <summary>Verifies that particular instance of XMLHttpRequest needs to be monitored</summary>\n      /// <param name=\"excludeAjaxDataValidation\">Optional parameter. True if ajaxData must be excluded from verification</param>\n      /// <returns type=\"bool\">True if instance needs to be monitored, otherwise false</returns>\n      function _isMonitoredXhrInstance(xhr, ajaxData, excludeAjaxDataValidation) {\n        var ajaxValidation = true;\n        var initialized = _xhrInitialized;\n        if (!isNullOrUndefined(xhr)) {\n          ajaxValidation = excludeAjaxDataValidation === true || !isNullOrUndefined(ajaxData);\n        }\n        // checking to see that all interested functions on xhr were instrumented\n        return initialized\n        // checking on ajaxData to see that it was not removed in user code\n        && ajaxValidation;\n      }\n      function _getDistributedTraceCtx() {\n        var distributedTraceCtx = null;\n        if (_self[_DYN_CORE /* @min:%2ecore */] && _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx) {\n          distributedTraceCtx = _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx(false);\n        }\n        // Fall back\n        if (!distributedTraceCtx && _context && _context.telemetryTrace) {\n          distributedTraceCtx = createDistributedTraceContextFromTrace(_context.telemetryTrace);\n        }\n        return distributedTraceCtx;\n      }\n      function _openHandler(xhr, method, url, async) {\n        var _a;\n        var distributedTraceCtx = _getDistributedTraceCtx();\n        var traceID = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */]() || generateW3CId();\n        var spanID = strSubstr(generateW3CId(), 0, 16);\n        var xhrRequestData = xhr[AJAX_DATA_CONTAINER] = xhr[AJAX_DATA_CONTAINER] || {\n          xh: [],\n          i: {}\n        };\n        var ajaxDataCntr = xhrRequestData.i = xhrRequestData.i || {};\n        var ajaxData = ajaxDataCntr[_ajaxDataId] = ajaxDataCntr[_ajaxDataId] || new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a = _self.core) === null || _a === void 0 ? void 0 : _a.getTraceCtx());\n        ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */]();\n        ajaxData[_DYN_METHOD /* @min:%2emethod */] = method;\n        ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = url;\n        ajaxData.xhrMonitoringState[_DYN_OPEN_DONE /* @min:%2eopenDone */] = true;\n        ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = {};\n        ajaxData.async = async;\n        ajaxData[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */] = _enableAjaxErrorStatusText;\n        return ajaxData;\n      }\n      function _attachToOnReadyStateChange(xhr, ajaxData) {\n        ajaxData.xhrMonitoringState[_DYN_STATE_CHANGE_ATTACHE13 /* @min:%2estateChangeAttached */] = eventOn(xhr, \"readystatechange\", function () {\n          var _a;\n          try {\n            if (xhr && xhr.readyState === 4 && _isMonitoredXhrInstance(xhr, ajaxData)) {\n              _onAjaxComplete(xhr);\n            }\n          } catch (e) {\n            var exceptionText = dumpObj(e);\n            // ignore messages with c00c023f, as this a known IE9 XHR abort issue\n            if (!exceptionText || _indexOf(exceptionText[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](), \"c00c023f\") === -1) {\n              _throwInternalCritical(_self, 16 /* _eInternalMessageId.FailedMonitorAjaxRSC */, ERROR_HEADER + \" 'readystatechange' event handler\" + ERROR_POSTFIX, (_a = {}, _a[_DYN_AJAX_DIAGNOSTICS_MES16 /* @min:ajaxDiagnosticsMessage */] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId), _a[_DYN_EXCEPTION /* @min:exception */] = exceptionText, _a));\n            }\n          }\n        }, _evtNamespace);\n      }\n      function _getResponseText(xhr) {\n        try {\n          var responseType = xhr.responseType;\n          if (responseType === \"\" || responseType === \"text\") {\n            // As per the specification responseText is only valid if the type is an empty string or \"text\"\n            return xhr[_DYN_RESPONSE_TEXT /* @min:%2eresponseText */];\n          }\n        } catch (e) {\n          // This shouldn't happen because of the above check -- but just in case, so just ignore\n        }\n        return null;\n      }\n      function _onAjaxComplete(xhr) {\n        var ajaxData = _getAjaxData(xhr, _ajaxDataId);\n        ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */] = dateTimeUtilsNow();\n        ajaxData[_DYN_STATUS /* @min:%2estatus */] = xhr[_DYN_STATUS /* @min:%2estatus */];\n        function _reportXhrError(e, failedProps) {\n          var errorProps = failedProps || {};\n          errorProps[\"ajaxDiagnosticsMessage\"] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId);\n          if (e) {\n            errorProps[\"exception\"] = dumpObj(e);\n          }\n          _throwInternalWarning(_self, 14 /* _eInternalMessageId.FailedMonitorAjaxDur */, FAILED_TO_CALCULATE_DURATION_ERROR + \"ajax call\" + ERROR_NOT_SENT, errorProps);\n        }\n        _findPerfResourceEntry(\"xmlhttprequest\", ajaxData, function () {\n          try {\n            var dependency = ajaxData[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */](\"Ajax\", _enableRequestHeaderTracking, function () {\n              var _a;\n              var ajaxResponse = (_a = {\n                statusText: xhr[_DYN_STATUS_TEXT /* @min:%2estatusText */]\n              }, _a[_DYN_HEADER_MAP /* @min:headerMap */] = null, _a[_DYN_CORRELATION_CONTEXT /* @min:correlationContext */] = _getAjaxCorrelationContext(xhr), _a.type = xhr.responseType, _a[_DYN_RESPONSE_TEXT /* @min:responseText */] = _getResponseText(xhr), _a.response = xhr[_DYN_RESPONSE /* @min:%2eresponse */], _a);\n              if (_enableResponseHeaderTracking) {\n                var headers = xhr[_DYN_GET_ALL_RESPONSE_HEA15 /* @min:%2egetAllResponseHeaders */]();\n                if (headers) {\n                  // xhr.getAllResponseHeaders() method returns all the response headers, separated by CRLF, as a string or null\n                  // the regex converts the header string into an array of individual headers\n                  var arr = strTrim(headers).split(/[\\r\\n]+/);\n                  var responseHeaderMap_2 = {};\n                  arrForEach(arr, function (line) {\n                    var parts = line.split(\": \");\n                    var header = parts.shift();\n                    var value = parts.join(\": \");\n                    if (_canIncludeHeaders(header)) {\n                      responseHeaderMap_2[header] = value;\n                    }\n                  });\n                  ajaxResponse[_DYN_HEADER_MAP /* @min:%2eheaderMap */] = responseHeaderMap_2;\n                }\n              }\n              return ajaxResponse;\n            });\n            var properties = void 0;\n            try {\n              if (!!_addRequestContext) {\n                properties = _addRequestContext({\n                  status: xhr[_DYN_STATUS /* @min:%2estatus */],\n                  xhr: xhr\n                });\n              }\n            } catch (e) {\n              _throwInternalWarning(_self, 104 /* _eInternalMessageId.FailedAddingCustomDefinedRequestContext */, CUSTOM_REQUEST_CONTEXT_ERROR);\n            }\n            if (dependency) {\n              if (properties !== undefined) {\n                dependency[STR_PROPERTIES /* @min:%2eproperties */] = __assign(__assign({}, dependency.properties), properties);\n              }\n              var sysProperties = ajaxData[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */]();\n              _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, dependency, null, sysProperties);\n            } else {\n              _reportXhrError(null, {\n                requestSentTime: ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */],\n                responseFinishedTime: ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */]\n              });\n            }\n          } finally {\n            // cleanup telemetry data\n            try {\n              var xhrRequestData = xhr[AJAX_DATA_CONTAINER] || {\n                i: {}\n              };\n              var ajaxDataCntr = xhrRequestData.i || {};\n              if (ajaxDataCntr[_ajaxDataId]) {\n                ajaxDataCntr[_ajaxDataId] = null;\n              }\n            } catch (e) {\n              // May throw in environments that prevent extension or freeze xhr\n            }\n          }\n        }, function (e) {\n          _reportXhrError(e, null);\n        });\n      }\n      function _getAjaxCorrelationContext(xhr) {\n        var _a;\n        try {\n          var responseHeadersString = xhr[_DYN_GET_ALL_RESPONSE_HEA15 /* @min:%2egetAllResponseHeaders */]();\n          if (responseHeadersString !== null) {\n            var index = _indexOf(responseHeadersString[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](), RequestHeaders[8 /* eRequestHeaders.requestContextHeaderLowerCase */]);\n            if (index !== -1) {\n              var responseHeader = xhr.getResponseHeader(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]);\n              return correlationIdGetCorrelationContext(responseHeader);\n            }\n          }\n        } catch (e) {\n          _throwInternalWarning(_self, 18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, CORRELATION_HEADER_ERROR, (_a = {}, _a[_DYN_AJAX_DIAGNOSTICS_MES16 /* @min:ajaxDiagnosticsMessage */] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId), _a[_DYN_EXCEPTION /* @min:exception */] = dumpObj(e), _a));\n        }\n      }\n      function _createMarkId(type, ajaxData) {\n        if (ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] && _markPrefix && _enableAjaxPerfTracking) {\n          var performance_1 = getPerformance();\n          if (performance_1 && isFunction(performance_1.mark)) {\n            _markCount++;\n            var markId = _markPrefix + type + \"#\" + _markCount;\n            performance_1.mark(markId);\n            var entries = performance_1.getEntriesByName(markId);\n            if (entries && entries[_DYN_LENGTH /* @min:%2elength */] === 1) {\n              ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */] = entries[0];\n            }\n          }\n        }\n      }\n      function _findPerfResourceEntry(initiatorType, ajaxData, trackCallback, reportError) {\n        var perfMark = ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */];\n        var performance = getPerformance();\n        var maxAttempts = _maxAjaxPerfLookupAttempts;\n        var retryDelay = _ajaxPerfLookupDelay;\n        var requestUrl = ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */];\n        var attempt = 0;\n        (function locateResourceTiming() {\n          try {\n            if (performance && perfMark) {\n              attempt++;\n              var perfTiming = null;\n              var entries = performance.getEntries();\n              for (var lp = entries[_DYN_LENGTH /* @min:%2elength */] - 1; lp >= 0; lp--) {\n                var entry = entries[lp];\n                if (entry) {\n                  if (entry.entryType === \"resource\") {\n                    if (entry.initiatorType === initiatorType && (_indexOf(entry[_DYN_NAME /* @min:%2ename */], requestUrl) !== -1 || _indexOf(requestUrl, entry[_DYN_NAME /* @min:%2ename */]) !== -1)) {\n                      perfTiming = entry;\n                    }\n                  } else if (entry.entryType === \"mark\" && entry[_DYN_NAME /* @min:%2ename */] === perfMark[_DYN_NAME /* @min:%2ename */]) {\n                    // We hit the start event\n                    ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */] = perfTiming;\n                    break;\n                  }\n                  if (entry[_DYN_START_TIME /* @min:%2estartTime */] < perfMark[_DYN_START_TIME /* @min:%2estartTime */] - 1000) {\n                    // Fallback to try and reduce the time spent looking for the perf entry\n                    break;\n                  }\n                }\n              }\n            }\n            if (!perfMark ||\n            // - we don't have a perfMark or\n            ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */] ||\n            // - we have not found the perf entry or\n            attempt >= maxAttempts ||\n            // - we have tried too many attempts or\n            ajaxData.async === false) {\n              // - this is a sync request\n              if (perfMark && isFunction(performance.clearMarks)) {\n                // Remove the mark so we don't fill up the performance resources too much\n                performance.clearMarks(perfMark[_DYN_NAME /* @min:%2ename */]);\n              }\n              ajaxData.perfAttempts = attempt;\n              // just continue and report the track event\n              trackCallback();\n            } else {\n              // We need to wait for the browser to populate the window.performance entry\n              // This needs to be at least 1ms as waiting <= 1 (on firefox) is not enough time for fetch or xhr,\n              // this is a scheduling issue for the browser implementation\n              scheduleTimeout(locateResourceTiming, retryDelay);\n            }\n          } catch (e) {\n            reportError(e);\n          }\n        })();\n      }\n      function _createFetchRecord(input, init) {\n        var _a;\n        var distributedTraceCtx = _getDistributedTraceCtx();\n        var traceID = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */]() || generateW3CId();\n        var spanID = strSubstr(generateW3CId(), 0, 16);\n        var ajaxData = new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a = _self.core) === null || _a === void 0 ? void 0 : _a.getTraceCtx());\n        ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */]();\n        ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = dateTimeUtilsNow();\n        ajaxData[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */] = _enableAjaxErrorStatusText;\n        var requestUrl;\n        if (input instanceof Request) {\n          requestUrl = (input || {}).url || \"\";\n        } else {\n          requestUrl = input;\n        }\n        if (requestUrl === \"\") {\n          var location_1 = getLocation();\n          if (location_1 && location_1.href) {\n            requestUrl = strSplit(location_1.href, \"#\")[0];\n          }\n        }\n        ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = requestUrl;\n        var method = \"GET\";\n        if (init && init[_DYN_METHOD /* @min:%2emethod */]) {\n          method = init[_DYN_METHOD /* @min:%2emethod */];\n        } else if (input && input instanceof Request) {\n          method = input[_DYN_METHOD /* @min:%2emethod */];\n        }\n        ajaxData[_DYN_METHOD /* @min:%2emethod */] = method;\n        var requestHeaders = {};\n        if (_enableRequestHeaderTracking) {\n          var headers = new Headers((init ? init[_DYN_HEADERS /* @min:%2eheaders */] : 0) || (input instanceof Request ? input[_DYN_HEADERS /* @min:%2eheaders */] || {} : {}));\n          headers.forEach(function (value, key) {\n            if (_canIncludeHeaders(key)) {\n              requestHeaders[key] = value;\n            }\n          });\n        }\n        ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = requestHeaders;\n        _createMarkId(STR_FETCH, ajaxData);\n        return ajaxData;\n      }\n      function _getFailedFetchDiagnosticsMessage(input) {\n        var result = \"\";\n        try {\n          if (!isNullOrUndefined(input)) {\n            if (typeof input === \"string\") {\n              result += \"(url: '\".concat(input, \"')\");\n            } else {\n              result += \"(url: '\".concat(input.url, \"')\");\n            }\n          }\n        } catch (e) {\n          _throwInternalCritical(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to grab failed fetch diagnostics message\", {\n            exception: dumpObj(e)\n          });\n        }\n        return result;\n      }\n      function _reportFetchMetrics(callDetails, status, input, response, ajaxData, getResponse, properties) {\n        if (!ajaxData) {\n          return;\n        }\n        function _reportFetchError(msgId, e, failedProps) {\n          var errorProps = failedProps || {};\n          errorProps[\"fetchDiagnosticsMessage\"] = _getFailedFetchDiagnosticsMessage(input);\n          if (e) {\n            errorProps[\"exception\"] = dumpObj(e);\n          }\n          _throwInternalWarning(_self, msgId, FAILED_TO_CALCULATE_DURATION_ERROR + \"fetch call\" + ERROR_NOT_SENT, errorProps);\n        }\n        ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */] = dateTimeUtilsNow();\n        ajaxData[_DYN_STATUS /* @min:%2estatus */] = status;\n        _findPerfResourceEntry(STR_FETCH, ajaxData, function () {\n          var dependency = ajaxData[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */](\"Fetch\", _enableRequestHeaderTracking, getResponse);\n          var properties;\n          try {\n            if (!!_addRequestContext) {\n              properties = _addRequestContext({\n                status: status,\n                request: input,\n                response: response\n              });\n            }\n          } catch (e) {\n            _throwInternalWarning(_self, 104 /* _eInternalMessageId.FailedAddingCustomDefinedRequestContext */, CUSTOM_REQUEST_CONTEXT_ERROR);\n          }\n          if (dependency) {\n            if (properties !== undefined) {\n              dependency[STR_PROPERTIES /* @min:%2eproperties */] = __assign(__assign({}, dependency.properties), properties);\n            }\n            var sysProperties = ajaxData[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */]();\n            _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, dependency, null, sysProperties);\n          } else {\n            _reportFetchError(14 /* _eInternalMessageId.FailedMonitorAjaxDur */, null, {\n              requestSentTime: ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */],\n              responseFinishedTime: ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */]\n            });\n          }\n        }, function (e) {\n          _reportFetchError(18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, e, null);\n        });\n      }\n      function _getFetchCorrelationContext(response) {\n        var _a;\n        if (response && response[_DYN_HEADERS /* @min:%2eheaders */]) {\n          try {\n            var responseHeader = response[_DYN_HEADERS /* @min:%2eheaders */].get(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]);\n            return correlationIdGetCorrelationContext(responseHeader);\n          } catch (e) {\n            _throwInternalWarning(_self, 18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, CORRELATION_HEADER_ERROR, (_a = {\n              fetchDiagnosticsMessage: _getFailedFetchDiagnosticsMessage(response)\n            }, _a[_DYN_EXCEPTION /* @min:exception */] = dumpObj(e), _a));\n          }\n        }\n      }\n      function _reportDependencyInternal(initializers, core, ajaxData, dependency, properties, systemProperties) {\n        var _a;\n        var result = true;\n        var initializersCount = initializers[_DYN_LENGTH /* @min:%2elength */];\n        if (initializersCount > 0) {\n          var details = (_a = {\n            item: dependency\n          }, _a[STR_PROPERTIES /* @min:properties */] = properties, _a.sysProperties = systemProperties, _a.context = ajaxData ? ajaxData[_DYN_CONTEXT /* @min:%2econtext */] : null, _a.aborted = ajaxData ? !!ajaxData[_DYN_ABORTED /* @min:%2eaborted */] : false, _a);\n          result = _processDependencyContainer(core, initializers, details, \"initializer\");\n        }\n        if (result) {\n          _self[_DYN_TRACK_DEPENDENCY_DAT3 /* @min:%2etrackDependencyDataInternal */](dependency, properties, systemProperties);\n        }\n      }\n    });\n    return _this;\n  }\n  // Removed Stub for AjaxMonitor.prototype.initialize.\n  AjaxMonitor.prototype.processTelemetry = function (item, itemCtx) {\n    this.processNext(item, itemCtx);\n  };\n  // Removed Stub for AjaxMonitor.prototype.trackDependencyData.\n  // Removed Stub for AjaxMonitor.prototype.includeCorrelationHeaders.\n  // Removed Stub for AjaxMonitor.prototype.addDependencyListener.\n  /**\r\n   * Add an dependency telemetry initializer callback function to allow populating additional properties or drop the request.\r\n   * It is called after the dependency call has completed and any available performance details are available. A dependency\r\n   * initializer is similar to the TelemetryInitializer function but it allows you to block the reporting of the dependency\r\n   * request so that it doesn't count against the `maxAjaxCallsPerView`.\r\n   * @param dependencyInitializer - The Dependency Telemetry Initializer function\r\n   * @returns - A IDependencyInitializerHandler to enable the initializer to be removed\r\n   */\n  AjaxMonitor.prototype.addDependencyInitializer = function (dependencyInitializer) {\n    return null;\n  };\n  // Removed Stub for AjaxMonitor.prototype.trackDependencyDataInternal.\n  AjaxMonitor.identifier = \"AjaxDependencyPlugin\";\n  return AjaxMonitor;\n}(BaseTelemetryPlugin);\nexport { AjaxMonitor };","map":{"version":3,"names":["_a","__assignFn","__assign","__extendsFn","__extends","dynamicProto","DisabledPropertyName","PropertiesPluginIdentifier","RemoteDependencyData","RequestHeaders","correlationIdCanIncludeCorrelationHeader","correlationIdGetCorrelationContext","createDistributedTraceContextFromTrace","createTelemetryItem","createTraceParent","dateTimeUtilsNow","formatTraceParent","isInternalApplicationInsightsEndpoint","BaseTelemetryPlugin","InstrumentFunc","InstrumentProto","_throwInternal","arrForEach","createProcessTelemetryContext","createUniqueNamespace","dumpObj","eventOn","generateW3CId","getExceptionName","getGlobal","getIEVersion","getLocation","getPerformance","isFunction","isNullOrUndefined","isString","isXhrSupported","mergeEvtNamespace","onConfigChange","strPrototype","strTrim","isWebWorker","objFreeze","scheduleTimeout","strIndexOf","strSplit","strSubstr","STR_PROPERTIES","_DYN_ABORTED","_DYN_ABORT_DONE","_DYN_ADD_REQUEST_CONTEXT","_DYN_AJAX_DIAGNOSTICS_MES16","_DYN_AJAX_PERF_LOOKUP_DEL10","_DYN_CONTEXT","_DYN_CORE","_DYN_CORRELATION_CONTEXT","_DYN_DISABLE_AJAX_TRACKIN9","_DYN_DISABLE_FETCH_TRACKI11","_DYN_ENABLE_AJAX_ERROR_ST5","_DYN_ENABLE_AJAX_PERF_TRA6","_DYN_ENABLE_REQUEST_HEADE4","_DYN_ENABLE_RESPONSE_HEAD12","_DYN_ERROR_STATUS_TEXT","_DYN_EXCEPTION","_DYN_EXCLUDE_REQUEST_FROM8","_DYN_GET_ABSOLUTE_URL","_DYN_GET_ALL_RESPONSE_HEA15","_DYN_GET_PART_APROPS","_DYN_GET_TRACE_FLAGS","_DYN_GET_TRACE_ID","_DYN_HEADERS","_DYN_HEADER_MAP","_DYN_INCLUDE_CORRELATION_2","_DYN_INST","_DYN_LENGTH","_DYN_MAX_AJAX_CALLS_PER_V7","_DYN_METHOD","_DYN_NAME","_DYN_OPEN_DONE","_DYN_PERF_MARK","_DYN_PERF_TIMING","_DYN_REQUEST_HEADERS","_DYN_REQUEST_SENT_TIME","_DYN_REQUEST_URL","_DYN_RESPONSE","_DYN_RESPONSE_FINISHED_TI14","_DYN_RESPONSE_TEXT","_DYN_SEND_DONE","_DYN_SET_REQUEST_HEADER","_DYN_SPAN_ID","_DYN_SPAN_ID1","_DYN_START_TIME","_DYN_STATE_CHANGE_ATTACHE13","_DYN_STATUS","_DYN_STATUS_TEXT","_DYN_TO_LOWER_CASE","_DYN_TRACE_FLAGS","_DYN_TRACE_ID","_DYN_TRACE_ID0","_DYN_TRACK_DEPENDENCY_DAT3","_DYN__ADD_HOOK","_DYN__CREATE_TRACK_ITEM","ajaxRecord","AJAX_MONITOR_PREFIX","strDiagLog","AJAX_DATA_CONTAINER","STR_FETCH","ERROR_HEADER","ERROR_PREFIX","ERROR_POSTFIX","ERROR_NOT_SENT","CORRELATION_HEADER_ERROR","CUSTOM_REQUEST_CONTEXT_ERROR","FAILED_TO_CALCULATE_DURATION_ERROR","_markCount","_supportsFetch","_global","Request","_supportsAjaxMonitoring","ajaxMonitorInstance","ajaxDataId","_b","result","proto","XMLHttpRequest","open","send","abort","ieVer","xhr","xhrData","xh","i","theOpen","e","_throwInternalCritical","_getAjaxData","_addSharedXhrHeaders","name","value","headers","push","n","v","_isHeaderSet","isPresent","header","_getFailedAjaxDiagnosticsMessage","ajaxData","msgId","message","properties","isUserAct","_throwInternalWarning","_createErrorCallbackFunc","internalMessage","callDetails","ajaxDiagnosticsMessage","_ajaxDataId","err","_indexOf","match","_addHandler","container","id","theFunc","theHandler","fn","remove","initializer","idx","splice","_processDependencyContainer","core","details","call","logger","exception","_processDependencyListeners","listeners","input","init","initializersCount","traceId","spanId","traceFlags","context","aborted","BLOB_CORE","DfltAjaxCorrelationHeaderExDomains","_internalExcludeEndpoints","_defaultConfig","undefined","disableCorrelationHeaders","distributedTracingMode","correlationHeaderExcludedDomains","correlationHeaderDomains","correlationHeaderExcludePatterns","appId","enableCorsCorrelation","maxAjaxPerfLookupAttempts","ignoreHeaders","addIntEndpoints","AjaxMonitor","_super","_this","identifier","priority","_fetchInitialized","_xhrInitialized","_currentWindowHost","_extensionConfig","_enableRequestHeaderTracking","_enableAjaxErrorStatusText","_trackAjaxAttempts","_context","_isUsingW3CHeaders","_isUsingAIHeaders","_markPrefix","_enableAjaxPerfTracking","_maxAjaxCallsPerView","_enableResponseHeaderTracking","_disabledUrls","_disableAjaxTracking","_disableFetchTracking","_excludeRequestFromAutoTrackingPatterns","_addRequestContext","_evtNamespace","_dependencyHandlerId","_dependencyListeners","_dependencyInitializers","_ignoreHeaders","_maxAjaxPerfLookupAttempts","_ajaxPerfLookupDelay","_distributedTracingMode","_appId","_polyfillInitialized","_self","_base","_addHook","_initDefaults","initialize","config","extensions","pluginChain","isInitialized","evtNamespace","_populateDefaults","_instrumentXhr","_instrumentFetch","_populateContext","_doTeardown","trackDependencyData","dependency","_reportDependencyInternal","currentWindowHost","Headers","set","traceParent","systemProperties","Date","item","dataType","envelopeType","track","addDependencyListener","dependencyListener","addDependencyInitializer","dependencyInitializer","location","host","cfg","ctx","getExtCfg","concat","propExt","getPlugin","plugin","_canIncludeHeaders","rlt","key","fetch","global","isPolyfill","polyfill","ns","req","fetchData","_isDisabledRequest","_createFetchRecord","newInit","data","rsp","fetchData_1","rslt","then","response","_reportFetchMetrics","ajaxResponse","statusText","_getFetchCorrelationContext","responseHeaderMap_1","forEach","catch","reason","error","hkErr","_hookProto","target","funcName","callbacks","method","url","async","_isMonitoredXhrInstance","xhrMonitoringState","_openHandler","_attachToOnReadyStateChange","_createMarkId","request","isDisabled","theUrl","regex","theRegex","RegExp","test","idx2","substring","excludeAjaxDataValidation","ajaxValidation","initialized","_getDistributedTraceCtx","distributedTraceCtx","getTraceCtx","telemetryTrace","traceID","spanID","xhrRequestData","ajaxDataCntr","readyState","_onAjaxComplete","exceptionText","_getResponseText","responseType","_reportXhrError","failedProps","errorProps","_findPerfResourceEntry","_getAjaxCorrelationContext","type","arr","split","responseHeaderMap_2","line","parts","shift","join","status","sysProperties","requestSentTime","responseFinishedTime","responseHeadersString","index","responseHeader","getResponseHeader","performance_1","mark","markId","entries","getEntriesByName","initiatorType","trackCallback","reportError","perfMark","performance","maxAttempts","retryDelay","requestUrl","attempt","locateResourceTiming","perfTiming","getEntries","lp","entry","entryType","clearMarks","perfAttempts","location_1","href","requestHeaders","_getFailedFetchDiagnosticsMessage","getResponse","_reportFetchError","get","fetchDiagnosticsMessage","initializers","prototype","processTelemetry","itemCtx","processNext"],"sources":["/home/veeresh133/app/react-az/node_modules/@microsoft/applicationinsights-dependencies-js/dist-es5/ajax.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar _a;\r\nimport { __assign, __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { DisabledPropertyName, PropertiesPluginIdentifier, RemoteDependencyData, RequestHeaders, correlationIdCanIncludeCorrelationHeader, correlationIdGetCorrelationContext, createDistributedTraceContextFromTrace, createTelemetryItem, createTraceParent, dateTimeUtilsNow, formatTraceParent, isInternalApplicationInsightsEndpoint } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, InstrumentFunc, InstrumentProto, _throwInternal, arrForEach, createProcessTelemetryContext, createUniqueNamespace, dumpObj, eventOn, generateW3CId, getExceptionName, getGlobal, getIEVersion, getLocation, getPerformance, isFunction, isNullOrUndefined, isString, isXhrSupported, mergeEvtNamespace, onConfigChange, strPrototype, strTrim } from \"@microsoft/applicationinsights-core-js\";\r\nimport { isWebWorker, objFreeze, scheduleTimeout, strIndexOf, strSplit, strSubstr } from \"@nevware21/ts-utils\";\r\nimport { STR_PROPERTIES } from \"./InternalConstants\";\r\nimport { _DYN_ABORTED, _DYN_ABORT_DONE, _DYN_ADD_REQUEST_CONTEXT, _DYN_AJAX_DIAGNOSTICS_MES16, _DYN_AJAX_PERF_LOOKUP_DEL10, _DYN_CONTEXT, _DYN_CORE, _DYN_CORRELATION_CONTEXT, _DYN_DISABLE_AJAX_TRACKIN9, _DYN_DISABLE_FETCH_TRACKI11, _DYN_ENABLE_AJAX_ERROR_ST5, _DYN_ENABLE_AJAX_PERF_TRA6, _DYN_ENABLE_REQUEST_HEADE4, _DYN_ENABLE_RESPONSE_HEAD12, _DYN_ERROR_STATUS_TEXT, _DYN_EXCEPTION, _DYN_EXCLUDE_REQUEST_FROM8, _DYN_GET_ABSOLUTE_URL, _DYN_GET_ALL_RESPONSE_HEA15, _DYN_GET_PART_APROPS, _DYN_GET_TRACE_FLAGS, _DYN_GET_TRACE_ID, _DYN_HEADERS, _DYN_HEADER_MAP, _DYN_INCLUDE_CORRELATION_2, _DYN_INST, _DYN_LENGTH, _DYN_MAX_AJAX_CALLS_PER_V7, _DYN_METHOD, _DYN_NAME, _DYN_OPEN_DONE, _DYN_PERF_MARK, _DYN_PERF_TIMING, _DYN_REQUEST_HEADERS, _DYN_REQUEST_SENT_TIME, _DYN_REQUEST_URL, _DYN_RESPONSE, _DYN_RESPONSE_FINISHED_TI14, _DYN_RESPONSE_TEXT, _DYN_SEND_DONE, _DYN_SET_REQUEST_HEADER, _DYN_SPAN_ID, _DYN_SPAN_ID1, _DYN_START_TIME, _DYN_STATE_CHANGE_ATTACHE13, _DYN_STATUS, _DYN_STATUS_TEXT, _DYN_TO_LOWER_CASE, _DYN_TRACE_FLAGS, _DYN_TRACE_ID, _DYN_TRACE_ID0, _DYN_TRACK_DEPENDENCY_DAT3, _DYN__ADD_HOOK, _DYN__CREATE_TRACK_ITEM } from \"./__DynamicConstants\";\r\nimport { ajaxRecord } from \"./ajaxRecord\";\r\nvar AJAX_MONITOR_PREFIX = \"ai.ajxmn.\";\r\nvar strDiagLog = \"diagLog\";\r\nvar AJAX_DATA_CONTAINER = \"_ajaxData\";\r\nvar STR_FETCH = \"fetch\";\r\nvar ERROR_HEADER = \"Failed to monitor XMLHttpRequest\";\r\nvar ERROR_PREFIX = \", monitoring data for this ajax call \";\r\nvar ERROR_POSTFIX = ERROR_PREFIX + \"may be incorrect.\";\r\nvar ERROR_NOT_SENT = ERROR_PREFIX + \"won't be sent.\";\r\nvar CORRELATION_HEADER_ERROR = \"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.\";\r\nvar CUSTOM_REQUEST_CONTEXT_ERROR = \"Failed to add custom defined request context as configured call back may missing a null check.\";\r\nvar FAILED_TO_CALCULATE_DURATION_ERROR = \"Failed to calculate the duration of the \";\r\n// Using a global value so that to handle same iKey with multiple app insights instances (mostly for testing)\r\nvar _markCount = 0;\r\n/** @Ignore */\r\nfunction _supportsFetch() {\r\n    var _global = getGlobal();\r\n    if (!_global ||\r\n        isNullOrUndefined(_global.Request) ||\r\n        isNullOrUndefined(_global.Request[strPrototype]) ||\r\n        isNullOrUndefined(_global[STR_FETCH])) {\r\n        return null;\r\n    }\r\n    return _global[STR_FETCH];\r\n}\r\n/**\r\n * Determines whether ajax monitoring can be enabled on this document\r\n * @returns True if Ajax monitoring is supported on this page, otherwise false\r\n * @ignore\r\n */\r\nfunction _supportsAjaxMonitoring(ajaxMonitorInstance, ajaxDataId) {\r\n    var _a, _b;\r\n    var result = false;\r\n    if (isXhrSupported()) {\r\n        var proto = XMLHttpRequest[strPrototype];\r\n        result = !isNullOrUndefined(proto) &&\r\n            !isNullOrUndefined(proto.open) && // eslint-disable-line security/detect-non-literal-fs-filename -- false positive\r\n            !isNullOrUndefined(proto.send) &&\r\n            !isNullOrUndefined(proto.abort);\r\n    }\r\n    var ieVer = getIEVersion();\r\n    if (ieVer && ieVer < 9) {\r\n        result = false;\r\n    }\r\n    if (result) {\r\n        // Disable if the XmlHttpRequest can't be extended or hooked\r\n        try {\r\n            var xhr = new XMLHttpRequest();\r\n            var xhrData = {\r\n                xh: [],\r\n                i: (_a = {},\r\n                    _a[ajaxDataId] = {},\r\n                    _a)\r\n            };\r\n            xhr[AJAX_DATA_CONTAINER] = xhrData;\r\n            // Check that we can update the prototype\r\n            var theOpen = XMLHttpRequest[strPrototype].open;\r\n            XMLHttpRequest[strPrototype].open = theOpen;\r\n        }\r\n        catch (e) {\r\n            // We can't decorate the xhr object so disable monitoring\r\n            result = false;\r\n            _throwInternalCritical(ajaxMonitorInstance, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to enable XMLHttpRequest monitoring, extension is not supported\", (_b = {},\r\n                _b[_DYN_EXCEPTION /* @min:exception */] = dumpObj(e),\r\n                _b));\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Internal helper to fetch the SDK instance tracking data for this XHR request\r\n * @param xhr\r\n * @param ajaxDataId\r\n * @returns\r\n */\r\nvar _getAjaxData = function (xhr, ajaxDataId) {\r\n    if (xhr && ajaxDataId && xhr[AJAX_DATA_CONTAINER]) {\r\n        return (xhr[AJAX_DATA_CONTAINER].i || {})[ajaxDataId];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * @ignore\r\n * Internal helper to track the singleton shared tracking headers, so we can attempt to not create headers\r\n * that might cause an issue if multiple values are populated.\r\n * @param xhr - The instrumented XHR instance\r\n */\r\nvar _addSharedXhrHeaders = function (xhr, name, value) {\r\n    if (xhr) {\r\n        var headers = (xhr[AJAX_DATA_CONTAINER] || {}).xh;\r\n        if (headers) {\r\n            headers.push({\r\n                n: name,\r\n                v: value\r\n            });\r\n        }\r\n    }\r\n};\r\nvar _isHeaderSet = function (xhr, name) {\r\n    var isPresent = false;\r\n    if (xhr) {\r\n        var headers = (xhr[AJAX_DATA_CONTAINER] || {}).xh;\r\n        if (headers) {\r\n            arrForEach(headers, function (header) {\r\n                if (header.n === name) {\r\n                    isPresent = true;\r\n                    return -1;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    return isPresent;\r\n};\r\n/** @Ignore */\r\nfunction _getFailedAjaxDiagnosticsMessage(xhr, ajaxDataId) {\r\n    var result = \"\";\r\n    try {\r\n        var ajaxData = _getAjaxData(xhr, ajaxDataId);\r\n        if (ajaxData && ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */]) {\r\n            result += \"(url: '\" + ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] + \"')\";\r\n        }\r\n    }\r\n    catch (e) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    return result;\r\n}\r\n/** @ignore */\r\nfunction _throwInternalCritical(ajaxMonitorInstance, msgId, message, properties, isUserAct) {\r\n    _throwInternal(ajaxMonitorInstance[strDiagLog](), 1 /* eLoggingSeverity.CRITICAL */, msgId, message, properties, isUserAct);\r\n}\r\n/** @ignore */\r\nfunction _throwInternalWarning(ajaxMonitorInstance, msgId, message, properties, isUserAct) {\r\n    _throwInternal(ajaxMonitorInstance[strDiagLog](), 2 /* eLoggingSeverity.WARNING */, msgId, message, properties, isUserAct);\r\n}\r\n/** @Ignore */\r\nfunction _createErrorCallbackFunc(ajaxMonitorInstance, internalMessage, message) {\r\n    // tslint:disable-next-line\r\n    return function (callDetails) {\r\n        var _a;\r\n        _throwInternalCritical(ajaxMonitorInstance, internalMessage, message, (_a = {\r\n                ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(callDetails[_DYN_INST /* @min:%2einst */], ajaxMonitorInstance._ajaxDataId)\r\n            },\r\n            _a[_DYN_EXCEPTION /* @min:exception */] = dumpObj(callDetails.err),\r\n            _a));\r\n    };\r\n}\r\nfunction _indexOf(value, match) {\r\n    if (value && match) {\r\n        return strIndexOf(value, match);\r\n    }\r\n    return -1;\r\n}\r\nfunction _addHandler(container, id, theFunc) {\r\n    var theHandler = {\r\n        id: id,\r\n        fn: theFunc\r\n    };\r\n    container.push(theHandler);\r\n    return {\r\n        remove: function () {\r\n            arrForEach(container, function (initializer, idx) {\r\n                if (initializer.id === theHandler.id) {\r\n                    container.splice(idx, 1);\r\n                    return -1;\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\nfunction _processDependencyContainer(core, container, details, message) {\r\n    var result = true;\r\n    arrForEach(container, function (theFunc, idx) {\r\n        try {\r\n            if (theFunc.fn.call(null, details) === false) {\r\n                result = false;\r\n            }\r\n        }\r\n        catch (e) {\r\n            _throwInternal(core && core.logger, 1 /* eLoggingSeverity.CRITICAL */, 64 /* _eInternalMessageId.TelemetryInitializerFailed */, \"Dependency \" + message + \" [#\" + idx + \"] failed: \" + getExceptionName(e), { exception: dumpObj(e) }, true);\r\n        }\r\n    });\r\n    return result;\r\n}\r\nfunction _processDependencyListeners(listeners, core, ajaxData, xhr, input, init) {\r\n    var _a;\r\n    var initializersCount = listeners[_DYN_LENGTH /* @min:%2elength */];\r\n    if (initializersCount > 0) {\r\n        var details = (_a = {},\r\n            _a[_DYN_CORE /* @min:core */] = core,\r\n            _a.xhr = xhr,\r\n            _a.input = input,\r\n            _a.init = init,\r\n            _a.traceId = ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */],\r\n            _a.spanId = ajaxData[_DYN_SPAN_ID /* @min:%2espanID */],\r\n            _a.traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */],\r\n            _a.context = ajaxData[_DYN_CONTEXT /* @min:%2econtext */] || {},\r\n            _a.aborted = !!ajaxData[_DYN_ABORTED /* @min:%2eaborted */],\r\n            _a);\r\n        _processDependencyContainer(core, listeners, details, \"listener\");\r\n        ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] = details[_DYN_TRACE_ID0 /* @min:%2etraceId */];\r\n        ajaxData[_DYN_SPAN_ID /* @min:%2espanID */] = details[_DYN_SPAN_ID1 /* @min:%2espanId */];\r\n        ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = details[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n        ajaxData[_DYN_CONTEXT /* @min:%2econtext */] = details[_DYN_CONTEXT /* @min:%2econtext */];\r\n    }\r\n}\r\nvar BLOB_CORE = \"*.blob.core.\";\r\nexport var DfltAjaxCorrelationHeaderExDomains = objFreeze([\r\n    BLOB_CORE + \"windows.net\",\r\n    BLOB_CORE + \"chinacloudapi.cn\",\r\n    BLOB_CORE + \"cloudapi.de\",\r\n    BLOB_CORE + \"usgovcloudapi.net\"\r\n]);\r\nvar _internalExcludeEndpoints = [\r\n    /https:\\/\\/[^\\/]*(\\.pipe\\.aria|aria\\.pipe|events\\.data|collector\\.azure)\\.[^\\/]+\\/(OneCollector\\/1|Collector\\/3)\\.0/i\r\n];\r\nvar _defaultConfig = objFreeze((_a = {},\r\n    _a[_DYN_MAX_AJAX_CALLS_PER_V7 /* @min:maxAjaxCallsPerView */] = 500,\r\n    _a[_DYN_DISABLE_AJAX_TRACKIN9 /* @min:disableAjaxTracking */] = false,\r\n    _a[_DYN_DISABLE_FETCH_TRACKI11 /* @min:disableFetchTracking */] = false,\r\n    _a[_DYN_EXCLUDE_REQUEST_FROM8 /* @min:excludeRequestFromAutoTrackingPatterns */] = undefined,\r\n    _a.disableCorrelationHeaders = false,\r\n    _a.distributedTracingMode = 1 /* eDistributedTracingModes.AI_AND_W3C */,\r\n    _a.correlationHeaderExcludedDomains = DfltAjaxCorrelationHeaderExDomains,\r\n    _a.correlationHeaderDomains = undefined,\r\n    _a.correlationHeaderExcludePatterns = undefined,\r\n    _a.appId = undefined,\r\n    _a.enableCorsCorrelation = false,\r\n    _a[_DYN_ENABLE_REQUEST_HEADE4 /* @min:enableRequestHeaderTracking */] = false,\r\n    _a[_DYN_ENABLE_RESPONSE_HEAD12 /* @min:enableResponseHeaderTracking */] = false,\r\n    _a[_DYN_ENABLE_AJAX_ERROR_ST5 /* @min:enableAjaxErrorStatusText */] = false,\r\n    _a[_DYN_ENABLE_AJAX_PERF_TRA6 /* @min:enableAjaxPerfTracking */] = false,\r\n    _a.maxAjaxPerfLookupAttempts = 3,\r\n    _a[_DYN_AJAX_PERF_LOOKUP_DEL10 /* @min:ajaxPerfLookupDelay */] = 25,\r\n    _a.ignoreHeaders = [\r\n        \"Authorization\",\r\n        \"X-API-Key\",\r\n        \"WWW-Authenticate\"\r\n    ],\r\n    _a[_DYN_ADD_REQUEST_CONTEXT /* @min:addRequestContext */] = undefined,\r\n    _a.addIntEndpoints = true,\r\n    _a));\r\nvar AjaxMonitor = /** @class */ (function (_super) {\r\n    __extends(AjaxMonitor, _super);\r\n    function AjaxMonitor() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = AjaxMonitor.identifier;\r\n        _this.priority = 120;\r\n        var _fetchInitialized; // fetch monitoring initialized\r\n        var _xhrInitialized; // XHR monitoring initialized\r\n        var _currentWindowHost;\r\n        var _extensionConfig;\r\n        var _enableRequestHeaderTracking;\r\n        var _enableAjaxErrorStatusText;\r\n        var _trackAjaxAttempts;\r\n        var _context;\r\n        var _isUsingW3CHeaders;\r\n        var _isUsingAIHeaders;\r\n        var _markPrefix;\r\n        var _enableAjaxPerfTracking;\r\n        var _maxAjaxCallsPerView;\r\n        var _enableResponseHeaderTracking;\r\n        var _disabledUrls;\r\n        var _disableAjaxTracking;\r\n        var _disableFetchTracking;\r\n        var _excludeRequestFromAutoTrackingPatterns;\r\n        var _addRequestContext;\r\n        var _evtNamespace;\r\n        var _ajaxDataId;\r\n        var _dependencyHandlerId;\r\n        var _dependencyListeners;\r\n        var _dependencyInitializers;\r\n        var _ignoreHeaders;\r\n        var _maxAjaxPerfLookupAttempts;\r\n        var _ajaxPerfLookupDelay;\r\n        var _distributedTracingMode;\r\n        var _appId;\r\n        var _polyfillInitialized;\r\n        dynamicProto(AjaxMonitor, _this, function (_self, _base) {\r\n            var _addHook = _base[_DYN__ADD_HOOK /* @min:%2e_addHook */];\r\n            _initDefaults();\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                if (!_self.isInitialized()) {\r\n                    _base.initialize(config, core, extensions, pluginChain);\r\n                    _evtNamespace = mergeEvtNamespace(createUniqueNamespace(\"ajax\"), core && core.evtNamespace && core.evtNamespace());\r\n                    _populateDefaults(config);\r\n                    _instrumentXhr();\r\n                    _instrumentFetch();\r\n                    _populateContext();\r\n                }\r\n            };\r\n            _self._doTeardown = function () {\r\n                _initDefaults();\r\n            };\r\n            _self.trackDependencyData = function (dependency, properties) {\r\n                _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], null, dependency, properties);\r\n            };\r\n            _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */] = function (ajaxData, input, init, xhr) {\r\n                // Test Hook to allow the overriding of the location host\r\n                var currentWindowHost = _self[\"_currentWindowHost\"] || _currentWindowHost;\r\n                _processDependencyListeners(_dependencyListeners, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, xhr, input, init);\r\n                if (input || input === \"\") { // Fetch\r\n                    if (correlationIdCanIncludeCorrelationHeader(_extensionConfig, ajaxData[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */](), currentWindowHost)) {\r\n                        if (!init) {\r\n                            init = {};\r\n                        }\r\n                        // init headers override original request headers\r\n                        // so, if they exist use only them, otherwise use request's because they should have been applied in the first place\r\n                        // not using original request headers will result in them being lost\r\n                        var headers = new Headers(init[_DYN_HEADERS /* @min:%2eheaders */] || (input instanceof Request ? (input[_DYN_HEADERS /* @min:%2eheaders */] || {}) : {}));\r\n                        if (_isUsingAIHeaders) {\r\n                            var id = \"|\" + ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + ajaxData[_DYN_SPAN_ID /* @min:%2espanID */];\r\n                            headers.set(RequestHeaders[3 /* eRequestHeaders.requestIdHeader */], id);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[3 /* eRequestHeaders.requestIdHeader */]] = id;\r\n                            }\r\n                        }\r\n                        var appId = _appId || (_context && _context.appId());\r\n                        if (appId) {\r\n                            headers.set(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */], RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]] = RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId;\r\n                            }\r\n                        }\r\n                        if (_isUsingW3CHeaders) {\r\n                            var traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n                            if (isNullOrUndefined(traceFlags)) {\r\n                                traceFlags = 0x01;\r\n                            }\r\n                            var traceParent = formatTraceParent(createTraceParent(ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */], ajaxData[_DYN_SPAN_ID /* @min:%2espanID */], traceFlags));\r\n                            headers.set(RequestHeaders[4 /* eRequestHeaders.traceParentHeader */], traceParent);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[4 /* eRequestHeaders.traceParentHeader */]] = traceParent;\r\n                            }\r\n                        }\r\n                        init[_DYN_HEADERS /* @min:%2eheaders */] = headers;\r\n                    }\r\n                    return init;\r\n                }\r\n                else if (xhr) { // XHR\r\n                    if (correlationIdCanIncludeCorrelationHeader(_extensionConfig, ajaxData[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */](), currentWindowHost)) {\r\n                        if (_isUsingAIHeaders) {\r\n                            if (!_isHeaderSet(xhr, RequestHeaders[3 /* eRequestHeaders.requestIdHeader */])) {\r\n                                var id = \"|\" + ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + ajaxData[_DYN_SPAN_ID /* @min:%2espanID */];\r\n                                xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[3 /* eRequestHeaders.requestIdHeader */], id);\r\n                                if (_enableRequestHeaderTracking) {\r\n                                    ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[3 /* eRequestHeaders.requestIdHeader */]] = id;\r\n                                }\r\n                            }\r\n                            else {\r\n                                _throwInternalWarning(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, \"Unable to set [\" + RequestHeaders[3 /* eRequestHeaders.requestIdHeader */] + \"] as it has already been set by another instance\");\r\n                            }\r\n                        }\r\n                        var appId = _appId || (_context && _context.appId());\r\n                        if (appId) {\r\n                            if (!_isHeaderSet(xhr, RequestHeaders[0 /* eRequestHeaders.requestContextHeader */])) {\r\n                                xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[0 /* eRequestHeaders.requestContextHeader */], RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId);\r\n                                if (_enableRequestHeaderTracking) {\r\n                                    ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]] = RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId;\r\n                                }\r\n                            }\r\n                            else {\r\n                                _throwInternalWarning(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, \"Unable to set [\" + RequestHeaders[0 /* eRequestHeaders.requestContextHeader */] + \"] as it has already been set by another instance\");\r\n                            }\r\n                        }\r\n                        if (_isUsingW3CHeaders) {\r\n                            var traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n                            if (isNullOrUndefined(traceFlags)) {\r\n                                traceFlags = 0x01;\r\n                            }\r\n                            if (!_isHeaderSet(xhr, RequestHeaders[4 /* eRequestHeaders.traceParentHeader */])) {\r\n                                var traceParent = formatTraceParent(createTraceParent(ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */], ajaxData[_DYN_SPAN_ID /* @min:%2espanID */], traceFlags));\r\n                                xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[4 /* eRequestHeaders.traceParentHeader */], traceParent);\r\n                                if (_enableRequestHeaderTracking) {\r\n                                    ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[4 /* eRequestHeaders.traceParentHeader */]] = traceParent;\r\n                                }\r\n                            }\r\n                            else {\r\n                                _throwInternalWarning(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, \"Unable to set [\" + RequestHeaders[4 /* eRequestHeaders.traceParentHeader */] + \"] as it has already been set by another instance\");\r\n                            }\r\n                        }\r\n                    }\r\n                    return xhr;\r\n                }\r\n                return undefined;\r\n            };\r\n            _self[_DYN_TRACK_DEPENDENCY_DAT3 /* @min:%2etrackDependencyDataInternal */] = function (dependency, properties, systemProperties) {\r\n                if (_maxAjaxCallsPerView === -1 || _trackAjaxAttempts < _maxAjaxCallsPerView) {\r\n                    // Hack since expected format in w3c mode is |abc.def.\r\n                    // Non-w3c format is |abc.def\r\n                    // @todo Remove if better solution is available, e.g. handle in portal\r\n                    if ((_distributedTracingMode === 2 /* eDistributedTracingModes.W3C */\r\n                        || _distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */)\r\n                        && typeof dependency.id === \"string\" && dependency.id[dependency.id[_DYN_LENGTH /* @min:%2elength */] - 1] !== \".\") {\r\n                        dependency.id += \".\";\r\n                    }\r\n                    if (isNullOrUndefined(dependency[_DYN_START_TIME /* @min:%2estartTime */])) {\r\n                        dependency[_DYN_START_TIME /* @min:%2estartTime */] = new Date();\r\n                    }\r\n                    var item = createTelemetryItem(dependency, RemoteDependencyData.dataType, RemoteDependencyData.envelopeType, _self[strDiagLog](), properties, systemProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */].track(item);\r\n                }\r\n                else if (_trackAjaxAttempts === _maxAjaxCallsPerView) {\r\n                    _throwInternalCritical(_self, 55 /* _eInternalMessageId.MaxAjaxPerPVExceeded */, \"Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.\", true);\r\n                }\r\n                ++_trackAjaxAttempts;\r\n            };\r\n            _self.addDependencyListener = function (dependencyListener) {\r\n                return _addHandler(_dependencyListeners, _dependencyHandlerId++, dependencyListener);\r\n            };\r\n            _self.addDependencyInitializer = function (dependencyInitializer) {\r\n                return _addHandler(_dependencyInitializers, _dependencyHandlerId++, dependencyInitializer);\r\n            };\r\n            function _initDefaults() {\r\n                var location = getLocation();\r\n                _fetchInitialized = false; // fetch monitoring initialized\r\n                _xhrInitialized = false; // XHR monitoring initialized\r\n                _polyfillInitialized = false; // polyfill monitoring initialized\r\n                _currentWindowHost = location && location.host && location.host[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n                _extensionConfig = null;\r\n                _enableRequestHeaderTracking = false;\r\n                _enableAjaxErrorStatusText = false;\r\n                _trackAjaxAttempts = 0;\r\n                _context = null;\r\n                _isUsingW3CHeaders = false;\r\n                _isUsingAIHeaders = false;\r\n                _markPrefix = null;\r\n                _enableAjaxPerfTracking = false;\r\n                _maxAjaxCallsPerView = 0;\r\n                _enableResponseHeaderTracking = false;\r\n                _disabledUrls = {};\r\n                _disableAjaxTracking = false;\r\n                _disableFetchTracking = false;\r\n                _excludeRequestFromAutoTrackingPatterns = null;\r\n                _addRequestContext = null;\r\n                _evtNamespace = null;\r\n                _dependencyHandlerId = 0;\r\n                _dependencyListeners = [];\r\n                _dependencyInitializers = [];\r\n                _ajaxDataId = createUniqueNamespace(\"ajaxData\");\r\n                _self._ajaxDataId = _ajaxDataId;\r\n                _ignoreHeaders = null;\r\n                _maxAjaxPerfLookupAttempts = 1;\r\n                _ajaxPerfLookupDelay = 1;\r\n                _distributedTracingMode = 1 /* eDistributedTracingModes.AI_AND_W3C */;\r\n                _appId = null;\r\n            }\r\n            function _populateDefaults(config) {\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(config, function (details) {\r\n                    var config = details.cfg;\r\n                    var ctx = createProcessTelemetryContext(null, config, _self[_DYN_CORE /* @min:%2ecore */]);\r\n                    _extensionConfig = ctx.getExtCfg(AjaxMonitor.identifier, _defaultConfig);\r\n                    _distributedTracingMode = _extensionConfig.distributedTracingMode;\r\n                    _enableRequestHeaderTracking = _extensionConfig[_DYN_ENABLE_REQUEST_HEADE4 /* @min:%2eenableRequestHeaderTracking */];\r\n                    _enableAjaxErrorStatusText = _extensionConfig[_DYN_ENABLE_AJAX_ERROR_ST5 /* @min:%2eenableAjaxErrorStatusText */];\r\n                    _enableAjaxPerfTracking = _extensionConfig[_DYN_ENABLE_AJAX_PERF_TRA6 /* @min:%2eenableAjaxPerfTracking */];\r\n                    _maxAjaxCallsPerView = _extensionConfig[_DYN_MAX_AJAX_CALLS_PER_V7 /* @min:%2emaxAjaxCallsPerView */];\r\n                    _excludeRequestFromAutoTrackingPatterns = [].concat(_extensionConfig[_DYN_EXCLUDE_REQUEST_FROM8 /* @min:%2eexcludeRequestFromAutoTrackingPatterns */] || [], _extensionConfig.addIntEndpoints !== false ? _internalExcludeEndpoints : []);\r\n                    _addRequestContext = _extensionConfig[_DYN_ADD_REQUEST_CONTEXT /* @min:%2eaddRequestContext */];\r\n                    _isUsingAIHeaders = _distributedTracingMode === 0 /* eDistributedTracingModes.AI */ || _distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */;\r\n                    _isUsingW3CHeaders = _distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */ || _distributedTracingMode === 2 /* eDistributedTracingModes.W3C */;\r\n                    if (_enableAjaxPerfTracking) {\r\n                        _markPrefix = _ajaxDataId;\r\n                    }\r\n                    _disableAjaxTracking = !!_extensionConfig[_DYN_DISABLE_AJAX_TRACKIN9 /* @min:%2edisableAjaxTracking */];\r\n                    _maxAjaxPerfLookupAttempts = _extensionConfig.maxAjaxPerfLookupAttempts;\r\n                    _ajaxPerfLookupDelay = _extensionConfig[_DYN_AJAX_PERF_LOOKUP_DEL10 /* @min:%2eajaxPerfLookupDelay */];\r\n                    _ignoreHeaders = _extensionConfig.ignoreHeaders;\r\n                    _appId = _extensionConfig.appId;\r\n                }));\r\n            }\r\n            function _populateContext() {\r\n                var propExt = _self[_DYN_CORE /* @min:%2ecore */].getPlugin(PropertiesPluginIdentifier);\r\n                if (propExt) {\r\n                    _context = propExt.plugin[_DYN_CONTEXT /* @min:%2econtext */]; // we could move IPropertiesPlugin to common as well\r\n                }\r\n            }\r\n            // discard the header if it's defined as ignoreHeaders in ICorrelationConfig\r\n            function _canIncludeHeaders(header) {\r\n                var rlt = true;\r\n                if (header || _ignoreHeaders) {\r\n                    arrForEach(_ignoreHeaders, (function (key) {\r\n                        if (key[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() === header[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]()) {\r\n                            rlt = false;\r\n                            return -1;\r\n                        }\r\n                    }));\r\n                }\r\n                return rlt;\r\n            }\r\n            // Fetch Stuff\r\n            function _instrumentFetch() {\r\n                var fetch = _supportsFetch();\r\n                if (!fetch) {\r\n                    return;\r\n                }\r\n                var global = getGlobal();\r\n                var isPolyfill = fetch.polyfill;\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extensionConfig, function () {\r\n                    _disableFetchTracking = !!_extensionConfig[_DYN_DISABLE_FETCH_TRACKI11 /* @min:%2edisableFetchTracking */];\r\n                    _enableResponseHeaderTracking = _extensionConfig[_DYN_ENABLE_RESPONSE_HEAD12 /* @min:%2eenableResponseHeaderTracking */];\r\n                    if (!_disableFetchTracking && !_fetchInitialized) {\r\n                        _addHook(InstrumentFunc(global, STR_FETCH, {\r\n                            ns: _evtNamespace,\r\n                            // Add request hook\r\n                            req: function (callDetails, input, init) {\r\n                                var fetchData;\r\n                                if (!_disableFetchTracking && _fetchInitialized &&\r\n                                    !_isDisabledRequest(null, input, init) &&\r\n                                    // If we have a polyfil and XHR instrumented then let XHR report otherwise we get duplicates\r\n                                    !(isPolyfill && _xhrInitialized)) {\r\n                                    var ctx = callDetails.ctx();\r\n                                    fetchData = _createFetchRecord(input, init);\r\n                                    var newInit = _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */](fetchData, input, init);\r\n                                    if (newInit !== init) {\r\n                                        callDetails.set(1, newInit);\r\n                                    }\r\n                                    ctx.data = fetchData;\r\n                                }\r\n                            },\r\n                            rsp: function (callDetails, input) {\r\n                                if (!_disableFetchTracking) {\r\n                                    var fetchData_1 = callDetails.ctx().data;\r\n                                    if (fetchData_1) {\r\n                                        // Replace the result with the new promise from this code\r\n                                        callDetails.rslt = callDetails.rslt.then(function (response) {\r\n                                            _reportFetchMetrics(callDetails, (response || {})[_DYN_STATUS /* @min:%2estatus */], input, response, fetchData_1, function () {\r\n                                                var _a;\r\n                                                var ajaxResponse = (_a = {\r\n                                                        statusText: (response || {})[_DYN_STATUS_TEXT /* @min:%2estatusText */]\r\n                                                    },\r\n                                                    _a[_DYN_HEADER_MAP /* @min:headerMap */] = null,\r\n                                                    _a[_DYN_CORRELATION_CONTEXT /* @min:correlationContext */] = _getFetchCorrelationContext(response),\r\n                                                    _a);\r\n                                                if (_enableResponseHeaderTracking && response) {\r\n                                                    var responseHeaderMap_1 = {};\r\n                                                    response.headers.forEach(function (value, name) {\r\n                                                        if (_canIncludeHeaders(name)) {\r\n                                                            responseHeaderMap_1[name] = value;\r\n                                                        }\r\n                                                    });\r\n                                                    ajaxResponse[_DYN_HEADER_MAP /* @min:%2eheaderMap */] = responseHeaderMap_1;\r\n                                                }\r\n                                                return ajaxResponse;\r\n                                            });\r\n                                            return response;\r\n                                        })\r\n                                            .catch(function (reason) {\r\n                                            _reportFetchMetrics(callDetails, 0, input, null, fetchData_1, null, { error: reason.message || dumpObj(reason) });\r\n                                            throw reason;\r\n                                        });\r\n                                    }\r\n                                }\r\n                            },\r\n                            // Create an error callback to report any hook errors\r\n                            hkErr: _createErrorCallbackFunc(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to monitor Window.fetch\" + ERROR_POSTFIX)\r\n                        }, true, isWebWorker()));\r\n                        _fetchInitialized = true;\r\n                    }\r\n                    else if (isPolyfill && !_polyfillInitialized) {\r\n                        // If fetch is a polyfill we need to capture the request to ensure that we correctly track\r\n                        // disabled request URLS (i.e. internal urls) to ensure we don't end up in a constant loop\r\n                        // of reporting ourselves, for example React Native uses a polyfill for fetch\r\n                        // Note: Polyfill implementations that don't support the \"polyfill\" tag are not supported\r\n                        // the workaround is to add a polyfill property to your fetch implementation before initializing\r\n                        // App Insights\r\n                        _addHook(InstrumentFunc(global, STR_FETCH, {\r\n                            ns: _evtNamespace,\r\n                            req: function (callDetails, input, init) {\r\n                                // Just call so that we record any disabled URL\r\n                                _isDisabledRequest(null, input, init);\r\n                            }\r\n                        }));\r\n                        _polyfillInitialized = true;\r\n                    }\r\n                }));\r\n                if (isPolyfill) {\r\n                    // retag the instrumented fetch with the same polyfill settings this is mostly for testing\r\n                    // But also supports multiple App Insights usages\r\n                    global[STR_FETCH].polyfill = isPolyfill;\r\n                }\r\n            }\r\n            function _hookProto(target, funcName, callbacks) {\r\n                _addHook(InstrumentProto(target, funcName, callbacks));\r\n            }\r\n            function _instrumentXhr() {\r\n                if (!_supportsAjaxMonitoring(_self, _ajaxDataId)) {\r\n                    return;\r\n                }\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extensionConfig, function () {\r\n                    _disableAjaxTracking = !!_extensionConfig[_DYN_DISABLE_AJAX_TRACKIN9 /* @min:%2edisableAjaxTracking */];\r\n                    _enableRequestHeaderTracking = _extensionConfig[_DYN_ENABLE_REQUEST_HEADE4 /* @min:%2eenableRequestHeaderTracking */];\r\n                    if (!_disableAjaxTracking && !_xhrInitialized) {\r\n                        // Instrument open\r\n                        _hookProto(XMLHttpRequest, \"open\", {\r\n                            ns: _evtNamespace,\r\n                            req: function (callDetails, method, url, async) {\r\n                                if (!_disableAjaxTracking) {\r\n                                    var xhr = callDetails[_DYN_INST /* @min:%2einst */];\r\n                                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);\r\n                                    if (!_isDisabledRequest(xhr, url) && _isMonitoredXhrInstance(xhr, ajaxData, true)) {\r\n                                        if (!ajaxData || !ajaxData.xhrMonitoringState[_DYN_OPEN_DONE /* @min:%2eopenDone */]) {\r\n                                            // Only create a single ajaxData (even when multiple AI instances are running)\r\n                                            ajaxData = _openHandler(xhr, method, url, async);\r\n                                        }\r\n                                        // always attach to the on ready state change (required for handling multiple instances)\r\n                                        _attachToOnReadyStateChange(xhr, ajaxData);\r\n                                    }\r\n                                }\r\n                            },\r\n                            hkErr: _createErrorCallbackFunc(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, ERROR_HEADER + \".open\" + ERROR_POSTFIX)\r\n                        });\r\n                        // Instrument send\r\n                        _hookProto(XMLHttpRequest, \"send\", {\r\n                            ns: _evtNamespace,\r\n                            req: function (callDetails, context) {\r\n                                if (!_disableAjaxTracking) {\r\n                                    var xhr = callDetails[_DYN_INST /* @min:%2einst */];\r\n                                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);\r\n                                    if (_isMonitoredXhrInstance(xhr, ajaxData) && !ajaxData.xhrMonitoringState[_DYN_SEND_DONE /* @min:%2esendDone */]) {\r\n                                        _createMarkId(\"xhr\", ajaxData);\r\n                                        ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = dateTimeUtilsNow();\r\n                                        _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */](ajaxData, undefined, undefined, xhr);\r\n                                        ajaxData.xhrMonitoringState[_DYN_SEND_DONE /* @min:%2esendDone */] = true;\r\n                                    }\r\n                                }\r\n                            },\r\n                            hkErr: _createErrorCallbackFunc(_self, 17 /* _eInternalMessageId.FailedMonitorAjaxSend */, ERROR_HEADER + ERROR_POSTFIX)\r\n                        });\r\n                        // Instrument abort\r\n                        _hookProto(XMLHttpRequest, \"abort\", {\r\n                            ns: _evtNamespace,\r\n                            req: function (callDetails) {\r\n                                if (!_disableAjaxTracking) {\r\n                                    var xhr = callDetails[_DYN_INST /* @min:%2einst */];\r\n                                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);\r\n                                    if (_isMonitoredXhrInstance(xhr, ajaxData) && !ajaxData.xhrMonitoringState[_DYN_ABORT_DONE /* @min:%2eabortDone */]) {\r\n                                        ajaxData[_DYN_ABORTED /* @min:%2eaborted */] = 1;\r\n                                        ajaxData.xhrMonitoringState[_DYN_ABORT_DONE /* @min:%2eabortDone */] = true;\r\n                                    }\r\n                                }\r\n                            },\r\n                            hkErr: _createErrorCallbackFunc(_self, 13 /* _eInternalMessageId.FailedMonitorAjaxAbort */, ERROR_HEADER + \".abort\" + ERROR_POSTFIX)\r\n                        });\r\n                        // Instrument setRequestHeader\r\n                        _hookProto(XMLHttpRequest, \"setRequestHeader\", {\r\n                            ns: _evtNamespace,\r\n                            req: function (callDetails, header, value) {\r\n                                if (!_disableAjaxTracking) {\r\n                                    var xhr = callDetails[_DYN_INST /* @min:%2einst */];\r\n                                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);\r\n                                    if (ajaxData && _isMonitoredXhrInstance(xhr, ajaxData)) {\r\n                                        _addSharedXhrHeaders(xhr, header, value);\r\n                                        if (_enableRequestHeaderTracking && _canIncludeHeaders(header)) {\r\n                                            if (ajaxData) {\r\n                                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][header] = value;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            hkErr: _createErrorCallbackFunc(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, ERROR_HEADER + \".setRequestHeader\" + ERROR_POSTFIX)\r\n                        });\r\n                        _xhrInitialized = true;\r\n                    }\r\n                }));\r\n            }\r\n            function _isDisabledRequest(xhr, request, init) {\r\n                var isDisabled = false;\r\n                var theUrl = ((!isString(request) ? (request || {}).url || \"\" : request) || \"\")[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n                // check excludeRequestFromAutoTrackingPatterns before stripping off any query string\r\n                arrForEach(_excludeRequestFromAutoTrackingPatterns, function (regex) {\r\n                    var theRegex = regex;\r\n                    if (isString(regex)) {\r\n                        theRegex = new RegExp(regex);\r\n                    }\r\n                    if (!isDisabled) {\r\n                        isDisabled = theRegex.test(theUrl);\r\n                    }\r\n                });\r\n                // if request url matches with exclude regex pattern, return true and no need to check for headers\r\n                if (isDisabled) {\r\n                    return isDisabled;\r\n                }\r\n                var idx = _indexOf(theUrl, \"?\");\r\n                var idx2 = _indexOf(theUrl, \"#\");\r\n                if (idx === -1 || (idx2 !== -1 && idx2 < idx)) {\r\n                    idx = idx2;\r\n                }\r\n                if (idx !== -1) {\r\n                    // Strip off any Query string\r\n                    theUrl = theUrl.substring(0, idx);\r\n                }\r\n                // check that this instance is not not used by ajax call performed inside client side monitoring to send data to collector\r\n                if (!isNullOrUndefined(xhr)) {\r\n                    // Look on the XMLHttpRequest of the URL string value\r\n                    isDisabled = xhr[DisabledPropertyName] === true || theUrl[DisabledPropertyName] === true;\r\n                }\r\n                else if (!isNullOrUndefined(request)) { // fetch\r\n                    // Look for DisabledPropertyName in either Request or RequestInit\r\n                    isDisabled = (typeof request === \"object\" ? request[DisabledPropertyName] === true : false) ||\r\n                        (init ? init[DisabledPropertyName] === true : false);\r\n                }\r\n                // Also add extra check just in case the XHR or fetch objects where not decorated with the DisableProperty due to sealing or freezing\r\n                if (!isDisabled && theUrl && isInternalApplicationInsightsEndpoint(theUrl)) {\r\n                    isDisabled = true;\r\n                }\r\n                if (isDisabled) {\r\n                    // Add the disabled url if not present\r\n                    if (!_disabledUrls[theUrl]) {\r\n                        _disabledUrls[theUrl] = 1;\r\n                    }\r\n                }\r\n                else {\r\n                    // Check to see if the url is listed as disabled\r\n                    if (_disabledUrls[theUrl]) {\r\n                        isDisabled = true;\r\n                    }\r\n                }\r\n                return isDisabled;\r\n            }\r\n            /// <summary>Verifies that particular instance of XMLHttpRequest needs to be monitored</summary>\r\n            /// <param name=\"excludeAjaxDataValidation\">Optional parameter. True if ajaxData must be excluded from verification</param>\r\n            /// <returns type=\"bool\">True if instance needs to be monitored, otherwise false</returns>\r\n            function _isMonitoredXhrInstance(xhr, ajaxData, excludeAjaxDataValidation) {\r\n                var ajaxValidation = true;\r\n                var initialized = _xhrInitialized;\r\n                if (!isNullOrUndefined(xhr)) {\r\n                    ajaxValidation = excludeAjaxDataValidation === true || !isNullOrUndefined(ajaxData);\r\n                }\r\n                // checking to see that all interested functions on xhr were instrumented\r\n                return initialized\r\n                    // checking on ajaxData to see that it was not removed in user code\r\n                    && ajaxValidation;\r\n            }\r\n            function _getDistributedTraceCtx() {\r\n                var distributedTraceCtx = null;\r\n                if (_self[_DYN_CORE /* @min:%2ecore */] && _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx) {\r\n                    distributedTraceCtx = _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx(false);\r\n                }\r\n                // Fall back\r\n                if (!distributedTraceCtx && _context && _context.telemetryTrace) {\r\n                    distributedTraceCtx = createDistributedTraceContextFromTrace(_context.telemetryTrace);\r\n                }\r\n                return distributedTraceCtx;\r\n            }\r\n            function _openHandler(xhr, method, url, async) {\r\n                var _a;\r\n                var distributedTraceCtx = _getDistributedTraceCtx();\r\n                var traceID = (distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */]()) || generateW3CId();\r\n                var spanID = strSubstr(generateW3CId(), 0, 16);\r\n                var xhrRequestData = xhr[AJAX_DATA_CONTAINER] = (xhr[AJAX_DATA_CONTAINER] || { xh: [], i: {} });\r\n                var ajaxDataCntr = xhrRequestData.i = (xhrRequestData.i || {});\r\n                var ajaxData = ajaxDataCntr[_ajaxDataId] = (ajaxDataCntr[_ajaxDataId] || new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a = _self.core) === null || _a === void 0 ? void 0 : _a.getTraceCtx()));\r\n                ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */]();\r\n                ajaxData[_DYN_METHOD /* @min:%2emethod */] = method;\r\n                ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = url;\r\n                ajaxData.xhrMonitoringState[_DYN_OPEN_DONE /* @min:%2eopenDone */] = true;\r\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = {};\r\n                ajaxData.async = async;\r\n                ajaxData[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */] = _enableAjaxErrorStatusText;\r\n                return ajaxData;\r\n            }\r\n            function _attachToOnReadyStateChange(xhr, ajaxData) {\r\n                ajaxData.xhrMonitoringState[_DYN_STATE_CHANGE_ATTACHE13 /* @min:%2estateChangeAttached */] = eventOn(xhr, \"readystatechange\", function () {\r\n                    var _a;\r\n                    try {\r\n                        if (xhr && xhr.readyState === 4 && _isMonitoredXhrInstance(xhr, ajaxData)) {\r\n                            _onAjaxComplete(xhr);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        var exceptionText = dumpObj(e);\r\n                        // ignore messages with c00c023f, as this a known IE9 XHR abort issue\r\n                        if (!exceptionText || _indexOf(exceptionText[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](), \"c00c023f\") === -1) {\r\n                            _throwInternalCritical(_self, 16 /* _eInternalMessageId.FailedMonitorAjaxRSC */, ERROR_HEADER + \" 'readystatechange' event handler\" + ERROR_POSTFIX, (_a = {},\r\n                                _a[_DYN_AJAX_DIAGNOSTICS_MES16 /* @min:ajaxDiagnosticsMessage */] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId),\r\n                                _a[_DYN_EXCEPTION /* @min:exception */] = exceptionText,\r\n                                _a));\r\n                        }\r\n                    }\r\n                }, _evtNamespace);\r\n            }\r\n            function _getResponseText(xhr) {\r\n                try {\r\n                    var responseType = xhr.responseType;\r\n                    if (responseType === \"\" || responseType === \"text\") {\r\n                        // As per the specification responseText is only valid if the type is an empty string or \"text\"\r\n                        return xhr[_DYN_RESPONSE_TEXT /* @min:%2eresponseText */];\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // This shouldn't happen because of the above check -- but just in case, so just ignore\r\n                }\r\n                return null;\r\n            }\r\n            function _onAjaxComplete(xhr) {\r\n                var ajaxData = _getAjaxData(xhr, _ajaxDataId);\r\n                ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */] = dateTimeUtilsNow();\r\n                ajaxData[_DYN_STATUS /* @min:%2estatus */] = xhr[_DYN_STATUS /* @min:%2estatus */];\r\n                function _reportXhrError(e, failedProps) {\r\n                    var errorProps = failedProps || {};\r\n                    errorProps[\"ajaxDiagnosticsMessage\"] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId);\r\n                    if (e) {\r\n                        errorProps[\"exception\"] = dumpObj(e);\r\n                    }\r\n                    _throwInternalWarning(_self, 14 /* _eInternalMessageId.FailedMonitorAjaxDur */, FAILED_TO_CALCULATE_DURATION_ERROR + \"ajax call\" + ERROR_NOT_SENT, errorProps);\r\n                }\r\n                _findPerfResourceEntry(\"xmlhttprequest\", ajaxData, function () {\r\n                    try {\r\n                        var dependency = ajaxData[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */](\"Ajax\", _enableRequestHeaderTracking, function () {\r\n                            var _a;\r\n                            var ajaxResponse = (_a = {\r\n                                    statusText: xhr[_DYN_STATUS_TEXT /* @min:%2estatusText */]\r\n                                },\r\n                                _a[_DYN_HEADER_MAP /* @min:headerMap */] = null,\r\n                                _a[_DYN_CORRELATION_CONTEXT /* @min:correlationContext */] = _getAjaxCorrelationContext(xhr),\r\n                                _a.type = xhr.responseType,\r\n                                _a[_DYN_RESPONSE_TEXT /* @min:responseText */] = _getResponseText(xhr),\r\n                                _a.response = xhr[_DYN_RESPONSE /* @min:%2eresponse */],\r\n                                _a);\r\n                            if (_enableResponseHeaderTracking) {\r\n                                var headers = xhr[_DYN_GET_ALL_RESPONSE_HEA15 /* @min:%2egetAllResponseHeaders */]();\r\n                                if (headers) {\r\n                                    // xhr.getAllResponseHeaders() method returns all the response headers, separated by CRLF, as a string or null\r\n                                    // the regex converts the header string into an array of individual headers\r\n                                    var arr = strTrim(headers).split(/[\\r\\n]+/);\r\n                                    var responseHeaderMap_2 = {};\r\n                                    arrForEach(arr, function (line) {\r\n                                        var parts = line.split(\": \");\r\n                                        var header = parts.shift();\r\n                                        var value = parts.join(\": \");\r\n                                        if (_canIncludeHeaders(header)) {\r\n                                            responseHeaderMap_2[header] = value;\r\n                                        }\r\n                                    });\r\n                                    ajaxResponse[_DYN_HEADER_MAP /* @min:%2eheaderMap */] = responseHeaderMap_2;\r\n                                }\r\n                            }\r\n                            return ajaxResponse;\r\n                        });\r\n                        var properties = void 0;\r\n                        try {\r\n                            if (!!_addRequestContext) {\r\n                                properties = _addRequestContext({ status: xhr[_DYN_STATUS /* @min:%2estatus */], xhr: xhr });\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternalWarning(_self, 104 /* _eInternalMessageId.FailedAddingCustomDefinedRequestContext */, CUSTOM_REQUEST_CONTEXT_ERROR);\r\n                        }\r\n                        if (dependency) {\r\n                            if (properties !== undefined) {\r\n                                dependency[STR_PROPERTIES /* @min:%2eproperties */] = __assign(__assign({}, dependency.properties), properties);\r\n                            }\r\n                            var sysProperties = ajaxData[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */]();\r\n                            _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, dependency, null, sysProperties);\r\n                        }\r\n                        else {\r\n                            _reportXhrError(null, {\r\n                                requestSentTime: ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */],\r\n                                responseFinishedTime: ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */]\r\n                            });\r\n                        }\r\n                    }\r\n                    finally {\r\n                        // cleanup telemetry data\r\n                        try {\r\n                            var xhrRequestData = (xhr[AJAX_DATA_CONTAINER] || { i: {} });\r\n                            var ajaxDataCntr = (xhrRequestData.i || {});\r\n                            if (ajaxDataCntr[_ajaxDataId]) {\r\n                                ajaxDataCntr[_ajaxDataId] = null;\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            // May throw in environments that prevent extension or freeze xhr\r\n                        }\r\n                    }\r\n                }, function (e) {\r\n                    _reportXhrError(e, null);\r\n                });\r\n            }\r\n            function _getAjaxCorrelationContext(xhr) {\r\n                var _a;\r\n                try {\r\n                    var responseHeadersString = xhr[_DYN_GET_ALL_RESPONSE_HEA15 /* @min:%2egetAllResponseHeaders */]();\r\n                    if (responseHeadersString !== null) {\r\n                        var index = _indexOf(responseHeadersString[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](), RequestHeaders[8 /* eRequestHeaders.requestContextHeaderLowerCase */]);\r\n                        if (index !== -1) {\r\n                            var responseHeader = xhr.getResponseHeader(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]);\r\n                            return correlationIdGetCorrelationContext(responseHeader);\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternalWarning(_self, 18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, CORRELATION_HEADER_ERROR, (_a = {},\r\n                        _a[_DYN_AJAX_DIAGNOSTICS_MES16 /* @min:ajaxDiagnosticsMessage */] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId),\r\n                        _a[_DYN_EXCEPTION /* @min:exception */] = dumpObj(e),\r\n                        _a));\r\n                }\r\n            }\r\n            function _createMarkId(type, ajaxData) {\r\n                if (ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] && _markPrefix && _enableAjaxPerfTracking) {\r\n                    var performance_1 = getPerformance();\r\n                    if (performance_1 && isFunction(performance_1.mark)) {\r\n                        _markCount++;\r\n                        var markId = _markPrefix + type + \"#\" + _markCount;\r\n                        performance_1.mark(markId);\r\n                        var entries = performance_1.getEntriesByName(markId);\r\n                        if (entries && entries[_DYN_LENGTH /* @min:%2elength */] === 1) {\r\n                            ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */] = entries[0];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function _findPerfResourceEntry(initiatorType, ajaxData, trackCallback, reportError) {\r\n                var perfMark = ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */];\r\n                var performance = getPerformance();\r\n                var maxAttempts = _maxAjaxPerfLookupAttempts;\r\n                var retryDelay = _ajaxPerfLookupDelay;\r\n                var requestUrl = ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */];\r\n                var attempt = 0;\r\n                (function locateResourceTiming() {\r\n                    try {\r\n                        if (performance && perfMark) {\r\n                            attempt++;\r\n                            var perfTiming = null;\r\n                            var entries = performance.getEntries();\r\n                            for (var lp = entries[_DYN_LENGTH /* @min:%2elength */] - 1; lp >= 0; lp--) {\r\n                                var entry = entries[lp];\r\n                                if (entry) {\r\n                                    if (entry.entryType === \"resource\") {\r\n                                        if (entry.initiatorType === initiatorType &&\r\n                                            (_indexOf(entry[_DYN_NAME /* @min:%2ename */], requestUrl) !== -1 || _indexOf(requestUrl, entry[_DYN_NAME /* @min:%2ename */]) !== -1)) {\r\n                                            perfTiming = entry;\r\n                                        }\r\n                                    }\r\n                                    else if (entry.entryType === \"mark\" && entry[_DYN_NAME /* @min:%2ename */] === perfMark[_DYN_NAME /* @min:%2ename */]) {\r\n                                        // We hit the start event\r\n                                        ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */] = perfTiming;\r\n                                        break;\r\n                                    }\r\n                                    if (entry[_DYN_START_TIME /* @min:%2estartTime */] < perfMark[_DYN_START_TIME /* @min:%2estartTime */] - 1000) {\r\n                                        // Fallback to try and reduce the time spent looking for the perf entry\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!perfMark || // - we don't have a perfMark or\r\n                            ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */] || // - we have not found the perf entry or\r\n                            attempt >= maxAttempts || // - we have tried too many attempts or\r\n                            ajaxData.async === false) { // - this is a sync request\r\n                            if (perfMark && isFunction(performance.clearMarks)) {\r\n                                // Remove the mark so we don't fill up the performance resources too much\r\n                                performance.clearMarks(perfMark[_DYN_NAME /* @min:%2ename */]);\r\n                            }\r\n                            ajaxData.perfAttempts = attempt;\r\n                            // just continue and report the track event\r\n                            trackCallback();\r\n                        }\r\n                        else {\r\n                            // We need to wait for the browser to populate the window.performance entry\r\n                            // This needs to be at least 1ms as waiting <= 1 (on firefox) is not enough time for fetch or xhr,\r\n                            // this is a scheduling issue for the browser implementation\r\n                            scheduleTimeout(locateResourceTiming, retryDelay);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        reportError(e);\r\n                    }\r\n                })();\r\n            }\r\n            function _createFetchRecord(input, init) {\r\n                var _a;\r\n                var distributedTraceCtx = _getDistributedTraceCtx();\r\n                var traceID = (distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */]()) || generateW3CId();\r\n                var spanID = strSubstr(generateW3CId(), 0, 16);\r\n                var ajaxData = new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a = _self.core) === null || _a === void 0 ? void 0 : _a.getTraceCtx());\r\n                ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */]();\r\n                ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = dateTimeUtilsNow();\r\n                ajaxData[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */] = _enableAjaxErrorStatusText;\r\n                var requestUrl;\r\n                if (input instanceof Request) {\r\n                    requestUrl = (input || {}).url || \"\";\r\n                }\r\n                else {\r\n                    requestUrl = input;\r\n                }\r\n                if (requestUrl === \"\") {\r\n                    var location_1 = getLocation();\r\n                    if (location_1 && location_1.href) {\r\n                        requestUrl = strSplit(location_1.href, \"#\")[0];\r\n                    }\r\n                }\r\n                ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = requestUrl;\r\n                var method = \"GET\";\r\n                if (init && init[_DYN_METHOD /* @min:%2emethod */]) {\r\n                    method = init[_DYN_METHOD /* @min:%2emethod */];\r\n                }\r\n                else if (input && input instanceof Request) {\r\n                    method = input[_DYN_METHOD /* @min:%2emethod */];\r\n                }\r\n                ajaxData[_DYN_METHOD /* @min:%2emethod */] = method;\r\n                var requestHeaders = {};\r\n                if (_enableRequestHeaderTracking) {\r\n                    var headers = new Headers((init ? init[_DYN_HEADERS /* @min:%2eheaders */] : 0) || (input instanceof Request ? (input[_DYN_HEADERS /* @min:%2eheaders */] || {}) : {}));\r\n                    headers.forEach(function (value, key) {\r\n                        if (_canIncludeHeaders(key)) {\r\n                            requestHeaders[key] = value;\r\n                        }\r\n                    });\r\n                }\r\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = requestHeaders;\r\n                _createMarkId(STR_FETCH, ajaxData);\r\n                return ajaxData;\r\n            }\r\n            function _getFailedFetchDiagnosticsMessage(input) {\r\n                var result = \"\";\r\n                try {\r\n                    if (!isNullOrUndefined(input)) {\r\n                        if (typeof (input) === \"string\") {\r\n                            result += \"(url: '\".concat(input, \"')\");\r\n                        }\r\n                        else {\r\n                            result += \"(url: '\".concat(input.url, \"')\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternalCritical(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to grab failed fetch diagnostics message\", { exception: dumpObj(e) });\r\n                }\r\n                return result;\r\n            }\r\n            function _reportFetchMetrics(callDetails, status, input, response, ajaxData, getResponse, properties) {\r\n                if (!ajaxData) {\r\n                    return;\r\n                }\r\n                function _reportFetchError(msgId, e, failedProps) {\r\n                    var errorProps = failedProps || {};\r\n                    errorProps[\"fetchDiagnosticsMessage\"] = _getFailedFetchDiagnosticsMessage(input);\r\n                    if (e) {\r\n                        errorProps[\"exception\"] = dumpObj(e);\r\n                    }\r\n                    _throwInternalWarning(_self, msgId, FAILED_TO_CALCULATE_DURATION_ERROR + \"fetch call\" + ERROR_NOT_SENT, errorProps);\r\n                }\r\n                ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */] = dateTimeUtilsNow();\r\n                ajaxData[_DYN_STATUS /* @min:%2estatus */] = status;\r\n                _findPerfResourceEntry(STR_FETCH, ajaxData, function () {\r\n                    var dependency = ajaxData[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */](\"Fetch\", _enableRequestHeaderTracking, getResponse);\r\n                    var properties;\r\n                    try {\r\n                        if (!!_addRequestContext) {\r\n                            properties = _addRequestContext({ status: status, request: input, response: response });\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternalWarning(_self, 104 /* _eInternalMessageId.FailedAddingCustomDefinedRequestContext */, CUSTOM_REQUEST_CONTEXT_ERROR);\r\n                    }\r\n                    if (dependency) {\r\n                        if (properties !== undefined) {\r\n                            dependency[STR_PROPERTIES /* @min:%2eproperties */] = __assign(__assign({}, dependency.properties), properties);\r\n                        }\r\n                        var sysProperties = ajaxData[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */]();\r\n                        _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, dependency, null, sysProperties);\r\n                    }\r\n                    else {\r\n                        _reportFetchError(14 /* _eInternalMessageId.FailedMonitorAjaxDur */, null, {\r\n                            requestSentTime: ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */],\r\n                            responseFinishedTime: ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */]\r\n                        });\r\n                    }\r\n                }, function (e) {\r\n                    _reportFetchError(18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, e, null);\r\n                });\r\n            }\r\n            function _getFetchCorrelationContext(response) {\r\n                var _a;\r\n                if (response && response[_DYN_HEADERS /* @min:%2eheaders */]) {\r\n                    try {\r\n                        var responseHeader = response[_DYN_HEADERS /* @min:%2eheaders */].get(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]);\r\n                        return correlationIdGetCorrelationContext(responseHeader);\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternalWarning(_self, 18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, CORRELATION_HEADER_ERROR, (_a = {\r\n                                fetchDiagnosticsMessage: _getFailedFetchDiagnosticsMessage(response)\r\n                            },\r\n                            _a[_DYN_EXCEPTION /* @min:exception */] = dumpObj(e),\r\n                            _a));\r\n                    }\r\n                }\r\n            }\r\n            function _reportDependencyInternal(initializers, core, ajaxData, dependency, properties, systemProperties) {\r\n                var _a;\r\n                var result = true;\r\n                var initializersCount = initializers[_DYN_LENGTH /* @min:%2elength */];\r\n                if (initializersCount > 0) {\r\n                    var details = (_a = {\r\n                            item: dependency\r\n                        },\r\n                        _a[STR_PROPERTIES /* @min:properties */] = properties,\r\n                        _a.sysProperties = systemProperties,\r\n                        _a.context = ajaxData ? ajaxData[_DYN_CONTEXT /* @min:%2econtext */] : null,\r\n                        _a.aborted = ajaxData ? !!ajaxData[_DYN_ABORTED /* @min:%2eaborted */] : false,\r\n                        _a);\r\n                    result = _processDependencyContainer(core, initializers, details, \"initializer\");\r\n                }\r\n                if (result) {\r\n                    _self[_DYN_TRACK_DEPENDENCY_DAT3 /* @min:%2etrackDependencyDataInternal */](dependency, properties, systemProperties);\r\n                }\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    AjaxMonitor.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AjaxMonitor.prototype.processTelemetry = function (item, itemCtx) {\r\n        this.processNext(item, itemCtx);\r\n    };\r\n    /**\r\n     * Logs dependency call\r\n     * @param dependencyData - dependency data object\r\n     */\r\n    AjaxMonitor.prototype.trackDependencyData = function (dependency, properties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AjaxMonitor.prototype.includeCorrelationHeaders = function (ajaxData, input, init, xhr) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add an ajax listener which is called just prior to the request being sent and before the correlation headers are added, to allow you\r\n     * to access the headers and modify the values used to generate the distributed tracing correlation headers.\r\n     * @param dependencyListener - The Telemetry Initializer function\r\n     * @returns - A IDependencyListenerHandler to enable the initializer to be removed\r\n     */\r\n    AjaxMonitor.prototype.addDependencyListener = function (dependencyListener) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an dependency telemetry initializer callback function to allow populating additional properties or drop the request.\r\n     * It is called after the dependency call has completed and any available performance details are available. A dependency\r\n     * initializer is similar to the TelemetryInitializer function but it allows you to block the reporting of the dependency\r\n     * request so that it doesn't count against the `maxAjaxCallsPerView`.\r\n     * @param dependencyInitializer - The Dependency Telemetry Initializer function\r\n     * @returns - A IDependencyInitializerHandler to enable the initializer to be removed\r\n     */\r\n    AjaxMonitor.prototype.addDependencyInitializer = function (dependencyInitializer) {\r\n        return null;\r\n    };\r\n    /**\r\n     * Protected function to allow sub classes the chance to add additional properties to the dependency event\r\n     * before it's sent. This function calls track, so sub-classes must call this function after they have\r\n     * populated their properties.\r\n     * @param dependencyData - dependency data object\r\n     */\r\n    AjaxMonitor.prototype.trackDependencyDataInternal = function (dependency, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AjaxMonitor.identifier = \"AjaxDependencyPlugin\";\r\n    return AjaxMonitor;\r\n}(BaseTelemetryPlugin));\r\nexport { AjaxMonitor };\r\n//# sourceMappingURL=ajax.js.map"],"mappings":";;;;;AAEA,IAAAA,EAAA;AACA,SAAAC,UAAA,IAAAC,QAAA,EAAAC,WAAA,IAAAC,SAAA;AACA,OAAAC,YAAA;AACA,SAAAC,oBAAA,EAAAC,0BAAA,EAAAC,oBAAA,EAAAC,cAAA,EAAAC,wCAAA,EAAAC,kCAAA,EAAAC,sCAAA,EAAAC,mBAAA,EAAAC,iBAAA,EAAAC,gBAAA,EAAAC,iBAAA,EAAAC,qCAAA;AACA,SAAAC,mBAAA,EAAAC,cAAA,EAAAC,eAAA,EAAAC,cAAA,EAAAC,UAAA,EAAAC,6BAAA,EAAAC,qBAAA,EAAAC,OAAA,EAAAC,OAAA,EAAAC,aAAA,EAAAC,gBAAA,EAAAC,SAAA,EAAAC,YAAA,EAAAC,WAAA,EAAAC,cAAA,EAAAC,UAAA,EAAAC,iBAAA,EAAAC,QAAA,EAAAC,cAAA,EAAAC,iBAAA,EAAAC,cAAA,EAAAC,YAAA,EAAAC,OAAA;AACA,SAAAC,WAAA,EAAAC,SAAA,EAAAC,eAAA,EAAAC,UAAA,EAAAC,QAAA,EAAAC,SAAA;AACA,SAAAC,cAAA;AACA,SAAAC,YAAA,EAAAC,eAAA,EAAAC,wBAAA,EAAAC,2BAAA,EAAAC,2BAAA,EAAAC,YAAA,EAAAC,SAAA,EAAAC,wBAAA,EAAAC,0BAAA,EAAAC,2BAAA,EAAAC,0BAAA,EAAAC,0BAAA,EAAAC,0BAAA,EAAAC,2BAAA,EAAAC,sBAAA,EAAAC,cAAA,EAAAC,0BAAA,EAAAC,qBAAA,EAAAC,2BAAA,EAAAC,oBAAA,EAAAC,oBAAA,EAAAC,iBAAA,EAAAC,YAAA,EAAAC,eAAA,EAAAC,0BAAA,EAAAC,SAAA,EAAAC,WAAA,EAAAC,0BAAA,EAAAC,WAAA,EAAAC,SAAA,EAAAC,cAAA,EAAAC,cAAA,EAAAC,gBAAA,EAAAC,oBAAA,EAAAC,sBAAA,EAAAC,gBAAA,EAAAC,aAAA,EAAAC,2BAAA,EAAAC,kBAAA,EAAAC,cAAA,EAAAC,uBAAA,EAAAC,YAAA,EAAAC,aAAA,EAAAC,eAAA,EAAAC,2BAAA,EAAAC,WAAA,EAAAC,gBAAA,EAAAC,kBAAA,EAAAC,gBAAA,EAAAC,aAAA,EAAAC,cAAA,EAAAC,0BAAA,EAAAC,cAAA,EAAAC,uBAAA;AACA,SAAAC,UAAA;AACA,IAAAC,mBAAA;AACA,IAAAC,UAAA;AACA,IAAAC,mBAAA;AACA,IAAAC,SAAA;AACA,IAAAC,YAAA;AACA,IAAAC,YAAA;AACA,IAAAC,aAAA,GAAAD,YAAA;AACA,IAAAE,cAAA,GAAAF,YAAA;AACA,IAAAG,wBAAA;AACA,IAAAC,4BAAA;AACA,IAAAC,kCAAA;AACA;AACA,IAAAC,UAAA;AACA;AACA,SAAAC,eAAA;EACA,IAAAC,OAAA,GAAAvF,SAAA;EACA,KAAAuF,OAAA,IACAlF,iBAAA,CAAAkF,OAAA,CAAAC,OAAA,KACAnF,iBAAA,CAAAkF,OAAA,CAAAC,OAAA,CAAA9E,YAAA,MACAL,iBAAA,CAAAkF,OAAA,CAAAV,SAAA;IACA;EACA;EACA,OAAAU,OAAA,CAAAV,SAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAY,wBAAAC,mBAAA,EAAAC,UAAA;EACA,IAAAxH,EAAA,EAAAyH,EAAA;EACA,IAAAC,MAAA;EACA,IAAAtF,cAAA;IACA,IAAAuF,KAAA,GAAAC,cAAA,CAAArF,YAAA;IACAmF,MAAA,IAAAxF,iBAAA,CAAAyF,KAAA,KACA,CAAAzF,iBAAA,CAAAyF,KAAA,CAAAE,IAAA;IAAA;IACA,CAAA3F,iBAAA,CAAAyF,KAAA,CAAAG,IAAA,KACA,CAAA5F,iBAAA,CAAAyF,KAAA,CAAAI,KAAA;EACA;EACA,IAAAC,KAAA,GAAAlG,YAAA;EACA,IAAAkG,KAAA,IAAAA,KAAA;IACAN,MAAA;EACA;EACA,IAAAA,MAAA;IACA;IACA;MACA,IAAAO,GAAA,OAAAL,cAAA;MACA,IAAAM,OAAA;QACAC,EAAA;QACAC,CAAA,GAAApI,EAAA,OACAA,EAAA,CAAAwH,UAAA,QACAxH,EAAA;MACA;MACAiI,GAAA,CAAAxB,mBAAA,IAAAyB,OAAA;MACA;MACA,IAAAG,OAAA,GAAAT,cAAA,CAAArF,YAAA,EAAAsF,IAAA;MACAD,cAAA,CAAArF,YAAA,EAAAsF,IAAA,GAAAQ,OAAA;IACA,EACA,OAAAC,CAAA;MACA;MACAZ,MAAA;MACAa,sBAAA,CAAAhB,mBAAA,iIAAAE,EAAA,OACAA,EAAA,CAAA1D,cAAA,yBAAAtC,OAAA,CAAA6G,CAAA,GACAb,EAAA;IACA;EACA;EACA,OAAAC,MAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAc,YAAA,YAAAA,CAAAP,GAAA,EAAAT,UAAA;EACA,IAAAS,GAAA,IAAAT,UAAA,IAAAS,GAAA,CAAAxB,mBAAA;IACA,QAAAwB,GAAA,CAAAxB,mBAAA,EAAA2B,CAAA,QAAAZ,UAAA;EACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAiB,oBAAA,YAAAA,CAAAR,GAAA,EAAAS,IAAA,EAAAC,KAAA;EACA,IAAAV,GAAA;IACA,IAAAW,OAAA,IAAAX,GAAA,CAAAxB,mBAAA,SAAA0B,EAAA;IACA,IAAAS,OAAA;MACAA,OAAA,CAAAC,IAAA;QACAC,CAAA,EAAAJ,IAAA;QACAK,CAAA,EAAAJ;MACA;IACA;EACA;AACA;AACA,IAAAK,YAAA,YAAAA,CAAAf,GAAA,EAAAS,IAAA;EACA,IAAAO,SAAA;EACA,IAAAhB,GAAA;IACA,IAAAW,OAAA,IAAAX,GAAA,CAAAxB,mBAAA,SAAA0B,EAAA;IACA,IAAAS,OAAA;MACAtH,UAAA,CAAAsH,OAAA,YAAAM,MAAA;QACA,IAAAA,MAAA,CAAAJ,CAAA,KAAAJ,IAAA;UACAO,SAAA;UACA;QACA;MACA;IACA;EACA;EACA,OAAAA,SAAA;AACA;AACA;AACA,SAAAE,iCAAAlB,GAAA,EAAAT,UAAA;EACA,IAAAE,MAAA;EACA;IACA,IAAA0B,QAAA,GAAAZ,YAAA,CAAAP,GAAA,EAAAT,UAAA;IACA,IAAA4B,QAAA,IAAAA,QAAA,CAAAjE,gBAAA;MACAuC,MAAA,gBAAA0B,QAAA,CAAAjE,gBAAA;IACA;EACA,EACA,OAAAmD,CAAA;IACA;EAAA;EAEA,OAAAZ,MAAA;AACA;AACA;AACA,SAAAa,uBAAAhB,mBAAA,EAAA8B,KAAA,EAAAC,OAAA,EAAAC,UAAA,EAAAC,SAAA;EACAnI,cAAA,CAAAkG,mBAAA,CAAAf,UAAA,wCAAA6C,KAAA,EAAAC,OAAA,EAAAC,UAAA,EAAAC,SAAA;AACA;AACA;AACA,SAAAC,sBAAAlC,mBAAA,EAAA8B,KAAA,EAAAC,OAAA,EAAAC,UAAA,EAAAC,SAAA;EACAnI,cAAA,CAAAkG,mBAAA,CAAAf,UAAA,uCAAA6C,KAAA,EAAAC,OAAA,EAAAC,UAAA,EAAAC,SAAA;AACA;AACA;AACA,SAAAE,yBAAAnC,mBAAA,EAAAoC,eAAA,EAAAL,OAAA;EACA;EACA,iBAAAM,WAAA;IACA,IAAA5J,EAAA;IACAuI,sBAAA,CAAAhB,mBAAA,EAAAoC,eAAA,EAAAL,OAAA,GAAAtJ,EAAA;MACA6J,sBAAA,EAAAV,gCAAA,CAAAS,WAAA,CAAAnF,SAAA,sBAAA8C,mBAAA,CAAAuC,WAAA;IACA,GACA9J,EAAA,CAAA+D,cAAA,yBAAAtC,OAAA,CAAAmI,WAAA,CAAAG,GAAA,GACA/J,EAAA;EACA;AACA;AACA,SAAAgK,SAAArB,KAAA,EAAAsB,KAAA;EACA,IAAAtB,KAAA,IAAAsB,KAAA;IACA,OAAArH,UAAA,CAAA+F,KAAA,EAAAsB,KAAA;EACA;EACA;AACA;AACA,SAAAC,YAAAC,SAAA,EAAAC,EAAA,EAAAC,OAAA;EACA,IAAAC,UAAA;IACAF,EAAA,EAAAA,EAAA;IACAG,EAAA,EAAAF;EACA;EACAF,SAAA,CAAAtB,IAAA,CAAAyB,UAAA;EACA;IACAE,MAAA,WAAAA,CAAA;MACAlJ,UAAA,CAAA6I,SAAA,YAAAM,WAAA,EAAAC,GAAA;QACA,IAAAD,WAAA,CAAAL,EAAA,KAAAE,UAAA,CAAAF,EAAA;UACAD,SAAA,CAAAQ,MAAA,CAAAD,GAAA;UACA;QACA;MACA;IACA;EACA;AACA;AACA,SAAAE,4BAAAC,IAAA,EAAAV,SAAA,EAAAW,OAAA,EAAAxB,OAAA;EACA,IAAA5B,MAAA;EACApG,UAAA,CAAA6I,SAAA,YAAAE,OAAA,EAAAK,GAAA;IACA;MACA,IAAAL,OAAA,CAAAE,EAAA,CAAAQ,IAAA,OAAAD,OAAA;QACApD,MAAA;MACA;IACA,EACA,OAAAY,CAAA;MACAjH,cAAA,CAAAwJ,IAAA,IAAAA,IAAA,CAAAG,MAAA,8GAAA1B,OAAA,WAAAoB,GAAA,kBAAA9I,gBAAA,CAAA0G,CAAA;QAAA2C,SAAA,EAAAxJ,OAAA,CAAA6G,CAAA;MAAA;IACA;EACA;EACA,OAAAZ,MAAA;AACA;AACA,SAAAwD,4BAAAC,SAAA,EAAAN,IAAA,EAAAzB,QAAA,EAAAnB,GAAA,EAAAmD,KAAA,EAAAC,IAAA;EACA,IAAArL,EAAA;EACA,IAAAsL,iBAAA,GAAAH,SAAA,CAAAzG,WAAA;EACA,IAAA4G,iBAAA;IACA,IAAAR,OAAA,IAAA9K,EAAA,OACAA,EAAA,CAAAsD,SAAA,oBAAAuH,IAAA,EACA7K,EAAA,CAAAiI,GAAA,GAAAA,GAAA,EACAjI,EAAA,CAAAoL,KAAA,GAAAA,KAAA,EACApL,EAAA,CAAAqL,IAAA,GAAAA,IAAA,EACArL,EAAA,CAAAuL,OAAA,GAAAnC,QAAA,CAAAnD,aAAA,yBACAjG,EAAA,CAAAwL,MAAA,GAAApC,QAAA,CAAA3D,YAAA,wBACAzF,EAAA,CAAAyL,UAAA,GAAArC,QAAA,CAAApD,gBAAA,4BACAhG,EAAA,CAAA0L,OAAA,GAAAtC,QAAA,CAAA/F,YAAA,+BACArD,EAAA,CAAA2L,OAAA,KAAAvC,QAAA,CAAApG,YAAA,yBACAhD,EAAA;IACA4K,2BAAA,CAAAC,IAAA,EAAAM,SAAA,EAAAL,OAAA;IACA1B,QAAA,CAAAnD,aAAA,0BAAA6E,OAAA,CAAA5E,cAAA;IACAkD,QAAA,CAAA3D,YAAA,yBAAAqF,OAAA,CAAApF,aAAA;IACA0D,QAAA,CAAApD,gBAAA,6BAAA8E,OAAA,CAAA9E,gBAAA;IACAoD,QAAA,CAAA/F,YAAA,0BAAAyH,OAAA,CAAAzH,YAAA;EACA;AACA;AACA,IAAAuI,SAAA;AACA,WAAAC,kCAAA,GAAAnJ,SAAA,EACAkJ,SAAA,kBACAA,SAAA,uBACAA,SAAA,kBACAA,SAAA,uBACA;AACA,IAAAE,yBAAA,IACA,sHACA;AACA,IAAAC,cAAA,GAAArJ,SAAA,EAAA1C,EAAA,OACAA,EAAA,CAAA2E,0BAAA,wCACA3E,EAAA,CAAAwD,0BAAA,0CACAxD,EAAA,CAAAyD,2BAAA,2CACAzD,EAAA,CAAAgE,0BAAA,sDAAAgI,SAAA,EACAhM,EAAA,CAAAiM,yBAAA,UACAjM,EAAA,CAAAkM,sBAAA,gDACAlM,EAAA,CAAAmM,gCAAA,GAAAN,kCAAA,EACA7L,EAAA,CAAAoM,wBAAA,GAAAJ,SAAA,EACAhM,EAAA,CAAAqM,gCAAA,GAAAL,SAAA,EACAhM,EAAA,CAAAsM,KAAA,GAAAN,SAAA,EACAhM,EAAA,CAAAuM,qBAAA,UACAvM,EAAA,CAAA4D,0BAAA,kDACA5D,EAAA,CAAA6D,2BAAA,mDACA7D,EAAA,CAAA0D,0BAAA,gDACA1D,EAAA,CAAA2D,0BAAA,6CACA3D,EAAA,CAAAwM,yBAAA,MACAxM,EAAA,CAAAoD,2BAAA,uCACApD,EAAA,CAAAyM,aAAA,IACA,iBACA,aACA,mBACA,EACAzM,EAAA,CAAAkD,wBAAA,iCAAA8I,SAAA,EACAhM,EAAA,CAAA0M,eAAA,SACA1M,EAAA;AACA,IAAA2M,WAAA,0BAAAC,MAAA;EACAxM,SAAA,CAAAuM,WAAA,EAAAC,MAAA;EACA,SAAAD,YAAA;IACA,IAAAE,KAAA,GAAAD,MAAA,CAAA7B,IAAA;IACA8B,KAAA,CAAAC,UAAA,GAAAH,WAAA,CAAAG,UAAA;IACAD,KAAA,CAAAE,QAAA;IACA,IAAAC,iBAAA;IACA,IAAAC,eAAA;IACA,IAAAC,kBAAA;IACA,IAAAC,gBAAA;IACA,IAAAC,4BAAA;IACA,IAAAC,0BAAA;IACA,IAAAC,kBAAA;IACA,IAAAC,QAAA;IACA,IAAAC,kBAAA;IACA,IAAAC,iBAAA;IACA,IAAAC,WAAA;IACA,IAAAC,uBAAA;IACA,IAAAC,oBAAA;IACA,IAAAC,6BAAA;IACA,IAAAC,aAAA;IACA,IAAAC,oBAAA;IACA,IAAAC,qBAAA;IACA,IAAAC,uCAAA;IACA,IAAAC,kBAAA;IACA,IAAAC,aAAA;IACA,IAAArE,WAAA;IACA,IAAAsE,oBAAA;IACA,IAAAC,oBAAA;IACA,IAAAC,uBAAA;IACA,IAAAC,cAAA;IACA,IAAAC,0BAAA;IACA,IAAAC,oBAAA;IACA,IAAAC,uBAAA;IACA,IAAAC,MAAA;IACA,IAAAC,oBAAA;IACAvO,YAAA,CAAAsM,WAAA,EAAAE,KAAA,YAAAgC,KAAA,EAAAC,KAAA;MACA,IAAAC,QAAA,GAAAD,KAAA,CAAA1I,cAAA;MACA4I,aAAA;MACAH,KAAA,CAAAI,UAAA,aAAAC,MAAA,EAAArE,IAAA,EAAAsE,UAAA,EAAAC,WAAA;QACA,KAAAP,KAAA,CAAAQ,aAAA;UACAP,KAAA,CAAAG,UAAA,CAAAC,MAAA,EAAArE,IAAA,EAAAsE,UAAA,EAAAC,WAAA;UACAjB,aAAA,GAAA9L,iBAAA,CAAAb,qBAAA,UAAAqJ,IAAA,IAAAA,IAAA,CAAAyE,YAAA,IAAAzE,IAAA,CAAAyE,YAAA;UACAC,iBAAA,CAAAL,MAAA;UACAM,cAAA;UACAC,gBAAA;UACAC,gBAAA;QACA;MACA;MACAb,KAAA,CAAAc,WAAA;QACAX,aAAA;MACA;MACAH,KAAA,CAAAe,mBAAA,aAAAC,UAAA,EAAAtG,UAAA;QACAuG,yBAAA,CAAAxB,uBAAA,EAAAO,KAAA,CAAAvL,SAAA,4BAAAuM,UAAA,EAAAtG,UAAA;MACA;MACAsF,KAAA,CAAArK,0BAAA,sDAAA4E,QAAA,EAAAgC,KAAA,EAAAC,IAAA,EAAApD,GAAA;QACA;QACA,IAAA8H,iBAAA,GAAAlB,KAAA,0BAAA3B,kBAAA;QACAhC,2BAAA,CAAAmD,oBAAA,EAAAQ,KAAA,CAAAvL,SAAA,sBAAA8F,QAAA,EAAAnB,GAAA,EAAAmD,KAAA,EAAAC,IAAA;QACA,IAAAD,KAAA,IAAAA,KAAA;UAAA;UACA,IAAA1K,wCAAA,CAAAyM,gBAAA,EAAA/D,QAAA,CAAAnF,qBAAA,kCAAA8L,iBAAA;YACA,KAAA1E,IAAA;cACAA,IAAA;YACA;YACA;YACA;YACA;YACA,IAAAzC,OAAA,OAAAoH,OAAA,CAAA3E,IAAA,CAAA/G,YAAA,4BAAA8G,KAAA,YAAA/D,OAAA,GAAA+D,KAAA,CAAA9G,YAAA;YACA,IAAAmJ,iBAAA;cACA,IAAArD,EAAA,SAAAhB,QAAA,CAAAnD,aAAA,gCAAAmD,QAAA,CAAA3D,YAAA;cACAmD,OAAA,CAAAqH,GAAA,CAAAxP,cAAA,2CAAA2J,EAAA;cACA,IAAAgD,4BAAA;gBACAhE,QAAA,CAAAnE,oBAAA,+BAAAxE,cAAA,6CAAA2J,EAAA;cACA;YACA;YACA,IAAAkC,KAAA,GAAAqC,MAAA,IAAApB,QAAA,IAAAA,QAAA,CAAAjB,KAAA;YACA,IAAAA,KAAA;cACA1D,OAAA,CAAAqH,GAAA,CAAAxP,cAAA,gDAAAA,cAAA,sDAAA6L,KAAA;cACA,IAAAc,4BAAA;gBACAhE,QAAA,CAAAnE,oBAAA,+BAAAxE,cAAA,kDAAAA,cAAA,sDAAA6L,KAAA;cACA;YACA;YACA,IAAAkB,kBAAA;cACA,IAAA/B,UAAA,GAAArC,QAAA,CAAApD,gBAAA;cACA,IAAA9D,iBAAA,CAAAuJ,UAAA;gBACAA,UAAA;cACA;cACA,IAAAyE,WAAA,GAAAlP,iBAAA,CAAAF,iBAAA,CAAAsI,QAAA,CAAAnD,aAAA,yBAAAmD,QAAA,CAAA3D,YAAA,wBAAAgG,UAAA;cACA7C,OAAA,CAAAqH,GAAA,CAAAxP,cAAA,6CAAAyP,WAAA;cACA,IAAA9C,4BAAA;gBACAhE,QAAA,CAAAnE,oBAAA,+BAAAxE,cAAA,+CAAAyP,WAAA;cACA;YACA;YACA7E,IAAA,CAAA/G,YAAA,0BAAAsE,OAAA;UACA;UACA,OAAAyC,IAAA;QACA,OACA,IAAApD,GAAA;UAAA;UACA,IAAAvH,wCAAA,CAAAyM,gBAAA,EAAA/D,QAAA,CAAAnF,qBAAA,kCAAA8L,iBAAA;YACA,IAAAtC,iBAAA;cACA,KAAAzE,YAAA,CAAAf,GAAA,EAAAxH,cAAA;gBACA,IAAA2J,EAAA,SAAAhB,QAAA,CAAAnD,aAAA,gCAAAmD,QAAA,CAAA3D,YAAA;gBACAwC,GAAA,CAAAzC,uBAAA,iCAAA/E,cAAA,2CAAA2J,EAAA;gBACA,IAAAgD,4BAAA;kBACAhE,QAAA,CAAAnE,oBAAA,+BAAAxE,cAAA,6CAAA2J,EAAA;gBACA;cACA,OACA;gBACAX,qBAAA,CAAAoF,KAAA,sFAAApO,cAAA;cACA;YACA;YACA,IAAA6L,KAAA,GAAAqC,MAAA,IAAApB,QAAA,IAAAA,QAAA,CAAAjB,KAAA;YACA,IAAAA,KAAA;cACA,KAAAtD,YAAA,CAAAf,GAAA,EAAAxH,cAAA;gBACAwH,GAAA,CAAAzC,uBAAA,iCAAA/E,cAAA,gDAAAA,cAAA,sDAAA6L,KAAA;gBACA,IAAAc,4BAAA;kBACAhE,QAAA,CAAAnE,oBAAA,+BAAAxE,cAAA,kDAAAA,cAAA,sDAAA6L,KAAA;gBACA;cACA,OACA;gBACA7C,qBAAA,CAAAoF,KAAA,sFAAApO,cAAA;cACA;YACA;YACA,IAAA+M,kBAAA;cACA,IAAA/B,UAAA,GAAArC,QAAA,CAAApD,gBAAA;cACA,IAAA9D,iBAAA,CAAAuJ,UAAA;gBACAA,UAAA;cACA;cACA,KAAAzC,YAAA,CAAAf,GAAA,EAAAxH,cAAA;gBACA,IAAAyP,WAAA,GAAAlP,iBAAA,CAAAF,iBAAA,CAAAsI,QAAA,CAAAnD,aAAA,yBAAAmD,QAAA,CAAA3D,YAAA,wBAAAgG,UAAA;gBACAxD,GAAA,CAAAzC,uBAAA,iCAAA/E,cAAA,6CAAAyP,WAAA;gBACA,IAAA9C,4BAAA;kBACAhE,QAAA,CAAAnE,oBAAA,+BAAAxE,cAAA,+CAAAyP,WAAA;gBACA;cACA,OACA;gBACAzG,qBAAA,CAAAoF,KAAA,sFAAApO,cAAA;cACA;YACA;UACA;UACA,OAAAwH,GAAA;QACA;QACA,OAAA+D,SAAA;MACA;MACA6C,KAAA,CAAA1I,0BAAA,wDAAA0J,UAAA,EAAAtG,UAAA,EAAA4G,gBAAA;QACA,IAAAvC,oBAAA,WAAAN,kBAAA,GAAAM,oBAAA;UACA;UACA;UACA;UACA,KAAAc,uBAAA,6CACAA,uBAAA,qDACA,OAAAmB,UAAA,CAAAzF,EAAA,iBAAAyF,UAAA,CAAAzF,EAAA,CAAAyF,UAAA,CAAAzF,EAAA,CAAA1F,WAAA;YACAmL,UAAA,CAAAzF,EAAA;UACA;UACA,IAAAlI,iBAAA,CAAA2N,UAAA,CAAAlK,eAAA;YACAkK,UAAA,CAAAlK,eAAA,gCAAAyK,IAAA;UACA;UACA,IAAAC,IAAA,GAAAxP,mBAAA,CAAAgP,UAAA,EAAArP,oBAAA,CAAA8P,QAAA,EAAA9P,oBAAA,CAAA+P,YAAA,EAAA1B,KAAA,CAAArI,UAAA,KAAA+C,UAAA,EAAA4G,gBAAA;UACAtB,KAAA,CAAAvL,SAAA,qBAAAkN,KAAA,CAAAH,IAAA;QACA,OACA,IAAA/C,kBAAA,KAAAM,oBAAA;UACArF,sBAAA,CAAAsG,KAAA;QACA;QACA,EAAAvB,kBAAA;MACA;MACAuB,KAAA,CAAA4B,qBAAA,aAAAC,kBAAA;QACA,OAAAxG,WAAA,CAAAmE,oBAAA,EAAAD,oBAAA,IAAAsC,kBAAA;MACA;MACA7B,KAAA,CAAA8B,wBAAA,aAAAC,qBAAA;QACA,OAAA1G,WAAA,CAAAoE,uBAAA,EAAAF,oBAAA,IAAAwC,qBAAA;MACA;MACA,SAAA5B,cAAA;QACA,IAAA6B,QAAA,GAAA9O,WAAA;QACAiL,iBAAA;QACAC,eAAA;QACA2B,oBAAA;QACA1B,kBAAA,GAAA2D,QAAA,IAAAA,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAC,IAAA,CAAA/K,kBAAA;QACAoH,gBAAA;QACAC,4BAAA;QACAC,0BAAA;QACAC,kBAAA;QACAC,QAAA;QACAC,kBAAA;QACAC,iBAAA;QACAC,WAAA;QACAC,uBAAA;QACAC,oBAAA;QACAC,6BAAA;QACAC,aAAA;QACAC,oBAAA;QACAC,qBAAA;QACAC,uCAAA;QACAC,kBAAA;QACAC,aAAA;QACAC,oBAAA;QACAC,oBAAA;QACAC,uBAAA;QACAxE,WAAA,GAAAtI,qBAAA;QACAqN,KAAA,CAAA/E,WAAA,GAAAA,WAAA;QACAyE,cAAA;QACAC,0BAAA;QACAC,oBAAA;QACAC,uBAAA;QACAC,MAAA;MACA;MACA,SAAAY,kBAAAL,MAAA;QACAL,KAAA,CAAAzI,cAAA,yBAAA9D,cAAA,CAAA4M,MAAA,YAAApE,OAAA;UACA,IAAAoE,MAAA,GAAApE,OAAA,CAAAiG,GAAA;UACA,IAAAC,GAAA,GAAAzP,6BAAA,OAAA2N,MAAA,EAAAL,KAAA,CAAAvL,SAAA;UACA6J,gBAAA,GAAA6D,GAAA,CAAAC,SAAA,CAAAtE,WAAA,CAAAG,UAAA,EAAAf,cAAA;UACA2C,uBAAA,GAAAvB,gBAAA,CAAAjB,sBAAA;UACAkB,4BAAA,GAAAD,gBAAA,CAAAvJ,0BAAA;UACAyJ,0BAAA,GAAAF,gBAAA,CAAAzJ,0BAAA;UACAiK,uBAAA,GAAAR,gBAAA,CAAAxJ,0BAAA;UACAiK,oBAAA,GAAAT,gBAAA,CAAAxI,0BAAA;UACAsJ,uCAAA,MAAAiD,MAAA,CAAA/D,gBAAA,CAAAnJ,0BAAA,8DAAAmJ,gBAAA,CAAAT,eAAA,aAAAZ,yBAAA;UACAoC,kBAAA,GAAAf,gBAAA,CAAAjK,wBAAA;UACAuK,iBAAA,GAAAiB,uBAAA,4CAAAA,uBAAA;UACAlB,kBAAA,GAAAkB,uBAAA,oDAAAA,uBAAA;UACA,IAAAf,uBAAA;YACAD,WAAA,GAAA5D,WAAA;UACA;UACAiE,oBAAA,KAAAZ,gBAAA,CAAA3J,0BAAA;UACAgL,0BAAA,GAAArB,gBAAA,CAAAX,yBAAA;UACAiC,oBAAA,GAAAtB,gBAAA,CAAA/J,2BAAA;UACAmL,cAAA,GAAApB,gBAAA,CAAAV,aAAA;UACAkC,MAAA,GAAAxB,gBAAA,CAAAb,KAAA;QACA;MACA;MACA,SAAAoD,iBAAA;QACA,IAAAyB,OAAA,GAAAtC,KAAA,CAAAvL,SAAA,qBAAA8N,SAAA,CAAA7Q,0BAAA;QACA,IAAA4Q,OAAA;UACA5D,QAAA,GAAA4D,OAAA,CAAAE,MAAA,CAAAhO,YAAA;QACA;MACA;MACA;MACA,SAAAiO,mBAAApI,MAAA;QACA,IAAAqI,GAAA;QACA,IAAArI,MAAA,IAAAqF,cAAA;UACAjN,UAAA,CAAAiN,cAAA,YAAAiD,GAAA;YACA,IAAAA,GAAA,CAAAzL,kBAAA,kCAAAmD,MAAA,CAAAnD,kBAAA;cACAwL,GAAA;cACA;YACA;UACA;QACA;QACA,OAAAA,GAAA;MACA;MACA;MACA,SAAA9B,iBAAA;QACA,IAAAgC,KAAA,GAAAtK,cAAA;QACA,KAAAsK,KAAA;UACA;QACA;QACA,IAAAC,MAAA,GAAA7P,SAAA;QACA,IAAA8P,UAAA,GAAAF,KAAA,CAAAG,QAAA;QACA/C,KAAA,CAAAzI,cAAA,yBAAA9D,cAAA,CAAA6K,gBAAA;UACAa,qBAAA,KAAAb,gBAAA,CAAA1J,2BAAA;UACAoK,6BAAA,GAAAV,gBAAA,CAAAtJ,2BAAA;UACA,KAAAmK,qBAAA,KAAAhB,iBAAA;YACA+B,QAAA,CAAA5N,cAAA,CAAAuQ,MAAA,EAAAhL,SAAA;cACAmL,EAAA,EAAA1D,aAAA;cACA;cACA2D,GAAA,WAAAA,CAAAlI,WAAA,EAAAwB,KAAA,EAAAC,IAAA;gBACA,IAAA0G,SAAA;gBACA,KAAA/D,qBAAA,IAAAhB,iBAAA,IACA,CAAAgF,kBAAA,OAAA5G,KAAA,EAAAC,IAAA;gBACA;gBACA,EAAAsG,UAAA,IAAA1E,eAAA;kBACA,IAAA+D,GAAA,GAAApH,WAAA,CAAAoH,GAAA;kBACAe,SAAA,GAAAE,kBAAA,CAAA7G,KAAA,EAAAC,IAAA;kBACA,IAAA6G,OAAA,GAAArD,KAAA,CAAArK,0BAAA,0CAAAuN,SAAA,EAAA3G,KAAA,EAAAC,IAAA;kBACA,IAAA6G,OAAA,KAAA7G,IAAA;oBACAzB,WAAA,CAAAqG,GAAA,IAAAiC,OAAA;kBACA;kBACAlB,GAAA,CAAAmB,IAAA,GAAAJ,SAAA;gBACA;cACA;cACAK,GAAA,WAAAA,CAAAxI,WAAA,EAAAwB,KAAA;gBACA,KAAA4C,qBAAA;kBACA,IAAAqE,WAAA,GAAAzI,WAAA,CAAAoH,GAAA,GAAAmB,IAAA;kBACA,IAAAE,WAAA;oBACA;oBACAzI,WAAA,CAAA0I,IAAA,GAAA1I,WAAA,CAAA0I,IAAA,CAAAC,IAAA,WAAAC,QAAA;sBACAC,mBAAA,CAAA7I,WAAA,GAAA4I,QAAA,QAAA3M,WAAA,wBAAAuF,KAAA,EAAAoH,QAAA,EAAAH,WAAA;wBACA,IAAArS,EAAA;wBACA,IAAA0S,YAAA,IAAA1S,EAAA;0BACA2S,UAAA,GAAAH,QAAA,QAAA1M,gBAAA;wBACA,GACA9F,EAAA,CAAAuE,eAAA,+BACAvE,EAAA,CAAAuD,wBAAA,kCAAAqP,2BAAA,CAAAJ,QAAA,GACAxS,EAAA;wBACA,IAAA6N,6BAAA,IAAA2E,QAAA;0BACA,IAAAK,mBAAA;0BACAL,QAAA,CAAA5J,OAAA,CAAAkK,OAAA,WAAAnK,KAAA,EAAAD,IAAA;4BACA,IAAA4I,kBAAA,CAAA5I,IAAA;8BACAmK,mBAAA,CAAAnK,IAAA,IAAAC,KAAA;4BACA;0BACA;0BACA+J,YAAA,CAAAnO,eAAA,4BAAAsO,mBAAA;wBACA;wBACA,OAAAH,YAAA;sBACA;sBACA,OAAAF,QAAA;oBACA,GACAO,KAAA,WAAAC,MAAA;sBACAP,mBAAA,CAAA7I,WAAA,KAAAwB,KAAA,QAAAiH,WAAA;wBAAAY,KAAA,EAAAD,MAAA,CAAA1J,OAAA,IAAA7H,OAAA,CAAAuR,MAAA;sBAAA;sBACA,MAAAA,MAAA;oBACA;kBACA;gBACA;cACA;cACA;cACAE,KAAA,EAAAxJ,wBAAA,CAAAmF,KAAA,yFAAAhI,aAAA;YACA,SAAApE,WAAA;YACAuK,iBAAA;UACA,OACA,IAAA2E,UAAA,KAAA/C,oBAAA;YACA;YACA;YACA;YACA;YACA;YACA;YACAG,QAAA,CAAA5N,cAAA,CAAAuQ,MAAA,EAAAhL,SAAA;cACAmL,EAAA,EAAA1D,aAAA;cACA2D,GAAA,WAAAA,CAAAlI,WAAA,EAAAwB,KAAA,EAAAC,IAAA;gBACA;gBACA2G,kBAAA,OAAA5G,KAAA,EAAAC,IAAA;cACA;YACA;YACAuD,oBAAA;UACA;QACA;QACA,IAAA+C,UAAA;UACA;UACA;UACAD,MAAA,CAAAhL,SAAA,EAAAkL,QAAA,GAAAD,UAAA;QACA;MACA;MACA,SAAAwB,WAAAC,MAAA,EAAAC,QAAA,EAAAC,SAAA;QACAvE,QAAA,CAAA3N,eAAA,CAAAgS,MAAA,EAAAC,QAAA,EAAAC,SAAA;MACA;MACA,SAAA9D,eAAA;QACA,KAAAlI,uBAAA,CAAAuH,KAAA,EAAA/E,WAAA;UACA;QACA;QACA+E,KAAA,CAAAzI,cAAA,yBAAA9D,cAAA,CAAA6K,gBAAA;UACAY,oBAAA,KAAAZ,gBAAA,CAAA3J,0BAAA;UACA4J,4BAAA,GAAAD,gBAAA,CAAAvJ,0BAAA;UACA,KAAAmK,oBAAA,KAAAd,eAAA;YACA;YACAkG,UAAA,CAAAvL,cAAA;cACAiK,EAAA,EAAA1D,aAAA;cACA2D,GAAA,WAAAA,CAAAlI,WAAA,EAAA2J,MAAA,EAAAC,GAAA,EAAAC,KAAA;gBACA,KAAA1F,oBAAA;kBACA,IAAA9F,GAAA,GAAA2B,WAAA,CAAAnF,SAAA;kBACA,IAAA2E,QAAA,GAAAZ,YAAA,CAAAP,GAAA,EAAA6B,WAAA;kBACA,KAAAkI,kBAAA,CAAA/J,GAAA,EAAAuL,GAAA,KAAAE,uBAAA,CAAAzL,GAAA,EAAAmB,QAAA;oBACA,KAAAA,QAAA,KAAAA,QAAA,CAAAuK,kBAAA,CAAA7O,cAAA;sBACA;sBACAsE,QAAA,GAAAwK,YAAA,CAAA3L,GAAA,EAAAsL,MAAA,EAAAC,GAAA,EAAAC,KAAA;oBACA;oBACA;oBACAI,2BAAA,CAAA5L,GAAA,EAAAmB,QAAA;kBACA;gBACA;cACA;cACA8J,KAAA,EAAAxJ,wBAAA,CAAAmF,KAAA,sDAAAlI,YAAA,aAAAE,aAAA;YACA;YACA;YACAsM,UAAA,CAAAvL,cAAA;cACAiK,EAAA,EAAA1D,aAAA;cACA2D,GAAA,WAAAA,CAAAlI,WAAA,EAAA8B,OAAA;gBACA,KAAAqC,oBAAA;kBACA,IAAA9F,GAAA,GAAA2B,WAAA,CAAAnF,SAAA;kBACA,IAAA2E,QAAA,GAAAZ,YAAA,CAAAP,GAAA,EAAA6B,WAAA;kBACA,IAAA4J,uBAAA,CAAAzL,GAAA,EAAAmB,QAAA,MAAAA,QAAA,CAAAuK,kBAAA,CAAApO,cAAA;oBACAuO,aAAA,QAAA1K,QAAA;oBACAA,QAAA,CAAAlE,sBAAA,kCAAAnE,gBAAA;oBACA8N,KAAA,CAAArK,0BAAA,0CAAA4E,QAAA,EAAA4C,SAAA,EAAAA,SAAA,EAAA/D,GAAA;oBACAmB,QAAA,CAAAuK,kBAAA,CAAApO,cAAA;kBACA;gBACA;cACA;cACA2N,KAAA,EAAAxJ,wBAAA,CAAAmF,KAAA,sDAAAlI,YAAA,GAAAE,aAAA;YACA;YACA;YACAsM,UAAA,CAAAvL,cAAA;cACAiK,EAAA,EAAA1D,aAAA;cACA2D,GAAA,WAAAA,CAAAlI,WAAA;gBACA,KAAAmE,oBAAA;kBACA,IAAA9F,GAAA,GAAA2B,WAAA,CAAAnF,SAAA;kBACA,IAAA2E,QAAA,GAAAZ,YAAA,CAAAP,GAAA,EAAA6B,WAAA;kBACA,IAAA4J,uBAAA,CAAAzL,GAAA,EAAAmB,QAAA,MAAAA,QAAA,CAAAuK,kBAAA,CAAA1Q,eAAA;oBACAmG,QAAA,CAAApG,YAAA;oBACAoG,QAAA,CAAAuK,kBAAA,CAAA1Q,eAAA;kBACA;gBACA;cACA;cACAiQ,KAAA,EAAAxJ,wBAAA,CAAAmF,KAAA,uDAAAlI,YAAA,cAAAE,aAAA;YACA;YACA;YACAsM,UAAA,CAAAvL,cAAA;cACAiK,EAAA,EAAA1D,aAAA;cACA2D,GAAA,WAAAA,CAAAlI,WAAA,EAAAV,MAAA,EAAAP,KAAA;gBACA,KAAAoF,oBAAA;kBACA,IAAA9F,GAAA,GAAA2B,WAAA,CAAAnF,SAAA;kBACA,IAAA2E,QAAA,GAAAZ,YAAA,CAAAP,GAAA,EAAA6B,WAAA;kBACA,IAAAV,QAAA,IAAAsK,uBAAA,CAAAzL,GAAA,EAAAmB,QAAA;oBACAX,oBAAA,CAAAR,GAAA,EAAAiB,MAAA,EAAAP,KAAA;oBACA,IAAAyE,4BAAA,IAAAkE,kBAAA,CAAApI,MAAA;sBACA,IAAAE,QAAA;wBACAA,QAAA,CAAAnE,oBAAA,+BAAAiE,MAAA,IAAAP,KAAA;sBACA;oBACA;kBACA;gBACA;cACA;cACAuK,KAAA,EAAAxJ,wBAAA,CAAAmF,KAAA,kEAAAlI,YAAA,yBAAAE,aAAA;YACA;YACAoG,eAAA;UACA;QACA;MACA;MACA,SAAA+E,mBAAA/J,GAAA,EAAA8L,OAAA,EAAA1I,IAAA;QACA,IAAA2I,UAAA;QACA,IAAAC,MAAA,MAAA9R,QAAA,CAAA4R,OAAA,KAAAA,OAAA,QAAAP,GAAA,SAAAO,OAAA,SAAAhO,kBAAA;QACA;QACAzE,UAAA,CAAA2M,uCAAA,YAAAiG,KAAA;UACA,IAAAC,QAAA,GAAAD,KAAA;UACA,IAAA/R,QAAA,CAAA+R,KAAA;YACAC,QAAA,OAAAC,MAAA,CAAAF,KAAA;UACA;UACA,KAAAF,UAAA;YACAA,UAAA,GAAAG,QAAA,CAAAE,IAAA,CAAAJ,MAAA;UACA;QACA;QACA;QACA,IAAAD,UAAA;UACA,OAAAA,UAAA;QACA;QACA,IAAAtJ,GAAA,GAAAV,QAAA,CAAAiK,MAAA;QACA,IAAAK,IAAA,GAAAtK,QAAA,CAAAiK,MAAA;QACA,IAAAvJ,GAAA,WAAA4J,IAAA,WAAAA,IAAA,GAAA5J,GAAA;UACAA,GAAA,GAAA4J,IAAA;QACA;QACA,IAAA5J,GAAA;UACA;UACAuJ,MAAA,GAAAA,MAAA,CAAAM,SAAA,IAAA7J,GAAA;QACA;QACA;QACA,KAAAxI,iBAAA,CAAA+F,GAAA;UACA;UACA+L,UAAA,GAAA/L,GAAA,CAAA3H,oBAAA,cAAA2T,MAAA,CAAA3T,oBAAA;QACA,OACA,KAAA4B,iBAAA,CAAA6R,OAAA;UAAA;UACA;UACAC,UAAA,WAAAD,OAAA,gBAAAA,OAAA,CAAAzT,oBAAA,wBACA+K,IAAA,GAAAA,IAAA,CAAA/K,oBAAA;QACA;QACA;QACA,KAAA0T,UAAA,IAAAC,MAAA,IAAAhT,qCAAA,CAAAgT,MAAA;UACAD,UAAA;QACA;QACA,IAAAA,UAAA;UACA;UACA,KAAAlG,aAAA,CAAAmG,MAAA;YACAnG,aAAA,CAAAmG,MAAA;UACA;QACA,OACA;UACA;UACA,IAAAnG,aAAA,CAAAmG,MAAA;YACAD,UAAA;UACA;QACA;QACA,OAAAA,UAAA;MACA;MACA;MACA;MACA;MACA,SAAAN,wBAAAzL,GAAA,EAAAmB,QAAA,EAAAoL,yBAAA;QACA,IAAAC,cAAA;QACA,IAAAC,WAAA,GAAAzH,eAAA;QACA,KAAA/K,iBAAA,CAAA+F,GAAA;UACAwM,cAAA,GAAAD,yBAAA,cAAAtS,iBAAA,CAAAkH,QAAA;QACA;QACA;QACA,OAAAsL;QACA;QAAA,GACAD,cAAA;MACA;MACA,SAAAE,wBAAA;QACA,IAAAC,mBAAA;QACA,IAAA/F,KAAA,CAAAvL,SAAA,wBAAAuL,KAAA,CAAAvL,SAAA,qBAAAuR,WAAA;UACAD,mBAAA,GAAA/F,KAAA,CAAAvL,SAAA,qBAAAuR,WAAA;QACA;QACA;QACA,KAAAD,mBAAA,IAAArH,QAAA,IAAAA,QAAA,CAAAuH,cAAA;UACAF,mBAAA,GAAAhU,sCAAA,CAAA2M,QAAA,CAAAuH,cAAA;QACA;QACA,OAAAF,mBAAA;MACA;MACA,SAAAhB,aAAA3L,GAAA,EAAAsL,MAAA,EAAAC,GAAA,EAAAC,KAAA;QACA,IAAAzT,EAAA;QACA,IAAA4U,mBAAA,GAAAD,uBAAA;QACA,IAAAI,OAAA,GAAAH,mBAAA,IAAAA,mBAAA,CAAAvQ,iBAAA,gCAAA1C,aAAA;QACA,IAAAqT,MAAA,GAAAlS,SAAA,CAAAnB,aAAA;QACA,IAAAsT,cAAA,GAAAhN,GAAA,CAAAxB,mBAAA,IAAAwB,GAAA,CAAAxB,mBAAA;UAAA0B,EAAA;UAAAC,CAAA;QAAA;QACA,IAAA8M,YAAA,GAAAD,cAAA,CAAA7M,CAAA,GAAA6M,cAAA,CAAA7M,CAAA;QACA,IAAAgB,QAAA,GAAA8L,YAAA,CAAApL,WAAA,IAAAoL,YAAA,CAAApL,WAAA,SAAAxD,UAAA,CAAAyO,OAAA,EAAAC,MAAA,EAAAnG,KAAA,CAAArI,UAAA,MAAAxG,EAAA,GAAA6O,KAAA,CAAAhE,IAAA,cAAA7K,EAAA,uBAAAA,EAAA,CAAA6U,WAAA;QACAzL,QAAA,CAAApD,gBAAA,6BAAA4O,mBAAA,IAAAA,mBAAA,CAAAxQ,oBAAA;QACAgF,QAAA,CAAAxE,WAAA,yBAAA2O,MAAA;QACAnK,QAAA,CAAAjE,gBAAA,6BAAAqO,GAAA;QACApK,QAAA,CAAAuK,kBAAA,CAAA7O,cAAA;QACAsE,QAAA,CAAAnE,oBAAA;QACAmE,QAAA,CAAAqK,KAAA,GAAAA,KAAA;QACArK,QAAA,CAAAtF,sBAAA,kCAAAuJ,0BAAA;QACA,OAAAjE,QAAA;MACA;MACA,SAAAyK,4BAAA5L,GAAA,EAAAmB,QAAA;QACAA,QAAA,CAAAuK,kBAAA,CAAA/N,2BAAA,sCAAAlE,OAAA,CAAAuG,GAAA;UACA,IAAAjI,EAAA;UACA;YACA,IAAAiI,GAAA,IAAAA,GAAA,CAAAkN,UAAA,UAAAzB,uBAAA,CAAAzL,GAAA,EAAAmB,QAAA;cACAgM,eAAA,CAAAnN,GAAA;YACA;UACA,EACA,OAAAK,CAAA;YACA,IAAA+M,aAAA,GAAA5T,OAAA,CAAA6G,CAAA;YACA;YACA,KAAA+M,aAAA,IAAArL,QAAA,CAAAqL,aAAA,CAAAtP,kBAAA;cACAwC,sBAAA,CAAAsG,KAAA,qDAAAlI,YAAA,yCAAAE,aAAA,GAAA7G,EAAA,OACAA,EAAA,CAAAmD,2BAAA,sCAAAgG,gCAAA,CAAAlB,GAAA,EAAA6B,WAAA,GACA9J,EAAA,CAAA+D,cAAA,yBAAAsR,aAAA,EACArV,EAAA;YACA;UACA;QACA,GAAAmO,aAAA;MACA;MACA,SAAAmH,iBAAArN,GAAA;QACA;UACA,IAAAsN,YAAA,GAAAtN,GAAA,CAAAsN,YAAA;UACA,IAAAA,YAAA,WAAAA,YAAA;YACA;YACA,OAAAtN,GAAA,CAAA3C,kBAAA;UACA;QACA,EACA,OAAAgD,CAAA;UACA;QAAA;QAEA;MACA;MACA,SAAA8M,gBAAAnN,GAAA;QACA,IAAAmB,QAAA,GAAAZ,YAAA,CAAAP,GAAA,EAAA6B,WAAA;QACAV,QAAA,CAAA/D,2BAAA,uCAAAtE,gBAAA;QACAqI,QAAA,CAAAvD,WAAA,yBAAAoC,GAAA,CAAApC,WAAA;QACA,SAAA2P,gBAAAlN,CAAA,EAAAmN,WAAA;UACA,IAAAC,UAAA,GAAAD,WAAA;UACAC,UAAA,6BAAAvM,gCAAA,CAAAlB,GAAA,EAAA6B,WAAA;UACA,IAAAxB,CAAA;YACAoN,UAAA,gBAAAjU,OAAA,CAAA6G,CAAA;UACA;UACAmB,qBAAA,CAAAoF,KAAA,qDAAA5H,kCAAA,iBAAAH,cAAA,EAAA4O,UAAA;QACA;QACAC,sBAAA,mBAAAvM,QAAA;UACA;YACA,IAAAyG,UAAA,GAAAzG,QAAA,CAAA/C,uBAAA,wCAAA+G,4BAAA;cACA,IAAApN,EAAA;cACA,IAAA0S,YAAA,IAAA1S,EAAA;gBACA2S,UAAA,EAAA1K,GAAA,CAAAnC,gBAAA;cACA,GACA9F,EAAA,CAAAuE,eAAA,+BACAvE,EAAA,CAAAuD,wBAAA,kCAAAqS,0BAAA,CAAA3N,GAAA,GACAjI,EAAA,CAAA6V,IAAA,GAAA5N,GAAA,CAAAsN,YAAA,EACAvV,EAAA,CAAAsF,kBAAA,4BAAAgQ,gBAAA,CAAArN,GAAA,GACAjI,EAAA,CAAAwS,QAAA,GAAAvK,GAAA,CAAA7C,aAAA,0BACApF,EAAA;cACA,IAAA6N,6BAAA;gBACA,IAAAjF,OAAA,GAAAX,GAAA,CAAA/D,2BAAA;gBACA,IAAA0E,OAAA;kBACA;kBACA;kBACA,IAAAkN,GAAA,GAAAtT,OAAA,CAAAoG,OAAA,EAAAmN,KAAA;kBACA,IAAAC,mBAAA;kBACA1U,UAAA,CAAAwU,GAAA,YAAAG,IAAA;oBACA,IAAAC,KAAA,GAAAD,IAAA,CAAAF,KAAA;oBACA,IAAA7M,MAAA,GAAAgN,KAAA,CAAAC,KAAA;oBACA,IAAAxN,KAAA,GAAAuN,KAAA,CAAAE,IAAA;oBACA,IAAA9E,kBAAA,CAAApI,MAAA;sBACA8M,mBAAA,CAAA9M,MAAA,IAAAP,KAAA;oBACA;kBACA;kBACA+J,YAAA,CAAAnO,eAAA,4BAAAyR,mBAAA;gBACA;cACA;cACA,OAAAtD,YAAA;YACA;YACA,IAAAnJ,UAAA;YACA;cACA,MAAA2E,kBAAA;gBACA3E,UAAA,GAAA2E,kBAAA;kBAAAmI,MAAA,EAAApO,GAAA,CAAApC,WAAA;kBAAAoC,GAAA,EAAAA;gBAAA;cACA;YACA,EACA,OAAAK,CAAA;cACAmB,qBAAA,CAAAoF,KAAA,yEAAA7H,4BAAA;YACA;YACA,IAAA6I,UAAA;cACA,IAAAtG,UAAA,KAAAyC,SAAA;gBACA6D,UAAA,CAAA9M,cAAA,6BAAA7C,QAAA,CAAAA,QAAA,KAAA2P,UAAA,CAAAtG,UAAA,GAAAA,UAAA;cACA;cACA,IAAA+M,aAAA,GAAAlN,QAAA,CAAAjF,oBAAA;cACA2L,yBAAA,CAAAxB,uBAAA,EAAAO,KAAA,CAAAvL,SAAA,sBAAA8F,QAAA,EAAAyG,UAAA,QAAAyG,aAAA;YACA,OACA;cACAd,eAAA;gBACAe,eAAA,EAAAnN,QAAA,CAAAlE,sBAAA;gBACAsR,oBAAA,EAAApN,QAAA,CAAA/D,2BAAA;cACA;YACA;UACA,UACA;YACA;YACA;cACA,IAAA4P,cAAA,GAAAhN,GAAA,CAAAxB,mBAAA;gBAAA2B,CAAA;cAAA;cACA,IAAA8M,YAAA,GAAAD,cAAA,CAAA7M,CAAA;cACA,IAAA8M,YAAA,CAAApL,WAAA;gBACAoL,YAAA,CAAApL,WAAA;cACA;YACA,EACA,OAAAxB,CAAA;cACA;YAAA;UAEA;QACA,aAAAA,CAAA;UACAkN,eAAA,CAAAlN,CAAA;QACA;MACA;MACA,SAAAsN,2BAAA3N,GAAA;QACA,IAAAjI,EAAA;QACA;UACA,IAAAyW,qBAAA,GAAAxO,GAAA,CAAA/D,2BAAA;UACA,IAAAuS,qBAAA;YACA,IAAAC,KAAA,GAAA1M,QAAA,CAAAyM,qBAAA,CAAA1Q,kBAAA,+BAAAtF,cAAA;YACA,IAAAiW,KAAA;cACA,IAAAC,cAAA,GAAA1O,GAAA,CAAA2O,iBAAA,CAAAnW,cAAA;cACA,OAAAE,kCAAA,CAAAgW,cAAA;YACA;UACA;QACA,EACA,OAAArO,CAAA;UACAmB,qBAAA,CAAAoF,KAAA,sEAAA9H,wBAAA,GAAA/G,EAAA,OACAA,EAAA,CAAAmD,2BAAA,sCAAAgG,gCAAA,CAAAlB,GAAA,EAAA6B,WAAA,GACA9J,EAAA,CAAA+D,cAAA,yBAAAtC,OAAA,CAAA6G,CAAA,GACAtI,EAAA;QACA;MACA;MACA,SAAA8T,cAAA+B,IAAA,EAAAzM,QAAA;QACA,IAAAA,QAAA,CAAAjE,gBAAA,8BAAAuI,WAAA,IAAAC,uBAAA;UACA,IAAAkJ,aAAA,GAAA7U,cAAA;UACA,IAAA6U,aAAA,IAAA5U,UAAA,CAAA4U,aAAA,CAAAC,IAAA;YACA5P,UAAA;YACA,IAAA6P,MAAA,GAAArJ,WAAA,GAAAmI,IAAA,SAAA3O,UAAA;YACA2P,aAAA,CAAAC,IAAA,CAAAC,MAAA;YACA,IAAAC,OAAA,GAAAH,aAAA,CAAAI,gBAAA,CAAAF,MAAA;YACA,IAAAC,OAAA,IAAAA,OAAA,CAAAtS,WAAA;cACA0E,QAAA,CAAArE,cAAA,2BAAAiS,OAAA;YACA;UACA;QACA;MACA;MACA,SAAArB,uBAAAuB,aAAA,EAAA9N,QAAA,EAAA+N,aAAA,EAAAC,WAAA;QACA,IAAAC,QAAA,GAAAjO,QAAA,CAAArE,cAAA;QACA,IAAAuS,WAAA,GAAAtV,cAAA;QACA,IAAAuV,WAAA,GAAA/I,0BAAA;QACA,IAAAgJ,UAAA,GAAA/I,oBAAA;QACA,IAAAgJ,UAAA,GAAArO,QAAA,CAAAjE,gBAAA;QACA,IAAAuS,OAAA;QACA,UAAAC,qBAAA;UACA;YACA,IAAAL,WAAA,IAAAD,QAAA;cACAK,OAAA;cACA,IAAAE,UAAA;cACA,IAAAZ,OAAA,GAAAM,WAAA,CAAAO,UAAA;cACA,SAAAC,EAAA,GAAAd,OAAA,CAAAtS,WAAA,4BAAAoT,EAAA,OAAAA,EAAA;gBACA,IAAAC,KAAA,GAAAf,OAAA,CAAAc,EAAA;gBACA,IAAAC,KAAA;kBACA,IAAAA,KAAA,CAAAC,SAAA;oBACA,IAAAD,KAAA,CAAAb,aAAA,KAAAA,aAAA,KACAlN,QAAA,CAAA+N,KAAA,CAAAlT,SAAA,sBAAA4S,UAAA,YAAAzN,QAAA,CAAAyN,UAAA,EAAAM,KAAA,CAAAlT,SAAA;sBACA+S,UAAA,GAAAG,KAAA;oBACA;kBACA,OACA,IAAAA,KAAA,CAAAC,SAAA,eAAAD,KAAA,CAAAlT,SAAA,yBAAAwS,QAAA,CAAAxS,SAAA;oBACA;oBACAuE,QAAA,CAAApE,gBAAA,6BAAA4S,UAAA;oBACA;kBACA;kBACA,IAAAG,KAAA,CAAApS,eAAA,4BAAA0R,QAAA,CAAA1R,eAAA;oBACA;oBACA;kBACA;gBACA;cACA;YACA;YACA,KAAA0R,QAAA;YAAA;YACAjO,QAAA,CAAApE,gBAAA;YAAA;YACA0S,OAAA,IAAAH,WAAA;YAAA;YACAnO,QAAA,CAAAqK,KAAA;cAAA;cACA,IAAA4D,QAAA,IAAApV,UAAA,CAAAqV,WAAA,CAAAW,UAAA;gBACA;gBACAX,WAAA,CAAAW,UAAA,CAAAZ,QAAA,CAAAxS,SAAA;cACA;cACAuE,QAAA,CAAA8O,YAAA,GAAAR,OAAA;cACA;cACAP,aAAA;YACA,OACA;cACA;cACA;cACA;cACAxU,eAAA,CAAAgV,oBAAA,EAAAH,UAAA;YACA;UACA,EACA,OAAAlP,CAAA;YACA8O,WAAA,CAAA9O,CAAA;UACA;QACA;MACA;MACA,SAAA2J,mBAAA7G,KAAA,EAAAC,IAAA;QACA,IAAArL,EAAA;QACA,IAAA4U,mBAAA,GAAAD,uBAAA;QACA,IAAAI,OAAA,GAAAH,mBAAA,IAAAA,mBAAA,CAAAvQ,iBAAA,gCAAA1C,aAAA;QACA,IAAAqT,MAAA,GAAAlS,SAAA,CAAAnB,aAAA;QACA,IAAAyH,QAAA,OAAA9C,UAAA,CAAAyO,OAAA,EAAAC,MAAA,EAAAnG,KAAA,CAAArI,UAAA,MAAAxG,EAAA,GAAA6O,KAAA,CAAAhE,IAAA,cAAA7K,EAAA,uBAAAA,EAAA,CAAA6U,WAAA;QACAzL,QAAA,CAAApD,gBAAA,6BAAA4O,mBAAA,IAAAA,mBAAA,CAAAxQ,oBAAA;QACAgF,QAAA,CAAAlE,sBAAA,kCAAAnE,gBAAA;QACAqI,QAAA,CAAAtF,sBAAA,kCAAAuJ,0BAAA;QACA,IAAAoK,UAAA;QACA,IAAArM,KAAA,YAAA/D,OAAA;UACAoQ,UAAA,IAAArM,KAAA,QAAAoI,GAAA;QACA,OACA;UACAiE,UAAA,GAAArM,KAAA;QACA;QACA,IAAAqM,UAAA;UACA,IAAAU,UAAA,GAAApW,WAAA;UACA,IAAAoW,UAAA,IAAAA,UAAA,CAAAC,IAAA;YACAX,UAAA,GAAA5U,QAAA,CAAAsV,UAAA,CAAAC,IAAA;UACA;QACA;QACAhP,QAAA,CAAAjE,gBAAA,6BAAAsS,UAAA;QACA,IAAAlE,MAAA;QACA,IAAAlI,IAAA,IAAAA,IAAA,CAAAzG,WAAA;UACA2O,MAAA,GAAAlI,IAAA,CAAAzG,WAAA;QACA,OACA,IAAAwG,KAAA,IAAAA,KAAA,YAAA/D,OAAA;UACAkM,MAAA,GAAAnI,KAAA,CAAAxG,WAAA;QACA;QACAwE,QAAA,CAAAxE,WAAA,yBAAA2O,MAAA;QACA,IAAA8E,cAAA;QACA,IAAAjL,4BAAA;UACA,IAAAxE,OAAA,OAAAoH,OAAA,EAAA3E,IAAA,GAAAA,IAAA,CAAA/G,YAAA,iCAAA8G,KAAA,YAAA/D,OAAA,GAAA+D,KAAA,CAAA9G,YAAA;UACAsE,OAAA,CAAAkK,OAAA,WAAAnK,KAAA,EAAA6I,GAAA;YACA,IAAAF,kBAAA,CAAAE,GAAA;cACA6G,cAAA,CAAA7G,GAAA,IAAA7I,KAAA;YACA;UACA;QACA;QACAS,QAAA,CAAAnE,oBAAA,iCAAAoT,cAAA;QACAvE,aAAA,CAAApN,SAAA,EAAA0C,QAAA;QACA,OAAAA,QAAA;MACA;MACA,SAAAkP,kCAAAlN,KAAA;QACA,IAAA1D,MAAA;QACA;UACA,KAAAxF,iBAAA,CAAAkJ,KAAA;YACA,WAAAA,KAAA;cACA1D,MAAA,cAAAwJ,MAAA,CAAA9F,KAAA;YACA,OACA;cACA1D,MAAA,cAAAwJ,MAAA,CAAA9F,KAAA,CAAAoI,GAAA;YACA;UACA;QACA,EACA,OAAAlL,CAAA;UACAC,sBAAA,CAAAsG,KAAA;YAAA5D,SAAA,EAAAxJ,OAAA,CAAA6G,CAAA;UAAA;QACA;QACA,OAAAZ,MAAA;MACA;MACA,SAAA+K,oBAAA7I,WAAA,EAAAyM,MAAA,EAAAjL,KAAA,EAAAoH,QAAA,EAAApJ,QAAA,EAAAmP,WAAA,EAAAhP,UAAA;QACA,KAAAH,QAAA;UACA;QACA;QACA,SAAAoP,kBAAAnP,KAAA,EAAAf,CAAA,EAAAmN,WAAA;UACA,IAAAC,UAAA,GAAAD,WAAA;UACAC,UAAA,8BAAA4C,iCAAA,CAAAlN,KAAA;UACA,IAAA9C,CAAA;YACAoN,UAAA,gBAAAjU,OAAA,CAAA6G,CAAA;UACA;UACAmB,qBAAA,CAAAoF,KAAA,EAAAxF,KAAA,EAAApC,kCAAA,kBAAAH,cAAA,EAAA4O,UAAA;QACA;QACAtM,QAAA,CAAA/D,2BAAA,uCAAAtE,gBAAA;QACAqI,QAAA,CAAAvD,WAAA,yBAAAwQ,MAAA;QACAV,sBAAA,CAAAjP,SAAA,EAAA0C,QAAA;UACA,IAAAyG,UAAA,GAAAzG,QAAA,CAAA/C,uBAAA,yCAAA+G,4BAAA,EAAAmL,WAAA;UACA,IAAAhP,UAAA;UACA;YACA,MAAA2E,kBAAA;cACA3E,UAAA,GAAA2E,kBAAA;gBAAAmI,MAAA,EAAAA,MAAA;gBAAAtC,OAAA,EAAA3I,KAAA;gBAAAoH,QAAA,EAAAA;cAAA;YACA;UACA,EACA,OAAAlK,CAAA;YACAmB,qBAAA,CAAAoF,KAAA,yEAAA7H,4BAAA;UACA;UACA,IAAA6I,UAAA;YACA,IAAAtG,UAAA,KAAAyC,SAAA;cACA6D,UAAA,CAAA9M,cAAA,6BAAA7C,QAAA,CAAAA,QAAA,KAAA2P,UAAA,CAAAtG,UAAA,GAAAA,UAAA;YACA;YACA,IAAA+M,aAAA,GAAAlN,QAAA,CAAAjF,oBAAA;YACA2L,yBAAA,CAAAxB,uBAAA,EAAAO,KAAA,CAAAvL,SAAA,sBAAA8F,QAAA,EAAAyG,UAAA,QAAAyG,aAAA;UACA,OACA;YACAkC,iBAAA;cACAjC,eAAA,EAAAnN,QAAA,CAAAlE,sBAAA;cACAsR,oBAAA,EAAApN,QAAA,CAAA/D,2BAAA;YACA;UACA;QACA,aAAAiD,CAAA;UACAkQ,iBAAA,qEAAAlQ,CAAA;QACA;MACA;MACA,SAAAsK,4BAAAJ,QAAA;QACA,IAAAxS,EAAA;QACA,IAAAwS,QAAA,IAAAA,QAAA,CAAAlO,YAAA;UACA;YACA,IAAAqS,cAAA,GAAAnE,QAAA,CAAAlO,YAAA,wBAAAmU,GAAA,CAAAhY,cAAA;YACA,OAAAE,kCAAA,CAAAgW,cAAA;UACA,EACA,OAAArO,CAAA;YACAmB,qBAAA,CAAAoF,KAAA,sEAAA9H,wBAAA,GAAA/G,EAAA;cACA0Y,uBAAA,EAAAJ,iCAAA,CAAA9F,QAAA;YACA,GACAxS,EAAA,CAAA+D,cAAA,yBAAAtC,OAAA,CAAA6G,CAAA,GACAtI,EAAA;UACA;QACA;MACA;MACA,SAAA8P,0BAAA6I,YAAA,EAAA9N,IAAA,EAAAzB,QAAA,EAAAyG,UAAA,EAAAtG,UAAA,EAAA4G,gBAAA;QACA,IAAAnQ,EAAA;QACA,IAAA0H,MAAA;QACA,IAAA4D,iBAAA,GAAAqN,YAAA,CAAAjU,WAAA;QACA,IAAA4G,iBAAA;UACA,IAAAR,OAAA,IAAA9K,EAAA;YACAqQ,IAAA,EAAAR;UACA,GACA7P,EAAA,CAAA+C,cAAA,0BAAAwG,UAAA,EACAvJ,EAAA,CAAAsW,aAAA,GAAAnG,gBAAA,EACAnQ,EAAA,CAAA0L,OAAA,GAAAtC,QAAA,GAAAA,QAAA,CAAA/F,YAAA,gCACArD,EAAA,CAAA2L,OAAA,GAAAvC,QAAA,KAAAA,QAAA,CAAApG,YAAA,iCACAhD,EAAA;UACA0H,MAAA,GAAAkD,2BAAA,CAAAC,IAAA,EAAA8N,YAAA,EAAA7N,OAAA;QACA;QACA,IAAApD,MAAA;UACAmH,KAAA,CAAA1I,0BAAA,4CAAA0J,UAAA,EAAAtG,UAAA,EAAA4G,gBAAA;QACA;MACA;IACA;IACA,OAAAtD,KAAA;EACA;EACA;EAGAF,WAAA,CAAAiM,SAAA,CAAAC,gBAAA,aAAAxI,IAAA,EAAAyI,OAAA;IACA,KAAAC,WAAA,CAAA1I,IAAA,EAAAyI,OAAA;EACA;EACA;;;EAUA;AAUO;AACP;AACA;AACA;AACA;AACA;AACA;EACAnM,WAAA,CAAAiM,SAAA,CAAAjI,wBAAA,aAAAC,qBAAA;IACA;EACA;EACA;EACAjE,WAAA,CAAAG,UAAA;EASA,OAAAH,WAAA;AACA,EAAAzL,mBAAA;AACA,SAAAyL,WAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}