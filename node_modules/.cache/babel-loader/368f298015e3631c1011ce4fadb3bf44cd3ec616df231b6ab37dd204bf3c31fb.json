{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Web, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\n\"use strict\";\n\nvar _a, _b, _c, _d;\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { AnalyticsPlugin } from \"@microsoft/applicationinsights-analytics-js\";\nimport { CfgSyncPlugin } from \"@microsoft/applicationinsights-cfgsync-js\";\nimport { Sender } from \"@microsoft/applicationinsights-channel-js\";\nimport { AnalyticsPluginIdentifier, DEFAULT_BREEZE_PATH, PropertiesPluginIdentifier, ThrottleMgr, parseConnectionString } from \"@microsoft/applicationinsights-common\";\nimport { AppInsightsCore, _throwInternal, addPageHideEventListener, addPageUnloadEventListener, cfgDfMerge, cfgDfValidate, createDynamicConfig, createProcessTelemetryContext, createUniqueNamespace, doPerf, hasDocument, hasWindow, isArray, isFeatureEnabled, isFunction, isNullOrUndefined, isReactNative, isString, mergeEvtNamespace, onConfigChange, proxyAssign, proxyFunctions, removePageHideEventListener, removePageUnloadEventListener } from \"@microsoft/applicationinsights-core-js\";\nimport { AjaxPlugin as DependenciesPlugin } from \"@microsoft/applicationinsights-dependencies-js\";\nimport { PropertiesPlugin } from \"@microsoft/applicationinsights-properties-js\";\nimport { createAsyncPromise, createPromise, doAwaitResponse } from \"@nevware21/ts-async\";\nimport { arrForEach, arrIndexOf, isPromiseLike, objDefine, objForEachKey, strIndexOf, throwUnsupported } from \"@nevware21/ts-utils\";\nimport { CONFIG_ENDPOINT_URL, STR_ADD_TELEMETRY_INITIALIZER, STR_CLEAR_AUTHENTICATED_USER_CONTEXT, STR_EVT_NAMESPACE, STR_FLUSH, STR_GET_COOKIE_MGR, STR_GET_PLUGIN, STR_POLL_INTERNAL_LOGS, STR_SET_AUTHENTICATED_USER_CONTEXT, STR_SNIPPET, STR_START_TRACK_EVENT, STR_START_TRACK_PAGE, STR_STOP_TRACK_EVENT, STR_STOP_TRACK_PAGE, STR_TRACK_DEPENDENCY_DATA, STR_TRACK_EVENT, STR_TRACK_EXCEPTION, STR_TRACK_METRIC, STR_TRACK_PAGE_VIEW, STR_TRACK_TRACE } from \"./InternalConstants\";\nimport { _DYN_ADD_HOUSEKEEPING_BEF2, _DYN_CONNECTION_STRING, _DYN_CONTEXT, _DYN_ENDPOINT_URL, _DYN_INGESTIONENDPOINT, _DYN_INSTRUMENTATIONKEY0, _DYN_INSTRUMENTATION_KEY, _DYN_ONUNLOAD_FLUSH, _DYN_QUEUE, _DYN_SEND_MESSAGE, _DYN_UPDATE_SNIPPET_DEFIN3, _DYN_USER_OVERRIDE_ENDPOI1, _DYN_VERSION } from \"./__DynamicConstants\";\nvar _internalSdkSrc;\n// This is an exclude list of properties that should not be updated during initialization\n// They include a combination of private and internal property names\nvar _ignoreUpdateSnippetProperties = [STR_SNIPPET, \"dependencies\", \"properties\", \"_snippetVersion\", \"appInsightsNew\", \"getSKUDefaults\"];\nvar IKEY_USAGE = \"iKeyUsage\";\nvar CDN_USAGE = \"CdnUsage\";\nvar SDK_LOADER_VER = \"SdkLoaderVer\";\nvar UNDEFINED_VALUE = undefined;\nvar default_limit = {\n  samplingRate: 100,\n  maxSendNumber: 1\n};\nvar default_interval = {\n  monthInterval: 3,\n  daysOfMonth: [28]\n};\nvar default_throttle_config = {\n  disabled: true,\n  limit: cfgDfMerge(default_limit),\n  interval: cfgDfMerge(default_interval)\n};\n// We need to include all properties that we only reference that we want to be dynamically updatable here\n// So they are converted even when not specified in the passed configuration\nvar defaultConfigValues = (_a = {}, _a[_DYN_CONNECTION_STRING /* @min:connectionString */] = UNDEFINED_VALUE, _a[_DYN_ENDPOINT_URL /* @min:endpointUrl */] = UNDEFINED_VALUE, _a[_DYN_INSTRUMENTATION_KEY /* @min:instrumentationKey */] = UNDEFINED_VALUE, _a[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:userOverrideEndpointUrl */] = UNDEFINED_VALUE, _a.diagnosticLogInterval = cfgDfValidate(_chkDiagLevel, 10000), _a.featureOptIn = (_b = {}, _b[IKEY_USAGE] = {\n  mode: 3 /* FeatureOptInMode.enable */\n}, _b[CDN_USAGE] = {\n  mode: 2 /* FeatureOptInMode.disable */\n}, _b[SDK_LOADER_VER] = {\n  mode: 2 /* FeatureOptInMode.disable */\n}, _b), _a.throttleMgrCfg = cfgDfMerge((_c = {}, _c[109 /* _eInternalMessageId.DefaultThrottleMsgKey */] = cfgDfMerge(default_throttle_config), _c[106 /* _eInternalMessageId.InstrumentationKeyDeprecation */] = cfgDfMerge(default_throttle_config), _c[111 /* _eInternalMessageId.SdkLdrUpdate */] = cfgDfMerge(default_throttle_config), _c[110 /* _eInternalMessageId.CdnDeprecation */] = cfgDfMerge(default_throttle_config), _c)), _a.extensionConfig = cfgDfMerge((_d = {}, _d[\"AppInsightsCfgSyncPlugin\"] = cfgDfMerge({\n  cfgUrl: CONFIG_ENDPOINT_URL,\n  syncMode: 2 /* ICfgSyncMode.Receive */\n}), _d)), _a);\nfunction _chkDiagLevel(value) {\n  // Make sure we have a value > 0\n  return value && value > 0;\n}\n/**\r\n * Application Insights API\r\n * @group Entrypoint\r\n * @group Classes\r\n * @class Initialization\r\n * @implements {IApplicationInsights}\r\n */\nvar AppInsightsSku = /** @class */function () {\n  function AppInsightsSku(snippet) {\n    var _this = this;\n    // NOTE!: DON'T set default values here, instead set them in the _initDefaults() function as it is also called during teardown()\n    var dependencies;\n    var properties;\n    var _sender;\n    var _snippetVersion;\n    var _evtNamespace;\n    var _houseKeepingNamespace;\n    var _core;\n    var _config;\n    var _analyticsPlugin;\n    var _cfgSyncPlugin;\n    var _throttleMgr;\n    var _iKeySentMessage;\n    var _cdnSentMessage;\n    var _sdkVerSentMessage;\n    dynamicProto(AppInsightsSku, this, function (_self) {\n      _initDefaults();\n      objDefine(_self, \"config\", {\n        g: function () {\n          return _config;\n        }\n      });\n      arrForEach([\"pluginVersionStringArr\", \"pluginVersionString\"], function (key) {\n        objDefine(_self, key, {\n          g: function () {\n            if (_core) {\n              return _core[key];\n            }\n            return null;\n          }\n        });\n      });\n      // initialize the queue and config in case they are undefined\n      _snippetVersion = \"\" + (snippet.sv || snippet[_DYN_VERSION /* @min:%2eversion */] || \"\");\n      snippet[_DYN_QUEUE /* @min:%2equeue */] = snippet[_DYN_QUEUE /* @min:%2equeue */] || [];\n      snippet[_DYN_VERSION /* @min:%2eversion */] = snippet[_DYN_VERSION /* @min:%2eversion */] || 2.0; // Default to new version\n      var cfgHandler = createDynamicConfig(snippet.config || {}, defaultConfigValues);\n      _config = cfgHandler.cfg;\n      _analyticsPlugin = new AnalyticsPlugin();\n      objDefine(_self, \"appInsights\", {\n        g: function () {\n          return _analyticsPlugin;\n        }\n      });\n      properties = new PropertiesPlugin();\n      dependencies = new DependenciesPlugin();\n      _sender = new Sender();\n      _core = new AppInsightsCore();\n      objDefine(_self, \"core\", {\n        g: function () {\n          return _core;\n        }\n      });\n      // Will get recalled if any referenced values are changed\n      _addUnloadHook(onConfigChange(cfgHandler, function () {\n        var configCs = _config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */];\n        function _parseCs() {\n          return createAsyncPromise(function (resolve, reject) {\n            doAwaitResponse(configCs, function (res) {\n              var curCs = res && res.value;\n              var parsedCs = null;\n              if (!res.rejected && curCs) {\n                // replace cs with resolved values in case of circular promises\n                _config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */] = curCs;\n                parsedCs = parseConnectionString(curCs);\n              }\n              // if can't resolve cs promise, null will be returned\n              resolve(parsedCs);\n            });\n          });\n        }\n        if (isPromiseLike(configCs)) {\n          var ikeyPromise = createAsyncPromise(function (resolve, reject) {\n            _parseCs().then(function (cs) {\n              var ikey = _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */];\n              ikey = cs && cs[_DYN_INSTRUMENTATIONKEY0 /* @min:%2einstrumentationkey */] || ikey;\n              resolve(ikey);\n            }).catch(function (e) {\n              // parseCs will always resolve(unless timeout)\n              // return null in case any error happens\n              resolve(null);\n            });\n          });\n          var url = _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */];\n          if (isNullOrUndefined(url)) {\n            url = createAsyncPromise(function (resolve, reject) {\n              _parseCs().then(function (cs) {\n                var url = _config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */];\n                var ingest = cs && cs[_DYN_INGESTIONENDPOINT /* @min:%2eingestionendpoint */];\n                url = ingest ? ingest + DEFAULT_BREEZE_PATH : url;\n                resolve(url);\n              }).catch(function (e) {\n                // parseCs will always resolve(unless timeout)\n                // return null in case any error happens\n                resolve(null);\n              });\n            });\n          }\n          _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */] = ikeyPromise;\n          _config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */] = url;\n        }\n        if (isString(configCs)) {\n          // confirm if promiselike function present\n          // handle cs promise here\n          // add cases to oneNote\n          var cs = parseConnectionString(configCs);\n          var ingest = cs[_DYN_INGESTIONENDPOINT /* @min:%2eingestionendpoint */];\n          _config.endpointUrl = _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] ? _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] : ingest + DEFAULT_BREEZE_PATH; // add /v2/track\n          _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */] = cs[_DYN_INSTRUMENTATIONKEY0 /* @min:%2einstrumentationkey */] || _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */];\n        }\n        // userOverrideEndpointUrl have the highest priority\n        _config.endpointUrl = _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] ? _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] : _config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */];\n      }));\n      _self[STR_SNIPPET /* @min:%2esnippet */] = snippet;\n      _self[STR_FLUSH /* @min:%2eflush */] = function (async, callBack) {\n        if (async === void 0) {\n          async = true;\n        }\n        var result;\n        doPerf(_core, function () {\n          return \"AISKU.flush\";\n        }, function () {\n          if (async && !callBack) {\n            result = createPromise(function (resolve) {\n              callBack = resolve;\n            });\n          }\n          var waiting = 1;\n          var flushDone = function () {\n            waiting--;\n            if (waiting === 0) {\n              callBack();\n            }\n          };\n          arrForEach(_core.getChannels(), function (channel) {\n            if (channel) {\n              waiting++;\n              channel[STR_FLUSH /* @min:%2eflush */](async, flushDone);\n            }\n          });\n          // decrement the initial \"waiting\"\n          flushDone();\n        }, null, async);\n        return result;\n      };\n      _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */] = function (async) {\n        if (async === void 0) {\n          async = true;\n        }\n        arrForEach(_core.getChannels(), function (channel) {\n          if (channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]) {\n            channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]();\n          } else {\n            channel[STR_FLUSH /* @min:%2eflush */](async);\n          }\n        });\n      };\n      _self.loadAppInsights = function (legacyMode, logger, notificationManager) {\n        if (legacyMode === void 0) {\n          legacyMode = false;\n        }\n        if (legacyMode) {\n          throwUnsupported(\"Legacy Mode is no longer supported\");\n        }\n        function _updateSnippetProperties(snippet) {\n          if (snippet) {\n            var snippetVer = \"\";\n            if (!isNullOrUndefined(_snippetVersion)) {\n              snippetVer += _snippetVersion;\n            }\n            if (_self[_DYN_CONTEXT /* @min:%2econtext */] && _self[_DYN_CONTEXT /* @min:%2econtext */].internal) {\n              _self[_DYN_CONTEXT /* @min:%2econtext */].internal.snippetVer = snippetVer || \"-\";\n            }\n            // apply updated properties to the global instance (snippet)\n            objForEachKey(_self, function (field, value) {\n              if (isString(field) && !isFunction(value) && field && field[0] !== \"_\" &&\n              // Don't copy \"internal\" values\n              arrIndexOf(_ignoreUpdateSnippetProperties, field) === -1) {\n                if (snippet[field] !== value) {\n                  snippet[field] = value;\n                }\n              }\n            });\n          }\n        }\n        doPerf(_self.core, function () {\n          return \"AISKU.loadAppInsights\";\n        }, function () {\n          // initialize core\n          _core.initialize(_config, [_sender, properties, dependencies, _analyticsPlugin, _cfgSyncPlugin], logger, notificationManager);\n          objDefine(_self, \"context\", {\n            g: function () {\n              return properties[_DYN_CONTEXT /* @min:%2econtext */];\n            }\n          });\n          if (!_throttleMgr) {\n            _throttleMgr = new ThrottleMgr(_core);\n          }\n          var sdkSrc = _findSdkSourceFile();\n          if (sdkSrc && _self[_DYN_CONTEXT /* @min:%2econtext */]) {\n            _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc = sdkSrc;\n          }\n          _updateSnippetProperties(_self[STR_SNIPPET /* @min:%2esnippet */]);\n          // Empty queue of all api calls logged prior to sdk download\n          _self.emptyQueue();\n          _self[STR_POLL_INTERNAL_LOGS /* @min:%2epollInternalLogs */]();\n          _self[_DYN_ADD_HOUSEKEEPING_BEF2 /* @min:%2eaddHousekeepingBeforeUnload */](_self);\n          _addUnloadHook(onConfigChange(cfgHandler, function () {\n            var defaultEnable = false;\n            if (_config.throttleMgrCfg[109 /* _eInternalMessageId.DefaultThrottleMsgKey */]) {\n              defaultEnable = !_config.throttleMgrCfg[109 /* _eInternalMessageId.DefaultThrottleMsgKey */].disabled;\n            }\n            if (!_throttleMgr.isReady() && _config.extensionConfig && _config.extensionConfig[_cfgSyncPlugin.identifier] && defaultEnable) {\n              // set ready state to true will automatically trigger flush()\n              _throttleMgr.onReadyState(true);\n            }\n            var result;\n            if (!_iKeySentMessage && !_config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */] && isFeatureEnabled(IKEY_USAGE, _config)) {\n              result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](106 /* _eInternalMessageId.InstrumentationKeyDeprecation */, \"See Instrumentation key support at aka.ms/IkeyMigrate\");\n              _iKeySentMessage = true;\n            }\n            if (!_cdnSentMessage && _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc && _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc.indexOf(\"az416426\") != -1 && isFeatureEnabled(CDN_USAGE, _config)) {\n              result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](110 /* _eInternalMessageId.CdnDeprecation */, \"See Cdn support notice at aka.ms/JsActiveCdn\");\n              _cdnSentMessage = true;\n            }\n            if (!_sdkVerSentMessage && parseInt(_snippetVersion) < 6 && isFeatureEnabled(SDK_LOADER_VER, _config)) {\n              result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](111 /* _eInternalMessageId.SdkLdrUpdate */, \"An updated Sdk Loader is available, see aka.ms/SnippetVer\");\n              _sdkVerSentMessage = true;\n            }\n          }));\n        });\n        return _self;\n      };\n      _self[_DYN_UPDATE_SNIPPET_DEFIN3 /* @min:%2eupdateSnippetDefinitions */] = function (snippet) {\n        // apply full appInsights to the global instance\n        // Note: This must be called before loadAppInsights is called\n        proxyAssign(snippet, _self, function (name) {\n          // Not excluding names prefixed with \"_\" as we need to proxy some functions like _onError\n          return name && arrIndexOf(_ignoreUpdateSnippetProperties, name) === -1;\n        });\n      };\n      _self.emptyQueue = function () {\n        // call functions that were queued before the main script was loaded\n        try {\n          if (isArray(_self.snippet[_DYN_QUEUE /* @min:%2equeue */])) {\n            // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.\n            var length_1 = _self.snippet[_DYN_QUEUE /* @min:%2equeue */].length;\n            for (var i = 0; i < length_1; i++) {\n              var call = _self.snippet[_DYN_QUEUE /* @min:%2equeue */][i];\n              call();\n            }\n            _self.snippet[_DYN_QUEUE /* @min:%2equeue */] = undefined;\n            delete _self.snippet[_DYN_QUEUE /* @min:%2equeue */];\n          }\n        } catch (exception) {\n          var properties_1 = {};\n          if (exception && isFunction(exception.toString)) {\n            properties_1.exception = exception.toString();\n          }\n          // need from core\n          // Microsoft.ApplicationInsights._InternalLogging.throwInternal(\n          //     eLoggingSeverity.WARNING,\n          //     _eInternalMessageId.FailedToSendQueuedTelemetry,\n          //     \"Failed to send queued telemetry\",\n          //     properties);\n        }\n      };\n      _self[_DYN_ADD_HOUSEKEEPING_BEF2 /* @min:%2eaddHousekeepingBeforeUnload */] = function (appInsightsInstance) {\n        // Add callback to push events when the user navigates away\n        if (hasWindow() || hasDocument()) {\n          var performHousekeeping_1 = function () {\n            // Adds the ability to flush all data before the page unloads.\n            // Note: This approach tries to push a sync request with all the pending events onbeforeunload.\n            // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.\n            // Telemetry here will help us analyze how effective this approach is.\n            // Another approach would be to make this call sync with a acceptable timeout to reduce the\n            // impact on user experience.\n            // appInsightsInstance.context._sender.triggerSend();\n            appInsightsInstance[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](false);\n            // Back up the current session to local storage\n            // This lets us close expired sessions after the cookies themselves expire\n            if (isFunction(_self.core[STR_GET_PLUGIN /* @min:%2egetPlugin */])) {\n              var loadedPlugin = _this.core[STR_GET_PLUGIN /* @min:%2egetPlugin */](PropertiesPluginIdentifier);\n              if (loadedPlugin) {\n                var propertiesPlugin = loadedPlugin.plugin;\n                if (propertiesPlugin && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */] && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager) {\n                  propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager.backup();\n                }\n              }\n            }\n          };\n          var added_1 = false;\n          if (!_houseKeepingNamespace) {\n            _houseKeepingNamespace = mergeEvtNamespace(_evtNamespace, _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */] && _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */]());\n          }\n          // Will be recalled if any referenced config properties change\n          _addUnloadHook(onConfigChange(_config, function (details) {\n            var coreConfig = details.cfg;\n            var analyticsPlugin = appInsightsInstance.appInsights;\n            var ctx = createProcessTelemetryContext(null, coreConfig, analyticsPlugin.core);\n            var extConfig = ctx.getExtCfg(analyticsPlugin.identifier || AnalyticsPluginIdentifier);\n            // As we could get recalled, remove any previously registered event handlers first\n            _removePageEventHandlers();\n            var excludePageUnloadEvents = coreConfig.disablePageUnloadEvents;\n            if (!extConfig.disableFlushOnBeforeUnload) {\n              // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server\n              // As just hooking the window does not always fire (on chrome) for page navigation's.\n              if (addPageUnloadEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {\n                added_1 = true;\n              }\n              // We also need to hook the pagehide and visibilitychange events as not all versions of Safari support load/unload events.\n              if (addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {\n                added_1 = true;\n              }\n              // A reactNative app may not have a window and therefore the beforeunload/pagehide events -- so don't\n              // log the failure in this case\n              if (!added_1 && !isReactNative()) {\n                _throwInternal(_core.logger, 1 /* eLoggingSeverity.CRITICAL */, 19 /* _eInternalMessageId.FailedToAddHandlerForOnBeforeUnload */, \"Could not add handler for beforeunload and pagehide\");\n              }\n            }\n            if (!added_1 && !extConfig.disableFlushOnUnload) {\n              // If we didn't add the normal set then attempt to add the pagehide and visibilitychange only\n              addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace);\n            }\n          }));\n        }\n      };\n      _self.getSender = function () {\n        return _sender;\n      };\n      _self.unload = function (isAsync, unloadComplete, cbTimeout) {\n        var unloadDone = false;\n        var result;\n        if (isAsync && !unloadComplete) {\n          result = createPromise(function (resolve) {\n            // Set the callback to the promise resolve callback\n            unloadComplete = resolve;\n          });\n        }\n        function _unloadCallback(unloadState) {\n          if (!unloadDone) {\n            unloadDone = true;\n            _initDefaults();\n            unloadComplete && unloadComplete(unloadState);\n          }\n        }\n        _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](isAsync);\n        _removePageEventHandlers();\n        _core.unload && _core.unload(isAsync, _unloadCallback, cbTimeout);\n        return result;\n      };\n      proxyFunctions(_self, _analyticsPlugin, [STR_GET_COOKIE_MGR, STR_TRACK_EVENT, STR_TRACK_PAGE_VIEW, \"trackPageViewPerformance\", STR_TRACK_EXCEPTION, \"_onerror\", STR_TRACK_TRACE, STR_TRACK_METRIC, STR_START_TRACK_PAGE, STR_STOP_TRACK_PAGE, STR_START_TRACK_EVENT, STR_STOP_TRACK_EVENT]);\n      proxyFunctions(_self, _getCurrentDependencies, [STR_TRACK_DEPENDENCY_DATA, \"addDependencyListener\", \"addDependencyInitializer\"]);\n      proxyFunctions(_self, _core, [STR_ADD_TELEMETRY_INITIALIZER, STR_POLL_INTERNAL_LOGS, \"stopPollingInternalLogs\", STR_GET_PLUGIN, \"addPlugin\", STR_EVT_NAMESPACE, \"addUnloadCb\", \"getTraceCtx\", \"updateCfg\", \"onCfgChange\"]);\n      proxyFunctions(_self, function () {\n        var context = properties[_DYN_CONTEXT /* @min:%2econtext */];\n        return context ? context.user : null;\n      }, [STR_SET_AUTHENTICATED_USER_CONTEXT, STR_CLEAR_AUTHENTICATED_USER_CONTEXT]);\n      // Using a function to support the dynamic adding / removal of plugins, so this will always return the current value\n      function _getCurrentDependencies() {\n        return dependencies;\n      }\n      function _initDefaults() {\n        _evtNamespace = createUniqueNamespace(\"AISKU\");\n        _houseKeepingNamespace = null;\n        dependencies = null;\n        properties = null;\n        _sender = null;\n        _snippetVersion = null;\n        _throttleMgr = null;\n        _iKeySentMessage = false;\n        _cdnSentMessage = false;\n        _sdkVerSentMessage = false;\n        _cfgSyncPlugin = new CfgSyncPlugin();\n      }\n      function _removePageEventHandlers() {\n        // Remove any registered event handlers\n        if (_houseKeepingNamespace) {\n          removePageUnloadEventListener(null, _houseKeepingNamespace);\n          removePageHideEventListener(null, _houseKeepingNamespace);\n        }\n      }\n      function _addUnloadHook(hooks) {\n        _core.addUnloadHook(hooks);\n      }\n    });\n  }\n  // Analytics Plugin\n  // Removed Stub for AppInsightsSku.prototype.getCookieMgr.\n  // Removed Stub for AppInsightsSku.prototype.trackEvent.\n  // Removed Stub for AppInsightsSku.prototype.trackPageView.\n  // Removed Stub for AppInsightsSku.prototype.trackPageViewPerformance.\n  // Removed Stub for AppInsightsSku.prototype.trackException.\n  // Removed Stub for AppInsightsSku.prototype._onerror.\n  // Removed Stub for AppInsightsSku.prototype.trackTrace.\n  // Removed Stub for AppInsightsSku.prototype.trackMetric.\n  // Removed Stub for AppInsightsSku.prototype.startTrackPage.\n  // Removed Stub for AppInsightsSku.prototype.stopTrackPage.\n  // Removed Stub for AppInsightsSku.prototype.startTrackEvent.\n  // Removed Stub for AppInsightsSku.prototype.stopTrackEvent.\n  // Removed Stub for AppInsightsSku.prototype.addTelemetryInitializer.\n  // Properties Plugin\n  // Removed Stub for AppInsightsSku.prototype.setAuthenticatedUserContext.\n  // Removed Stub for AppInsightsSku.prototype.clearAuthenticatedUserContext.\n  // Dependencies Plugin\n  // Removed Stub for AppInsightsSku.prototype.trackDependencyData.\n  // Misc\n  // Removed Stub for AppInsightsSku.prototype.flush.\n  // Removed Stub for AppInsightsSku.prototype.onunloadFlush.\n  // Removed Stub for AppInsightsSku.prototype.loadAppInsights.\n  // Removed Stub for AppInsightsSku.prototype.updateSnippetDefinitions.\n  // Removed Stub for AppInsightsSku.prototype.emptyQueue.\n  // Removed Stub for AppInsightsSku.prototype.pollInternalLogs.\n  // Removed Stub for AppInsightsSku.prototype.stopPollingInternalLogs.\n  // Removed Stub for AppInsightsSku.prototype.addHousekeepingBeforeUnload.\n  // Removed Stub for AppInsightsSku.prototype.getSender.\n  // Removed Stub for AppInsightsSku.prototype.unload.\n  // Removed Stub for AppInsightsSku.prototype.getPlugin.\n  // Removed Stub for AppInsightsSku.prototype.addPlugin.\n  // Removed Stub for AppInsightsSku.prototype.updateCfg.\n  // Removed Stub for AppInsightsSku.prototype.evtNamespace.\n  // Removed Stub for AppInsightsSku.prototype.addUnloadCb.\n  // Removed Stub for AppInsightsSku.prototype.addDependencyListener.\n  /**\r\n   * Add an dependency telemetry initializer callback function to allow populating additional properties or drop the request.\r\n   * It is called after the dependency call has completed and any available performance details are available. A dependency\r\n   * initializer is similar to the TelemetryInitializer function but it allows you to block the reporting of the dependency\r\n   * request so that it doesn't count against the `maxAjaxCallsPerView`.\r\n   * @param dependencyInitializer - The Dependency Telemetry Initializer function\r\n   * @returns - A IDependencyInitializerHandler to enable the initializer to be removed\r\n   */\n  AppInsightsSku.prototype.addDependencyInitializer = function (dependencyInitializer) {\n    return null;\n  };\n  // Removed Stub for AppInsightsSku.prototype.getTraceCtx.\n  // Removed Stub for AppInsightsSku.prototype.onCfgChange.\n  return AppInsightsSku;\n}();\nexport { AppInsightsSku };\n// tslint:disable-next-line\nexport function _findSdkSourceFile() {\n  if (_internalSdkSrc) {\n    // Use the cached value\n    return _internalSdkSrc;\n  }\n  var sdkSrc = null;\n  var isModule = false;\n  var cdns = [\"://js.monitor.azure.com/\", \"://az416426.vo.msecnd.net/\"];\n  try {\n    // Try and determine whether the sdk is being loaded from the CDN\n    // currentScript is only valid during initial processing\n    var scrpt = (document || {}).currentScript;\n    if (scrpt) {\n      sdkSrc = scrpt.src;\n      // } else {\n      //     // We need to update to at least typescript 2.9 for this to work :-(\n      //     // Leaving as a stub for now so after we upgrade this breadcrumb is available\n      //     let meta = import.meta;\n      //     sdkSrc = (meta || {}).url;\n      //     isModule = true;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-empty\n  }\n  if (sdkSrc) {\n    try {\n      var url_1 = sdkSrc.toLowerCase();\n      if (url_1) {\n        var src_1 = \"\";\n        arrForEach(cdns, function (value, idx) {\n          if (strIndexOf(url_1, value) !== -1) {\n            src_1 = \"cdn\" + (idx + 1);\n            if (strIndexOf(url_1, \"/scripts/\") === -1) {\n              if (strIndexOf(url_1, \"/next/\") !== -1) {\n                src_1 += \"-next\";\n              } else if (strIndexOf(url_1, \"/beta/\") !== -1) {\n                src_1 += \"-beta\";\n              }\n            }\n            _internalSdkSrc = src_1 + (isModule ? \".mod\" : \"\");\n            return -1;\n          }\n        });\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    // Cache the found value so we don't have to look it up again\n    _internalSdkSrc = sdkSrc;\n  }\n  return _internalSdkSrc;\n}","map":{"version":3,"names":["_a","_b","_c","_d","dynamicProto","AnalyticsPlugin","CfgSyncPlugin","Sender","AnalyticsPluginIdentifier","DEFAULT_BREEZE_PATH","PropertiesPluginIdentifier","ThrottleMgr","parseConnectionString","AppInsightsCore","_throwInternal","addPageHideEventListener","addPageUnloadEventListener","cfgDfMerge","cfgDfValidate","createDynamicConfig","createProcessTelemetryContext","createUniqueNamespace","doPerf","hasDocument","hasWindow","isArray","isFeatureEnabled","isFunction","isNullOrUndefined","isReactNative","isString","mergeEvtNamespace","onConfigChange","proxyAssign","proxyFunctions","removePageHideEventListener","removePageUnloadEventListener","AjaxPlugin","DependenciesPlugin","PropertiesPlugin","createAsyncPromise","createPromise","doAwaitResponse","arrForEach","arrIndexOf","isPromiseLike","objDefine","objForEachKey","strIndexOf","throwUnsupported","CONFIG_ENDPOINT_URL","STR_ADD_TELEMETRY_INITIALIZER","STR_CLEAR_AUTHENTICATED_USER_CONTEXT","STR_EVT_NAMESPACE","STR_FLUSH","STR_GET_COOKIE_MGR","STR_GET_PLUGIN","STR_POLL_INTERNAL_LOGS","STR_SET_AUTHENTICATED_USER_CONTEXT","STR_SNIPPET","STR_START_TRACK_EVENT","STR_START_TRACK_PAGE","STR_STOP_TRACK_EVENT","STR_STOP_TRACK_PAGE","STR_TRACK_DEPENDENCY_DATA","STR_TRACK_EVENT","STR_TRACK_EXCEPTION","STR_TRACK_METRIC","STR_TRACK_PAGE_VIEW","STR_TRACK_TRACE","_DYN_ADD_HOUSEKEEPING_BEF2","_DYN_CONNECTION_STRING","_DYN_CONTEXT","_DYN_ENDPOINT_URL","_DYN_INGESTIONENDPOINT","_DYN_INSTRUMENTATIONKEY0","_DYN_INSTRUMENTATION_KEY","_DYN_ONUNLOAD_FLUSH","_DYN_QUEUE","_DYN_SEND_MESSAGE","_DYN_UPDATE_SNIPPET_DEFIN3","_DYN_USER_OVERRIDE_ENDPOI1","_DYN_VERSION","_internalSdkSrc","_ignoreUpdateSnippetProperties","IKEY_USAGE","CDN_USAGE","SDK_LOADER_VER","UNDEFINED_VALUE","undefined","default_limit","samplingRate","maxSendNumber","default_interval","monthInterval","daysOfMonth","default_throttle_config","disabled","limit","interval","defaultConfigValues","diagnosticLogInterval","_chkDiagLevel","featureOptIn","mode","throttleMgrCfg","extensionConfig","cfgUrl","syncMode","value","AppInsightsSku","snippet","_this","dependencies","properties","_sender","_snippetVersion","_evtNamespace","_houseKeepingNamespace","_core","_config","_analyticsPlugin","_cfgSyncPlugin","_throttleMgr","_iKeySentMessage","_cdnSentMessage","_sdkVerSentMessage","_self","_initDefaults","g","key","sv","cfgHandler","config","cfg","_addUnloadHook","configCs","_parseCs","resolve","reject","res","curCs","parsedCs","rejected","ikeyPromise","then","cs","ikey","catch","e","url","ingest","endpointUrl","async","callBack","result","waiting","flushDone","getChannels","channel","loadAppInsights","legacyMode","logger","notificationManager","_updateSnippetProperties","snippetVer","internal","field","core","initialize","sdkSrc","_findSdkSourceFile","emptyQueue","defaultEnable","isReady","identifier","onReadyState","indexOf","parseInt","name","length_1","length","i","call","exception","properties_1","toString","appInsightsInstance","performHousekeeping_1","loadedPlugin","propertiesPlugin","plugin","_sessionManager","backup","added_1","details","coreConfig","analyticsPlugin","appInsights","ctx","extConfig","getExtCfg","_removePageEventHandlers","excludePageUnloadEvents","disablePageUnloadEvents","disableFlushOnBeforeUnload","disableFlushOnUnload","getSender","unload","isAsync","unloadComplete","cbTimeout","unloadDone","_unloadCallback","unloadState","_getCurrentDependencies","context","user","hooks","addUnloadHook","prototype","addDependencyInitializer","dependencyInitializer","isModule","cdns","scrpt","document","currentScript","src","url_1","toLowerCase","src_1","idx"],"sources":["/home/veeresh133/app/api-call/react-az/node_modules/@microsoft/applicationinsights-web/dist-es5/AISku.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar _a, _b, _c, _d;\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { AnalyticsPlugin } from \"@microsoft/applicationinsights-analytics-js\";\r\nimport { CfgSyncPlugin } from \"@microsoft/applicationinsights-cfgsync-js\";\r\nimport { Sender } from \"@microsoft/applicationinsights-channel-js\";\r\nimport { AnalyticsPluginIdentifier, DEFAULT_BREEZE_PATH, PropertiesPluginIdentifier, ThrottleMgr, parseConnectionString } from \"@microsoft/applicationinsights-common\";\r\nimport { AppInsightsCore, _throwInternal, addPageHideEventListener, addPageUnloadEventListener, cfgDfMerge, cfgDfValidate, createDynamicConfig, createProcessTelemetryContext, createUniqueNamespace, doPerf, hasDocument, hasWindow, isArray, isFeatureEnabled, isFunction, isNullOrUndefined, isReactNative, isString, mergeEvtNamespace, onConfigChange, proxyAssign, proxyFunctions, removePageHideEventListener, removePageUnloadEventListener } from \"@microsoft/applicationinsights-core-js\";\r\nimport { AjaxPlugin as DependenciesPlugin } from \"@microsoft/applicationinsights-dependencies-js\";\r\nimport { PropertiesPlugin } from \"@microsoft/applicationinsights-properties-js\";\r\nimport { createAsyncPromise, createPromise, doAwaitResponse } from \"@nevware21/ts-async\";\r\nimport { arrForEach, arrIndexOf, isPromiseLike, objDefine, objForEachKey, strIndexOf, throwUnsupported } from \"@nevware21/ts-utils\";\r\nimport { CONFIG_ENDPOINT_URL, STR_ADD_TELEMETRY_INITIALIZER, STR_CLEAR_AUTHENTICATED_USER_CONTEXT, STR_EVT_NAMESPACE, STR_FLUSH, STR_GET_COOKIE_MGR, STR_GET_PLUGIN, STR_POLL_INTERNAL_LOGS, STR_SET_AUTHENTICATED_USER_CONTEXT, STR_SNIPPET, STR_START_TRACK_EVENT, STR_START_TRACK_PAGE, STR_STOP_TRACK_EVENT, STR_STOP_TRACK_PAGE, STR_TRACK_DEPENDENCY_DATA, STR_TRACK_EVENT, STR_TRACK_EXCEPTION, STR_TRACK_METRIC, STR_TRACK_PAGE_VIEW, STR_TRACK_TRACE } from \"./InternalConstants\";\r\nimport { _DYN_ADD_HOUSEKEEPING_BEF2, _DYN_CONNECTION_STRING, _DYN_CONTEXT, _DYN_ENDPOINT_URL, _DYN_INGESTIONENDPOINT, _DYN_INSTRUMENTATIONKEY0, _DYN_INSTRUMENTATION_KEY, _DYN_ONUNLOAD_FLUSH, _DYN_QUEUE, _DYN_SEND_MESSAGE, _DYN_UPDATE_SNIPPET_DEFIN3, _DYN_USER_OVERRIDE_ENDPOI1, _DYN_VERSION } from \"./__DynamicConstants\";\r\nvar _internalSdkSrc;\r\n// This is an exclude list of properties that should not be updated during initialization\r\n// They include a combination of private and internal property names\r\nvar _ignoreUpdateSnippetProperties = [\r\n    STR_SNIPPET, \"dependencies\", \"properties\", \"_snippetVersion\", \"appInsightsNew\", \"getSKUDefaults\"\r\n];\r\nvar IKEY_USAGE = \"iKeyUsage\";\r\nvar CDN_USAGE = \"CdnUsage\";\r\nvar SDK_LOADER_VER = \"SdkLoaderVer\";\r\nvar UNDEFINED_VALUE = undefined;\r\nvar default_limit = {\r\n    samplingRate: 100,\r\n    maxSendNumber: 1\r\n};\r\nvar default_interval = {\r\n    monthInterval: 3,\r\n    daysOfMonth: [28]\r\n};\r\nvar default_throttle_config = {\r\n    disabled: true,\r\n    limit: cfgDfMerge(default_limit),\r\n    interval: cfgDfMerge(default_interval)\r\n};\r\n// We need to include all properties that we only reference that we want to be dynamically updatable here\r\n// So they are converted even when not specified in the passed configuration\r\nvar defaultConfigValues = (_a = {},\r\n    _a[_DYN_CONNECTION_STRING /* @min:connectionString */] = UNDEFINED_VALUE,\r\n    _a[_DYN_ENDPOINT_URL /* @min:endpointUrl */] = UNDEFINED_VALUE,\r\n    _a[_DYN_INSTRUMENTATION_KEY /* @min:instrumentationKey */] = UNDEFINED_VALUE,\r\n    _a[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:userOverrideEndpointUrl */] = UNDEFINED_VALUE,\r\n    _a.diagnosticLogInterval = cfgDfValidate(_chkDiagLevel, 10000),\r\n    _a.featureOptIn = (_b = {},\r\n        _b[IKEY_USAGE] = { mode: 3 /* FeatureOptInMode.enable */ },\r\n        _b[CDN_USAGE] = { mode: 2 /* FeatureOptInMode.disable */ },\r\n        _b[SDK_LOADER_VER] = { mode: 2 /* FeatureOptInMode.disable */ },\r\n        _b),\r\n    _a.throttleMgrCfg = cfgDfMerge((_c = {},\r\n        _c[109 /* _eInternalMessageId.DefaultThrottleMsgKey */] = cfgDfMerge(default_throttle_config),\r\n        _c[106 /* _eInternalMessageId.InstrumentationKeyDeprecation */] = cfgDfMerge(default_throttle_config),\r\n        _c[111 /* _eInternalMessageId.SdkLdrUpdate */] = cfgDfMerge(default_throttle_config),\r\n        _c[110 /* _eInternalMessageId.CdnDeprecation */] = cfgDfMerge(default_throttle_config),\r\n        _c)),\r\n    _a.extensionConfig = cfgDfMerge((_d = {},\r\n        _d[\"AppInsightsCfgSyncPlugin\"] = cfgDfMerge({\r\n            cfgUrl: CONFIG_ENDPOINT_URL,\r\n            syncMode: 2 /* ICfgSyncMode.Receive */\r\n        }),\r\n        _d)),\r\n    _a);\r\nfunction _chkDiagLevel(value) {\r\n    // Make sure we have a value > 0\r\n    return value && value > 0;\r\n}\r\n/**\r\n * Application Insights API\r\n * @group Entrypoint\r\n * @group Classes\r\n * @class Initialization\r\n * @implements {IApplicationInsights}\r\n */\r\nvar AppInsightsSku = /** @class */ (function () {\r\n    function AppInsightsSku(snippet) {\r\n        var _this = this;\r\n        // NOTE!: DON'T set default values here, instead set them in the _initDefaults() function as it is also called during teardown()\r\n        var dependencies;\r\n        var properties;\r\n        var _sender;\r\n        var _snippetVersion;\r\n        var _evtNamespace;\r\n        var _houseKeepingNamespace;\r\n        var _core;\r\n        var _config;\r\n        var _analyticsPlugin;\r\n        var _cfgSyncPlugin;\r\n        var _throttleMgr;\r\n        var _iKeySentMessage;\r\n        var _cdnSentMessage;\r\n        var _sdkVerSentMessage;\r\n        dynamicProto(AppInsightsSku, this, function (_self) {\r\n            _initDefaults();\r\n            objDefine(_self, \"config\", {\r\n                g: function () {\r\n                    return _config;\r\n                }\r\n            });\r\n            arrForEach([\"pluginVersionStringArr\", \"pluginVersionString\"], function (key) {\r\n                objDefine(_self, key, {\r\n                    g: function () {\r\n                        if (_core) {\r\n                            return _core[key];\r\n                        }\r\n                        return null;\r\n                    }\r\n                });\r\n            });\r\n            // initialize the queue and config in case they are undefined\r\n            _snippetVersion = \"\" + (snippet.sv || snippet[_DYN_VERSION /* @min:%2eversion */] || \"\");\r\n            snippet[_DYN_QUEUE /* @min:%2equeue */] = snippet[_DYN_QUEUE /* @min:%2equeue */] || [];\r\n            snippet[_DYN_VERSION /* @min:%2eversion */] = snippet[_DYN_VERSION /* @min:%2eversion */] || 2.0; // Default to new version\r\n            var cfgHandler = createDynamicConfig(snippet.config || {}, defaultConfigValues);\r\n            _config = cfgHandler.cfg;\r\n            _analyticsPlugin = new AnalyticsPlugin();\r\n            objDefine(_self, \"appInsights\", {\r\n                g: function () {\r\n                    return _analyticsPlugin;\r\n                }\r\n            });\r\n            properties = new PropertiesPlugin();\r\n            dependencies = new DependenciesPlugin();\r\n            _sender = new Sender();\r\n            _core = new AppInsightsCore();\r\n            objDefine(_self, \"core\", {\r\n                g: function () {\r\n                    return _core;\r\n                }\r\n            });\r\n            // Will get recalled if any referenced values are changed\r\n            _addUnloadHook(onConfigChange(cfgHandler, function () {\r\n                var configCs = _config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */];\r\n                function _parseCs() {\r\n                    return createAsyncPromise(function (resolve, reject) {\r\n                        doAwaitResponse(configCs, function (res) {\r\n                            var curCs = res && res.value;\r\n                            var parsedCs = null;\r\n                            if (!res.rejected && curCs) {\r\n                                // replace cs with resolved values in case of circular promises\r\n                                _config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */] = curCs;\r\n                                parsedCs = parseConnectionString(curCs);\r\n                            }\r\n                            // if can't resolve cs promise, null will be returned\r\n                            resolve(parsedCs);\r\n                        });\r\n                    });\r\n                }\r\n                if (isPromiseLike(configCs)) {\r\n                    var ikeyPromise = createAsyncPromise(function (resolve, reject) {\r\n                        _parseCs().then(function (cs) {\r\n                            var ikey = _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */];\r\n                            ikey = cs && cs[_DYN_INSTRUMENTATIONKEY0 /* @min:%2einstrumentationkey */] || ikey;\r\n                            resolve(ikey);\r\n                        }).catch(function (e) {\r\n                            // parseCs will always resolve(unless timeout)\r\n                            // return null in case any error happens\r\n                            resolve(null);\r\n                        });\r\n                    });\r\n                    var url = _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */];\r\n                    if (isNullOrUndefined(url)) {\r\n                        url = createAsyncPromise(function (resolve, reject) {\r\n                            _parseCs().then(function (cs) {\r\n                                var url = _config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */];\r\n                                var ingest = cs && cs[_DYN_INGESTIONENDPOINT /* @min:%2eingestionendpoint */];\r\n                                url = ingest ? ingest + DEFAULT_BREEZE_PATH : url;\r\n                                resolve(url);\r\n                            }).catch(function (e) {\r\n                                // parseCs will always resolve(unless timeout)\r\n                                // return null in case any error happens\r\n                                resolve(null);\r\n                            });\r\n                        });\r\n                    }\r\n                    _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */] = ikeyPromise;\r\n                    _config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */] = url;\r\n                }\r\n                if (isString(configCs)) {\r\n                    // confirm if promiselike function present\r\n                    // handle cs promise here\r\n                    // add cases to oneNote\r\n                    var cs = parseConnectionString(configCs);\r\n                    var ingest = cs[_DYN_INGESTIONENDPOINT /* @min:%2eingestionendpoint */];\r\n                    _config.endpointUrl = _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] ? _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] : ingest + DEFAULT_BREEZE_PATH; // add /v2/track\r\n                    _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */] = cs[_DYN_INSTRUMENTATIONKEY0 /* @min:%2einstrumentationkey */] || _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */];\r\n                }\r\n                // userOverrideEndpointUrl have the highest priority\r\n                _config.endpointUrl = _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] ? _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] : _config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */];\r\n            }));\r\n            _self[STR_SNIPPET /* @min:%2esnippet */] = snippet;\r\n            _self[STR_FLUSH /* @min:%2eflush */] = function (async, callBack) {\r\n                if (async === void 0) { async = true; }\r\n                var result;\r\n                doPerf(_core, function () { return \"AISKU.flush\"; }, function () {\r\n                    if (async && !callBack) {\r\n                        result = createPromise(function (resolve) {\r\n                            callBack = resolve;\r\n                        });\r\n                    }\r\n                    var waiting = 1;\r\n                    var flushDone = function () {\r\n                        waiting--;\r\n                        if (waiting === 0) {\r\n                            callBack();\r\n                        }\r\n                    };\r\n                    arrForEach(_core.getChannels(), function (channel) {\r\n                        if (channel) {\r\n                            waiting++;\r\n                            channel[STR_FLUSH /* @min:%2eflush */](async, flushDone);\r\n                        }\r\n                    });\r\n                    // decrement the initial \"waiting\"\r\n                    flushDone();\r\n                }, null, async);\r\n                return result;\r\n            };\r\n            _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */] = function (async) {\r\n                if (async === void 0) { async = true; }\r\n                arrForEach(_core.getChannels(), function (channel) {\r\n                    if (channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]) {\r\n                        channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]();\r\n                    }\r\n                    else {\r\n                        channel[STR_FLUSH /* @min:%2eflush */](async);\r\n                    }\r\n                });\r\n            };\r\n            _self.loadAppInsights = function (legacyMode, logger, notificationManager) {\r\n                if (legacyMode === void 0) { legacyMode = false; }\r\n                if (legacyMode) {\r\n                    throwUnsupported(\"Legacy Mode is no longer supported\");\r\n                }\r\n                function _updateSnippetProperties(snippet) {\r\n                    if (snippet) {\r\n                        var snippetVer = \"\";\r\n                        if (!isNullOrUndefined(_snippetVersion)) {\r\n                            snippetVer += _snippetVersion;\r\n                        }\r\n                        if (_self[_DYN_CONTEXT /* @min:%2econtext */] && _self[_DYN_CONTEXT /* @min:%2econtext */].internal) {\r\n                            _self[_DYN_CONTEXT /* @min:%2econtext */].internal.snippetVer = snippetVer || \"-\";\r\n                        }\r\n                        // apply updated properties to the global instance (snippet)\r\n                        objForEachKey(_self, function (field, value) {\r\n                            if (isString(field) &&\r\n                                !isFunction(value) &&\r\n                                field && field[0] !== \"_\" && // Don't copy \"internal\" values\r\n                                arrIndexOf(_ignoreUpdateSnippetProperties, field) === -1) {\r\n                                if (snippet[field] !== value) {\r\n                                    snippet[field] = value;\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                doPerf(_self.core, function () { return \"AISKU.loadAppInsights\"; }, function () {\r\n                    // initialize core\r\n                    _core.initialize(_config, [_sender, properties, dependencies, _analyticsPlugin, _cfgSyncPlugin], logger, notificationManager);\r\n                    objDefine(_self, \"context\", {\r\n                        g: function () { return properties[_DYN_CONTEXT /* @min:%2econtext */]; }\r\n                    });\r\n                    if (!_throttleMgr) {\r\n                        _throttleMgr = new ThrottleMgr(_core);\r\n                    }\r\n                    var sdkSrc = _findSdkSourceFile();\r\n                    if (sdkSrc && _self[_DYN_CONTEXT /* @min:%2econtext */]) {\r\n                        _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc = sdkSrc;\r\n                    }\r\n                    _updateSnippetProperties(_self[STR_SNIPPET /* @min:%2esnippet */]);\r\n                    // Empty queue of all api calls logged prior to sdk download\r\n                    _self.emptyQueue();\r\n                    _self[STR_POLL_INTERNAL_LOGS /* @min:%2epollInternalLogs */]();\r\n                    _self[_DYN_ADD_HOUSEKEEPING_BEF2 /* @min:%2eaddHousekeepingBeforeUnload */](_self);\r\n                    _addUnloadHook(onConfigChange(cfgHandler, function () {\r\n                        var defaultEnable = false;\r\n                        if (_config.throttleMgrCfg[109 /* _eInternalMessageId.DefaultThrottleMsgKey */]) {\r\n                            defaultEnable = !_config.throttleMgrCfg[109 /* _eInternalMessageId.DefaultThrottleMsgKey */].disabled;\r\n                        }\r\n                        if (!_throttleMgr.isReady() && _config.extensionConfig && _config.extensionConfig[_cfgSyncPlugin.identifier] && defaultEnable) {\r\n                            // set ready state to true will automatically trigger flush()\r\n                            _throttleMgr.onReadyState(true);\r\n                        }\r\n                        var result;\r\n                        if (!_iKeySentMessage && !_config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */] && isFeatureEnabled(IKEY_USAGE, _config)) {\r\n                            result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](106 /* _eInternalMessageId.InstrumentationKeyDeprecation */, \"See Instrumentation key support at aka.ms/IkeyMigrate\");\r\n                            _iKeySentMessage = true;\r\n                        }\r\n                        if (!_cdnSentMessage && _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc && _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc.indexOf(\"az416426\") != -1 && isFeatureEnabled(CDN_USAGE, _config)) {\r\n                            result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](110 /* _eInternalMessageId.CdnDeprecation */, \"See Cdn support notice at aka.ms/JsActiveCdn\");\r\n                            _cdnSentMessage = true;\r\n                        }\r\n                        if (!_sdkVerSentMessage && parseInt(_snippetVersion) < 6 && isFeatureEnabled(SDK_LOADER_VER, _config)) {\r\n                            result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](111 /* _eInternalMessageId.SdkLdrUpdate */, \"An updated Sdk Loader is available, see aka.ms/SnippetVer\");\r\n                            _sdkVerSentMessage = true;\r\n                        }\r\n                    }));\r\n                });\r\n                return _self;\r\n            };\r\n            _self[_DYN_UPDATE_SNIPPET_DEFIN3 /* @min:%2eupdateSnippetDefinitions */] = function (snippet) {\r\n                // apply full appInsights to the global instance\r\n                // Note: This must be called before loadAppInsights is called\r\n                proxyAssign(snippet, _self, function (name) {\r\n                    // Not excluding names prefixed with \"_\" as we need to proxy some functions like _onError\r\n                    return name && arrIndexOf(_ignoreUpdateSnippetProperties, name) === -1;\r\n                });\r\n            };\r\n            _self.emptyQueue = function () {\r\n                // call functions that were queued before the main script was loaded\r\n                try {\r\n                    if (isArray(_self.snippet[_DYN_QUEUE /* @min:%2equeue */])) {\r\n                        // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.\r\n                        var length_1 = _self.snippet[_DYN_QUEUE /* @min:%2equeue */].length;\r\n                        for (var i = 0; i < length_1; i++) {\r\n                            var call = _self.snippet[_DYN_QUEUE /* @min:%2equeue */][i];\r\n                            call();\r\n                        }\r\n                        _self.snippet[_DYN_QUEUE /* @min:%2equeue */] = undefined;\r\n                        delete _self.snippet[_DYN_QUEUE /* @min:%2equeue */];\r\n                    }\r\n                }\r\n                catch (exception) {\r\n                    var properties_1 = {};\r\n                    if (exception && isFunction(exception.toString)) {\r\n                        properties_1.exception = exception.toString();\r\n                    }\r\n                    // need from core\r\n                    // Microsoft.ApplicationInsights._InternalLogging.throwInternal(\r\n                    //     eLoggingSeverity.WARNING,\r\n                    //     _eInternalMessageId.FailedToSendQueuedTelemetry,\r\n                    //     \"Failed to send queued telemetry\",\r\n                    //     properties);\r\n                }\r\n            };\r\n            _self[_DYN_ADD_HOUSEKEEPING_BEF2 /* @min:%2eaddHousekeepingBeforeUnload */] = function (appInsightsInstance) {\r\n                // Add callback to push events when the user navigates away\r\n                if (hasWindow() || hasDocument()) {\r\n                    var performHousekeeping_1 = function () {\r\n                        // Adds the ability to flush all data before the page unloads.\r\n                        // Note: This approach tries to push a sync request with all the pending events onbeforeunload.\r\n                        // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.\r\n                        // Telemetry here will help us analyze how effective this approach is.\r\n                        // Another approach would be to make this call sync with a acceptable timeout to reduce the\r\n                        // impact on user experience.\r\n                        // appInsightsInstance.context._sender.triggerSend();\r\n                        appInsightsInstance[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](false);\r\n                        // Back up the current session to local storage\r\n                        // This lets us close expired sessions after the cookies themselves expire\r\n                        if (isFunction(_self.core[STR_GET_PLUGIN /* @min:%2egetPlugin */])) {\r\n                            var loadedPlugin = _this.core[STR_GET_PLUGIN /* @min:%2egetPlugin */](PropertiesPluginIdentifier);\r\n                            if (loadedPlugin) {\r\n                                var propertiesPlugin = loadedPlugin.plugin;\r\n                                if (propertiesPlugin && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */] && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager) {\r\n                                    propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager.backup();\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                    var added_1 = false;\r\n                    if (!_houseKeepingNamespace) {\r\n                        _houseKeepingNamespace = mergeEvtNamespace(_evtNamespace, _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */] && _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */]());\r\n                    }\r\n                    // Will be recalled if any referenced config properties change\r\n                    _addUnloadHook(onConfigChange(_config, function (details) {\r\n                        var coreConfig = details.cfg;\r\n                        var analyticsPlugin = appInsightsInstance.appInsights;\r\n                        var ctx = createProcessTelemetryContext(null, coreConfig, analyticsPlugin.core);\r\n                        var extConfig = ctx.getExtCfg(analyticsPlugin.identifier || AnalyticsPluginIdentifier);\r\n                        // As we could get recalled, remove any previously registered event handlers first\r\n                        _removePageEventHandlers();\r\n                        var excludePageUnloadEvents = coreConfig.disablePageUnloadEvents;\r\n                        if (!extConfig.disableFlushOnBeforeUnload) {\r\n                            // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server\r\n                            // As just hooking the window does not always fire (on chrome) for page navigation's.\r\n                            if (addPageUnloadEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {\r\n                                added_1 = true;\r\n                            }\r\n                            // We also need to hook the pagehide and visibilitychange events as not all versions of Safari support load/unload events.\r\n                            if (addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {\r\n                                added_1 = true;\r\n                            }\r\n                            // A reactNative app may not have a window and therefore the beforeunload/pagehide events -- so don't\r\n                            // log the failure in this case\r\n                            if (!added_1 && !isReactNative()) {\r\n                                _throwInternal(_core.logger, 1 /* eLoggingSeverity.CRITICAL */, 19 /* _eInternalMessageId.FailedToAddHandlerForOnBeforeUnload */, \"Could not add handler for beforeunload and pagehide\");\r\n                            }\r\n                        }\r\n                        if (!added_1 && !extConfig.disableFlushOnUnload) {\r\n                            // If we didn't add the normal set then attempt to add the pagehide and visibilitychange only\r\n                            addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace);\r\n                        }\r\n                    }));\r\n                }\r\n            };\r\n            _self.getSender = function () {\r\n                return _sender;\r\n            };\r\n            _self.unload = function (isAsync, unloadComplete, cbTimeout) {\r\n                var unloadDone = false;\r\n                var result;\r\n                if (isAsync && !unloadComplete) {\r\n                    result = createPromise(function (resolve) {\r\n                        // Set the callback to the promise resolve callback\r\n                        unloadComplete = resolve;\r\n                    });\r\n                }\r\n                function _unloadCallback(unloadState) {\r\n                    if (!unloadDone) {\r\n                        unloadDone = true;\r\n                        _initDefaults();\r\n                        unloadComplete && unloadComplete(unloadState);\r\n                    }\r\n                }\r\n                _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](isAsync);\r\n                _removePageEventHandlers();\r\n                _core.unload && _core.unload(isAsync, _unloadCallback, cbTimeout);\r\n                return result;\r\n            };\r\n            proxyFunctions(_self, _analyticsPlugin, [\r\n                STR_GET_COOKIE_MGR,\r\n                STR_TRACK_EVENT,\r\n                STR_TRACK_PAGE_VIEW,\r\n                \"trackPageViewPerformance\",\r\n                STR_TRACK_EXCEPTION,\r\n                \"_onerror\",\r\n                STR_TRACK_TRACE,\r\n                STR_TRACK_METRIC,\r\n                STR_START_TRACK_PAGE,\r\n                STR_STOP_TRACK_PAGE,\r\n                STR_START_TRACK_EVENT,\r\n                STR_STOP_TRACK_EVENT\r\n            ]);\r\n            proxyFunctions(_self, _getCurrentDependencies, [\r\n                STR_TRACK_DEPENDENCY_DATA,\r\n                \"addDependencyListener\",\r\n                \"addDependencyInitializer\"\r\n            ]);\r\n            proxyFunctions(_self, _core, [\r\n                STR_ADD_TELEMETRY_INITIALIZER,\r\n                STR_POLL_INTERNAL_LOGS,\r\n                \"stopPollingInternalLogs\",\r\n                STR_GET_PLUGIN,\r\n                \"addPlugin\",\r\n                STR_EVT_NAMESPACE,\r\n                \"addUnloadCb\",\r\n                \"getTraceCtx\",\r\n                \"updateCfg\",\r\n                \"onCfgChange\"\r\n            ]);\r\n            proxyFunctions(_self, function () {\r\n                var context = properties[_DYN_CONTEXT /* @min:%2econtext */];\r\n                return context ? context.user : null;\r\n            }, [\r\n                STR_SET_AUTHENTICATED_USER_CONTEXT,\r\n                STR_CLEAR_AUTHENTICATED_USER_CONTEXT\r\n            ]);\r\n            // Using a function to support the dynamic adding / removal of plugins, so this will always return the current value\r\n            function _getCurrentDependencies() {\r\n                return dependencies;\r\n            }\r\n            function _initDefaults() {\r\n                _evtNamespace = createUniqueNamespace(\"AISKU\");\r\n                _houseKeepingNamespace = null;\r\n                dependencies = null;\r\n                properties = null;\r\n                _sender = null;\r\n                _snippetVersion = null;\r\n                _throttleMgr = null;\r\n                _iKeySentMessage = false;\r\n                _cdnSentMessage = false;\r\n                _sdkVerSentMessage = false;\r\n                _cfgSyncPlugin = new CfgSyncPlugin();\r\n            }\r\n            function _removePageEventHandlers() {\r\n                // Remove any registered event handlers\r\n                if (_houseKeepingNamespace) {\r\n                    removePageUnloadEventListener(null, _houseKeepingNamespace);\r\n                    removePageHideEventListener(null, _houseKeepingNamespace);\r\n                }\r\n            }\r\n            function _addUnloadHook(hooks) {\r\n                _core.addUnloadHook(hooks);\r\n            }\r\n        });\r\n    }\r\n    // Analytics Plugin\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    AppInsightsSku.prototype.getCookieMgr = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Log a user action or other occurrence.\r\n     * @param event\r\n     * @param [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackEvent = function (event, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs that a page, or similar container was displayed to the user.\r\n     * @param pageView\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackPageView = function (pageView) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a bag of performance information via the customProperties field.\r\n     * @param pageViewPerformance\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackPageViewPerformance = function (pageViewPerformance) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an exception that you have caught.\r\n     * @param exception\r\n     * @param } customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackException = function (exception, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Manually send uncaught exception telemetry. This method is automatically triggered\r\n     * on a window.onerror event.\r\n     * @param exception\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype._onerror = function (exception) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a diagnostic scenario such entering or leaving a function.\r\n     * @param trace\r\n     * @param [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackTrace = function (trace, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a numeric value that is not associated with a specific event. Typically used\r\n     * to send regular reports of performance indicators.\r\n     *\r\n     * To send a single measurement, just use the `name` and `average` fields\r\n     * of {@link IMetricTelemetry}.\r\n     *\r\n     * If you take measurements frequently, you can reduce the telemetry bandwidth by\r\n     * aggregating multiple measurements and sending the resulting average and modifying\r\n     * the `sampleCount` field of {@link IMetricTelemetry}.\r\n     * @param metric - input object argument. Only `name` and `average` are mandatory.\r\n     * @param [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackMetric = function (metric, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name - A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    AppInsightsSku.prototype.startTrackPage = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AppInsightsSku.prototype.stopTrackPage = function (name, url, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.startTrackEvent = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AppInsightsSku.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    // Properties Plugin\r\n    /**\r\n     * Set the authenticated user id and the account id. Used for identifying a specific signed-in user. Parameters must not contain whitespace or ,;=|\r\n     *\r\n     * The method will only set the `authenticatedUserId` and `accountId` in the current page view. To set them for the whole session, you should set `storeInCookie = true`\r\n     * @param authenticatedUserId\r\n     * @param [accountId]\r\n     * @param [storeInCookie=false]\r\n     */\r\n    AppInsightsSku.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        if (storeInCookie === void 0) { storeInCookie = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Clears the authenticated user id and account id. The associated cookie is cleared, if present.\r\n     */\r\n    AppInsightsSku.prototype.clearAuthenticatedUserContext = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // Dependencies Plugin\r\n    /**\r\n     * Log a dependency call (e.g. ajax)\r\n     * @param dependency\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackDependencyData = function (dependency) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // Misc\r\n    /**\r\n     * Attempt to flush data immediately; If executing asynchronously (the default) and\r\n     * you DO NOT pass a callback function then a [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * will be returned which will resolve once the flush is complete. The actual implementation of the `IPromise`\r\n     * will be a native Promise (if supported) or the default as supplied by [ts-async library](https://github.com/nevware21/ts-async)\r\n     * @param async - send data asynchronously when true\r\n     * @param callBack - if specified, notify caller when send is complete, the channel should return true to indicate to the caller that it will be called.\r\n     * If the caller doesn't return true the caller should assume that it may never be called.\r\n     * @returns - If a callback is provided `true` to indicate that callback will be called after the flush is complete otherwise the caller\r\n     * should assume that any provided callback will never be called, Nothing or if occurring asynchronously a\r\n     * [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html) which will be resolved once the unload is complete,\r\n     * the [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html) will only be returned when no callback is provided\r\n     * and async is true.\r\n     */\r\n    AppInsightsSku.prototype.flush = function (async, callBack) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Manually trigger an immediate send of all telemetry still in the buffer using beacon Sender.\r\n     * Fall back to xhr sender if beacon is not supported.\r\n     * @param [async=true]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.onunloadFlush = function (async) {\r\n        if (async === void 0) { async = true; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Initialize this instance of ApplicationInsights\r\n     * @returns {IApplicationInsights}\r\n     * @memberof Initialization\r\n     * @param legacyMode - MUST always be false, it is no longer supported from v3.x onwards\r\n     */\r\n    AppInsightsSku.prototype.loadAppInsights = function (legacyMode, logger, notificationManager) {\r\n        if (legacyMode === void 0) { legacyMode = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Overwrite the lazy loaded fields of global window snippet to contain the\r\n     * actual initialized API methods\r\n     * @param snippet\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.updateSnippetDefinitions = function (snippet) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Call any functions that were queued before the main script was loaded\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.emptyQueue = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.pollInternalLogs = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.stopPollingInternalLogs = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.addHousekeepingBeforeUnload = function (appInsightsInstance) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.getSender = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Unload and Tear down the SDK and any initialized plugins, after calling this the SDK will be considered\r\n     * to be un-initialized and non-operational, re-initializing the SDK should only be attempted if the previous\r\n     * unload call return `true` stating that all plugins reported that they also unloaded, the recommended\r\n     * approach is to create a new instance and initialize that instance.\r\n     * This is due to possible unexpected side effects caused by plugins not supporting unload / teardown, unable\r\n     * to successfully remove any global references or they may just be completing the unload process asynchronously.\r\n     * If you pass isAsync as true and do not provide\r\n     * If you pass isAsync as `true` (also the default) and DO NOT pass a callback function then an [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * will be returned which will resolve once the unload is complete. The actual implementation of the `IPromise`\r\n     * will be a native Promise (if supported) or the default as supplied by [ts-async library](https://github.com/nevware21/ts-async)\r\n     * @param isAsync - Can the unload be performed asynchronously (default)\r\n     * @param unloadComplete - An optional callback that will be called once the unload has completed\r\n     * @param cbTimeout - An optional timeout to wait for any flush operations to complete before proceeding with the\r\n     * unload. Defaults to 5 seconds.\r\n     * @return Nothing or if occurring asynchronously a [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * which will be resolved once the unload is complete, the [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * will only be returned when no callback is provided and isAsync is true\r\n     */\r\n    AppInsightsSku.prototype.unload = function (isAsync, unloadComplete, cbTimeout) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AppInsightsSku.prototype.getPlugin = function (pluginIdentifier) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add a new plugin to the installation\r\n     * @param plugin - The new plugin to add\r\n     * @param replaceExisting - should any existing plugin be replaced, default is false\r\n     * @param doAsync - Should the add be performed asynchronously\r\n     * @param addCb - [Optional] callback to call after the plugin has been added\r\n     */\r\n    AppInsightsSku.prototype.addPlugin = function (plugin, replaceExisting, doAsync, addCb) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Update the configuration used and broadcast the changes to all loaded plugins\r\n     * @param newConfig - The new configuration is apply\r\n     * @param mergeExisting - Should the new configuration merge with the existing or just replace it. Default is to merge.\r\n     */\r\n    AppInsightsSku.prototype.updateCfg = function (newConfig, mergeExisting) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Returns the unique event namespace that should be used\r\n     */\r\n    AppInsightsSku.prototype.evtNamespace = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an unload handler that will be called when the SDK is being unloaded\r\n     * @param handler - the handler\r\n     */\r\n    AppInsightsSku.prototype.addUnloadCb = function (handler) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add an ajax listener which is called just prior to the request being sent and before the correlation headers are added, to allow you\r\n     * to access the headers and modify the values used to generate the distributed tracing correlation headers. (added in v2.8.4)\r\n     * @param dependencyListener - The Telemetry Initializer function\r\n     * @returns - A IDependencyListenerHandler to enable the initializer to be removed\r\n     */\r\n    AppInsightsSku.prototype.addDependencyListener = function (dependencyListener) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an dependency telemetry initializer callback function to allow populating additional properties or drop the request.\r\n     * It is called after the dependency call has completed and any available performance details are available. A dependency\r\n     * initializer is similar to the TelemetryInitializer function but it allows you to block the reporting of the dependency\r\n     * request so that it doesn't count against the `maxAjaxCallsPerView`.\r\n     * @param dependencyInitializer - The Dependency Telemetry Initializer function\r\n     * @returns - A IDependencyInitializerHandler to enable the initializer to be removed\r\n     */\r\n    AppInsightsSku.prototype.addDependencyInitializer = function (dependencyInitializer) {\r\n        return null;\r\n    };\r\n    /**\r\n     * Gets the current distributed trace context for this instance if available\r\n     */\r\n    AppInsightsSku.prototype.getTraceCtx = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Watches and tracks changes for accesses to the current config, and if the accessed config changes the\r\n     * handler will be recalled.\r\n     * @param handler\r\n     * @returns A watcher handler instance that can be used to remove itself when being unloaded\r\n     */\r\n    AppInsightsSku.prototype.onCfgChange = function (handler) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return AppInsightsSku;\r\n}());\r\nexport { AppInsightsSku };\r\n// tslint:disable-next-line\r\nexport function _findSdkSourceFile() {\r\n    if (_internalSdkSrc) {\r\n        // Use the cached value\r\n        return _internalSdkSrc;\r\n    }\r\n    var sdkSrc = null;\r\n    var isModule = false;\r\n    var cdns = [\r\n        \"://js.monitor.azure.com/\",\r\n        \"://az416426.vo.msecnd.net/\"\r\n    ];\r\n    try {\r\n        // Try and determine whether the sdk is being loaded from the CDN\r\n        // currentScript is only valid during initial processing\r\n        var scrpt = (document || {}).currentScript;\r\n        if (scrpt) {\r\n            sdkSrc = scrpt.src;\r\n            // } else {\r\n            //     // We need to update to at least typescript 2.9 for this to work :-(\r\n            //     // Leaving as a stub for now so after we upgrade this breadcrumb is available\r\n            //     let meta = import.meta;\r\n            //     sdkSrc = (meta || {}).url;\r\n            //     isModule = true;\r\n        }\r\n    }\r\n    catch (e) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    if (sdkSrc) {\r\n        try {\r\n            var url_1 = sdkSrc.toLowerCase();\r\n            if (url_1) {\r\n                var src_1 = \"\";\r\n                arrForEach(cdns, function (value, idx) {\r\n                    if (strIndexOf(url_1, value) !== -1) {\r\n                        src_1 = \"cdn\" + (idx + 1);\r\n                        if (strIndexOf(url_1, \"/scripts/\") === -1) {\r\n                            if (strIndexOf(url_1, \"/next/\") !== -1) {\r\n                                src_1 += \"-next\";\r\n                            }\r\n                            else if (strIndexOf(url_1, \"/beta/\") !== -1) {\r\n                                src_1 += \"-beta\";\r\n                            }\r\n                        }\r\n                        _internalSdkSrc = src_1 + (isModule ? \".mod\" : \"\");\r\n                        return -1;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            // eslint-disable-next-line no-empty\r\n        }\r\n        // Cache the found value so we don't have to look it up again\r\n        _internalSdkSrc = sdkSrc;\r\n    }\r\n    return _internalSdkSrc;\r\n}\r\n//# sourceMappingURL=AISku.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}