{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Web, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { throwUnsupported } from \"@nevware21/ts-utils\";\nimport { AppInsightsSku } from \"./AISku\";\nimport { _DYN_UPDATE_SNIPPET_DEFIN3 } from \"./__DynamicConstants\";\nvar ApplicationInsightsContainer = /** @class */function () {\n  function ApplicationInsightsContainer() {}\n  ApplicationInsightsContainer.getAppInsights = function (snippet, version) {\n    var theSku = new AppInsightsSku(snippet);\n    // Two target scenarios:\n    // Removed: 1. Customer runs v1 snippet + runtime. If customer updates just cdn location to new SDK, it will run in compat mode so old apis work\n    // 2. Customer updates to new snippet (that uses cdn location to new SDK. This is same as a new customer onboarding\n    // and all api signatures are expected to map to new SDK. Note new snippet specifies version\n    if (version >= 2.0) {\n      theSku[_DYN_UPDATE_SNIPPET_DEFIN3 /* @min:%2eupdateSnippetDefinitions */](snippet);\n      theSku.loadAppInsights(false);\n      return theSku; // default behavior with new snippet\n    }\n    throwUnsupported(\"V1 API compatibility is no longer supported\");\n  };\n  return ApplicationInsightsContainer;\n}();\nexport { ApplicationInsightsContainer };","map":{"version":3,"names":["throwUnsupported","AppInsightsSku","_DYN_UPDATE_SNIPPET_DEFIN3","ApplicationInsightsContainer","getAppInsights","snippet","version","theSku","loadAppInsights"],"sources":["/home/veeresh133/app/test-error-react/react-az/node_modules/@microsoft/applicationinsights-web/dist-es5/ApplicationInsightsContainer.js"],"sourcesContent":["import { throwUnsupported } from \"@nevware21/ts-utils\";\r\nimport { AppInsightsSku } from \"./AISku\";\r\nimport { _DYN_UPDATE_SNIPPET_DEFIN3 } from \"./__DynamicConstants\";\r\nvar ApplicationInsightsContainer = /** @class */ (function () {\r\n    function ApplicationInsightsContainer() {\r\n    }\r\n    ApplicationInsightsContainer.getAppInsights = function (snippet, version) {\r\n        var theSku = new AppInsightsSku(snippet);\r\n        // Two target scenarios:\r\n        // Removed: 1. Customer runs v1 snippet + runtime. If customer updates just cdn location to new SDK, it will run in compat mode so old apis work\r\n        // 2. Customer updates to new snippet (that uses cdn location to new SDK. This is same as a new customer onboarding\r\n        // and all api signatures are expected to map to new SDK. Note new snippet specifies version\r\n        if (version >= 2.0) {\r\n            theSku[_DYN_UPDATE_SNIPPET_DEFIN3 /* @min:%2eupdateSnippetDefinitions */](snippet);\r\n            theSku.loadAppInsights(false);\r\n            return theSku; // default behavior with new snippet\r\n        }\r\n        throwUnsupported(\"V1 API compatibility is no longer supported\");\r\n    };\r\n    return ApplicationInsightsContainer;\r\n}());\r\nexport { ApplicationInsightsContainer };\r\n//# sourceMappingURL=ApplicationInsightsContainer.js.map"],"mappings":";;;;AAAA,SAAAA,gBAAA;AACA,SAAAC,cAAA;AACA,SAAAC,0BAAA;AACA,IAAAC,4BAAA;EACA,SAAAA,6BAAA,GACA;EACAA,4BAAA,CAAAC,cAAA,aAAAC,OAAA,EAAAC,OAAA;IACA,IAAAC,MAAA,OAAAN,cAAA,CAAAI,OAAA;IACA;IACA;IACA;IACA;IACA,IAAAC,OAAA;MACAC,MAAA,CAAAL,0BAAA,yCAAAG,OAAA;MACAE,MAAA,CAAAC,eAAA;MACA,OAAAD,MAAA;IACA;IACAP,gBAAA;EACA;EACA,OAAAG,4BAAA;AACA;AACA,SAAAA,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}