{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Properties Plugin, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n/**\r\n* CfgSyncPlugin.ts\r\n* @copyright Microsoft 2018\r\n*/\nvar _a;\nimport { __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { BaseTelemetryPlugin, createProcessTelemetryContext, createUniqueNamespace, eventOff, eventOn, getGlobal, getJSON, isFetchSupported, isXhrSupported, mergeEvtNamespace, onConfigChange, sendCustomEvent } from \"@microsoft/applicationinsights-core-js\";\nimport { doAwaitResponse } from \"@nevware21/ts-async\";\nimport { isFunction, isNullOrUndefined, isPlainObject, objDeepFreeze, scheduleTimeout } from \"@nevware21/ts-utils\";\nimport { applyCdnfeatureCfg, replaceByNonOverrideCfg } from \"./CfgSyncHelperFuncs\";\nimport { _DYN_NON_OVERRIDE_CONFIGS, _DYN_ON_CFG_CHANGE_RECEIV0, _DYN_SCHEDULE_FETCH_TIMEO1 } from \"./__DynamicConstants\";\nvar EVENT_NAME = \"ai_cfgsync\";\nvar STR_GET_METHOD = \"GET\";\nvar FETCH_TIMEOUT = 1800000; // 30 minutes\nvar udfVal = undefined;\nvar defaultNonOverrideCfg = {\n  instrumentationKey: true,\n  connectionString: true,\n  endpointUrl: true\n};\nvar _defaultConfig = objDeepFreeze((_a = {\n  syncMode: 1 /* ICfgSyncMode.Broadcast */,\n  blkCdnCfg: udfVal,\n  customEvtName: udfVal,\n  cfgUrl: udfVal,\n  overrideSyncFn: udfVal,\n  overrideFetchFn: udfVal\n}, _a[_DYN_ON_CFG_CHANGE_RECEIV0 /* @min:onCfgChangeReceive */] = udfVal, _a[_DYN_SCHEDULE_FETCH_TIMEO1 /* @min:scheduleFetchTimeout */] = FETCH_TIMEOUT, _a[_DYN_NON_OVERRIDE_CONFIGS /* @min:nonOverrideConfigs */] = defaultNonOverrideCfg, _a));\nvar CfgSyncPlugin = /** @class */function (_super) {\n  __extends(CfgSyncPlugin, _super);\n  function CfgSyncPlugin() {\n    var _this = _super.call(this) || this;\n    _this.priority = 198;\n    _this.identifier = \"AppInsightsCfgSyncPlugin\";\n    var _extensionConfig;\n    var _mainConfig; // throttle config should be wrapped in IConfiguration\n    var _evtName;\n    var _evtNamespace;\n    var _cfgUrl;\n    var _timeoutHandle;\n    var _receiveChanges;\n    var _broadcastChanges;\n    var _blkCdnCfg;\n    var _fetchTimeout;\n    var _retryCnt;\n    var _onCfgChangeReceive;\n    var _nonOverrideConfigs;\n    var _fetchFn;\n    var _overrideFetchFn;\n    var _overrideSyncFn;\n    var _paused = false;\n    dynamicProto(CfgSyncPlugin, _this, function (_self, _base) {\n      _initDefaults();\n      _self.initialize = function (config, core, extensions, pluginChain) {\n        _base.initialize(config, core, extensions, pluginChain);\n        _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\n        _populateDefaults(config);\n      };\n      _self.getCfg = function () {\n        return _mainConfig;\n      };\n      _self.pause = function () {\n        _paused = true;\n        _clearScheduledTimer();\n      };\n      _self.resume = function () {\n        _paused = false;\n        _setupTimer();\n      };\n      // used for V2 to manaully trigger config udpate\n      _self.setCfg = function (config) {\n        return _setCfg(config);\n      };\n      _self.sync = function (customDetails) {\n        return _sendCfgsyncEvents(customDetails);\n      };\n      _self.updateEventListenerName = function (eventName) {\n        return _updateEventListenerName(eventName);\n      };\n      _self._doTeardown = function (unloadCtx, unloadState) {\n        _eventOff();\n        _clearScheduledTimer();\n        _initDefaults();\n      };\n      _self[\"_getDbgPlgTargets\"] = function () {\n        return [_broadcastChanges, _receiveChanges, _evtName, _blkCdnCfg, _nonOverrideConfigs];\n      };\n      function _initDefaults() {\n        _mainConfig = null;\n        _evtName = null;\n        _evtNamespace = null;\n        _cfgUrl = null;\n        _receiveChanges = null;\n        _broadcastChanges = null;\n        _nonOverrideConfigs = null;\n        _timeoutHandle = null;\n        _fetchTimeout = null;\n        _retryCnt = null;\n        _blkCdnCfg = null;\n        _overrideFetchFn = null;\n        _overrideSyncFn = null;\n        _onCfgChangeReceive = null;\n      }\n      function _populateDefaults(config) {\n        var identifier = _self.identifier;\n        var core = _self.core;\n        _self._addHook(onConfigChange(config, function () {\n          var ctx = createProcessTelemetryContext(null, config, core);\n          _extensionConfig = ctx.getExtCfg(identifier, _defaultConfig);\n          var preBlkCdn = _blkCdnCfg;\n          _blkCdnCfg = !!_extensionConfig.blkCdnCfg;\n          // avoid initial call\n          if (!isNullOrUndefined(preBlkCdn) && preBlkCdn !== _blkCdnCfg) {\n            if (!_blkCdnCfg && _cfgUrl) {\n              _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\n            } else {\n              _clearScheduledTimer();\n            }\n          }\n          if (isNullOrUndefined(_receiveChanges)) {\n            _receiveChanges = _extensionConfig.syncMode === 2 /* ICfgSyncMode.Receive */;\n          }\n          if (isNullOrUndefined(_broadcastChanges)) {\n            _broadcastChanges = _extensionConfig.syncMode === 1 /* ICfgSyncMode.Broadcast */;\n          }\n          var newEvtName = _extensionConfig.customEvtName || EVENT_NAME;\n          if (_evtName !== newEvtName) {\n            if (_receiveChanges) {\n              _updateEventListenerName(newEvtName);\n            } else {\n              _eventOff();\n              _evtName = newEvtName;\n            }\n          }\n          if (isNullOrUndefined(_cfgUrl)) {\n            _cfgUrl = _extensionConfig.cfgUrl;\n          }\n          // if cfgUrl is set, we will ignore core config change\n          if (!_cfgUrl) {\n            _mainConfig = config;\n            if (_broadcastChanges) {\n              _sendCfgsyncEvents();\n            }\n          }\n        }));\n        _overrideSyncFn = _extensionConfig.overrideSyncFn;\n        _overrideFetchFn = _extensionConfig.overrideFetchFn;\n        _onCfgChangeReceive = _extensionConfig[_DYN_ON_CFG_CHANGE_RECEIV0 /* @min:%2eonCfgChangeReceive */];\n        _nonOverrideConfigs = _extensionConfig[_DYN_NON_OVERRIDE_CONFIGS /* @min:%2enonOverrideConfigs */]; // override values should not be changed\n        _fetchTimeout = _extensionConfig[_DYN_SCHEDULE_FETCH_TIMEO1 /* @min:%2escheduleFetchTimeout */];\n        _fetchFn = _getFetchFnInterface();\n        _retryCnt = 0;\n        // NOT support cfgURL change to avoid mutiple fetch calls\n        if (_cfgUrl && !_blkCdnCfg) {\n          _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\n        }\n      }\n      function _setCfg(config, isAutoSync) {\n        if (config) {\n          _mainConfig = config;\n          if (!!isAutoSync && !_paused) {\n            return _sendCfgsyncEvents();\n          }\n          if (_receiveChanges && !_paused) {\n            _self.core.updateCfg(config);\n            return true;\n          }\n        }\n        return false;\n      }\n      function _eventOff() {\n        try {\n          var global_1 = getGlobal();\n          if (global_1) {\n            eventOff(global_1, null, null, _evtNamespace);\n          }\n        } catch (e) {\n          // eslint-disable-next-line no-empty\n        }\n      }\n      function _sendCfgsyncEvents(customDetails) {\n        try {\n          if (!!_overrideSyncFn && isFunction(_overrideSyncFn)) {\n            return _overrideSyncFn(_mainConfig, customDetails);\n          }\n          return sendCustomEvent(_evtName, _mainConfig, customDetails);\n        } catch (e) {\n          // eslint-disable-next-line no-empty\n        }\n        return false;\n      }\n      function _updateEventListenerName(name) {\n        try {\n          _eventOff();\n          if (name) {\n            _evtName = name;\n            _addEventListener();\n          }\n          return true;\n        } catch (e) {\n          // eslint-disable-next-line no-empty\n        }\n        return false;\n      }\n      function _getFetchFnInterface() {\n        var _fetchFn = _overrideFetchFn;\n        if (isNullOrUndefined(_fetchFn)) {\n          if (isFetchSupported()) {\n            _fetchFn = _fetchSender;\n          } else if (isXhrSupported()) {\n            _fetchFn = _xhrSender;\n          }\n        }\n        return _fetchFn;\n      }\n      function _fetchSender(url, oncomplete, isAutoSync) {\n        var global = getGlobal();\n        var fetchFn = global && global.fetch || null;\n        if (url && fetchFn && isFunction(fetchFn)) {\n          try {\n            var init = {\n              method: STR_GET_METHOD\n            };\n            var request = new Request(url, init);\n            doAwaitResponse(fetch(request), function (result) {\n              var response = result.value;\n              if (!result.rejected) {\n                if (response.ok) {\n                  doAwaitResponse(response.text(), function (res) {\n                    _doOnComplete(oncomplete, response.status, res.value, isAutoSync);\n                  });\n                } else {\n                  _doOnComplete(oncomplete, response.status, null, isAutoSync);\n                }\n              } else {\n                _doOnComplete(oncomplete, 400);\n              }\n            });\n          } catch (e) {\n            // eslint-disable-next-line no-empty\n          }\n        }\n      }\n      function _xhrSender(url, oncomplete, isAutoSync) {\n        try {\n          var xhr_1 = new XMLHttpRequest();\n          xhr_1.open(STR_GET_METHOD, url);\n          xhr_1.onreadystatechange = function () {\n            if (xhr_1.readyState === XMLHttpRequest.DONE) {\n              _doOnComplete(oncomplete, xhr_1.status, xhr_1.responseText, isAutoSync);\n            }\n          };\n          xhr_1.onerror = function () {\n            _doOnComplete(oncomplete, 400);\n          };\n          xhr_1.ontimeout = function () {\n            _doOnComplete(oncomplete, 400);\n          };\n          xhr_1.send();\n        } catch (e) {\n          // eslint-disable-next-line no-empty\n        }\n      }\n      function _onFetchComplete(status, response, isAutoSync) {\n        try {\n          if (status >= 200 && status < 400 && response) {\n            _retryCnt = 0; // any successful response will reset retry count to 0\n            var JSON_1 = getJSON();\n            if (JSON_1) {\n              var cdnCfg = JSON_1.parse(response); //comments are not allowed\n              var cfg = applyCdnfeatureCfg(cdnCfg, _self.core);\n              var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);\n              newCfg && _setCfg(newCfg, isAutoSync);\n              //cfg && _setCfg(cfg, isAutoSync);\n            }\n          } else {\n            _retryCnt++;\n          }\n          if (_retryCnt < 3) {\n            _setupTimer();\n          }\n        } catch (e) {\n          // eslint-disable-next-line no-empty\n        }\n      }\n      function _doOnComplete(oncomplete, status, response, isAutoSync) {\n        try {\n          oncomplete(status, response, isAutoSync);\n        } catch (e) {\n          // eslint-disable-next-line no-empty\n        }\n      }\n      function _addEventListener() {\n        if (_receiveChanges) {\n          var global_2 = getGlobal();\n          if (global_2) {\n            try {\n              eventOn(global_2, _evtName, function (event) {\n                // TODO: add more validation here\n                // may include a \"name\" or some other features to check\n                var cfgEvent = event && event.detail;\n                if (_onCfgChangeReceive && cfgEvent) {\n                  _onCfgChangeReceive(cfgEvent);\n                } else {\n                  var cfg = cfgEvent && cfgEvent.cfg;\n                  var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);\n                  newCfg && _setCfg(newCfg);\n                }\n              }, _evtNamespace, true);\n            } catch (e) {\n              // eslint-disable-next-line no-empty\n            }\n          }\n        }\n      }\n      // 4 levels\n      function _replaceTartgetByKeys(cfg, level) {\n        var _cfg = null;\n        try {\n          if (cfg) {\n            _cfg = replaceByNonOverrideCfg(cfg, _nonOverrideConfigs, 0, 5);\n          }\n        } catch (e) {\n          // eslint-disable-next-line no-empty\n        }\n        return _cfg;\n      }\n      /**\r\n       * Sets up the timer which triggers fetching cdn every 30mins after inital call\r\n       */\n      function _setupTimer() {\n        if (!_timeoutHandle && _fetchTimeout) {\n          _timeoutHandle = scheduleTimeout(function () {\n            _timeoutHandle = null;\n            _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\n          }, _fetchTimeout);\n          _timeoutHandle.unref();\n        }\n      }\n      function _clearScheduledTimer() {\n        _timeoutHandle && _timeoutHandle.cancel();\n        _timeoutHandle = null;\n        _retryCnt = 0;\n      }\n      _self.processTelemetry = function (env, itemCtx) {\n        _self.processNext(env, itemCtx);\n      };\n    });\n    return _this;\n  }\n  // Removed Stub for CfgSyncPlugin.prototype.initialize.\n  // Removed Stub for CfgSyncPlugin.prototype.getCfg.\n  // Removed Stub for CfgSyncPlugin.prototype.setCfg.\n  // Removed Stub for CfgSyncPlugin.prototype.sync.\n  // Removed Stub for CfgSyncPlugin.prototype.updateEventListenerName.\n  // Removed Stub for CfgSyncPlugin.prototype.pause.\n  // Removed Stub for CfgSyncPlugin.prototype.resume.\n  //// Removed Stub for CfgSyncPlugin.prototype.processTelemetry.\n  // This is a workaround for an IE bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  CfgSyncPlugin.__ieDyn = 1;\n  return CfgSyncPlugin;\n}(BaseTelemetryPlugin);\nexport { CfgSyncPlugin };","map":{"version":3,"names":["_a","__extendsFn","__extends","dynamicProto","BaseTelemetryPlugin","createProcessTelemetryContext","createUniqueNamespace","eventOff","eventOn","getGlobal","getJSON","isFetchSupported","isXhrSupported","mergeEvtNamespace","onConfigChange","sendCustomEvent","doAwaitResponse","isFunction","isNullOrUndefined","isPlainObject","objDeepFreeze","scheduleTimeout","applyCdnfeatureCfg","replaceByNonOverrideCfg","_DYN_NON_OVERRIDE_CONFIGS","_DYN_ON_CFG_CHANGE_RECEIV0","_DYN_SCHEDULE_FETCH_TIMEO1","EVENT_NAME","STR_GET_METHOD","FETCH_TIMEOUT","udfVal","undefined","defaultNonOverrideCfg","instrumentationKey","connectionString","endpointUrl","_defaultConfig","syncMode","blkCdnCfg","customEvtName","cfgUrl","overrideSyncFn","overrideFetchFn","CfgSyncPlugin","_super","_this","call","priority","identifier","_extensionConfig","_mainConfig","_evtName","_evtNamespace","_cfgUrl","_timeoutHandle","_receiveChanges","_broadcastChanges","_blkCdnCfg","_fetchTimeout","_retryCnt","_onCfgChangeReceive","_nonOverrideConfigs","_fetchFn","_overrideFetchFn","_overrideSyncFn","_paused","_self","_base","_initDefaults","initialize","config","core","extensions","pluginChain","evtNamespace","_populateDefaults","getCfg","pause","_clearScheduledTimer","resume","_setupTimer","setCfg","_setCfg","sync","customDetails","_sendCfgsyncEvents","updateEventListenerName","eventName","_updateEventListenerName","_doTeardown","unloadCtx","unloadState","_eventOff","_addHook","ctx","getExtCfg","preBlkCdn","_onFetchComplete","newEvtName","_getFetchFnInterface","isAutoSync","updateCfg","global_1","e","name","_addEventListener","_fetchSender","_xhrSender","url","oncomplete","global","fetchFn","fetch","init","method","request","Request","result","response","value","rejected","ok","text","res","_doOnComplete","status","xhr_1","XMLHttpRequest","open","onreadystatechange","readyState","DONE","responseText","onerror","ontimeout","send","JSON_1","cdnCfg","parse","cfg","newCfg","_replaceTartgetByKeys","global_2","event","cfgEvent","detail","level","_cfg","unref","cancel","processTelemetry","env","itemCtx","processNext"],"sources":["/home/veeresh133/app/my-app/node_modules/@microsoft/applicationinsights-cfgsync-js/dist-es5/CfgSyncPlugin.js"],"sourcesContent":["/**\r\n* CfgSyncPlugin.ts\r\n* @copyright Microsoft 2018\r\n*/\r\nvar _a;\r\nimport { __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { BaseTelemetryPlugin, createProcessTelemetryContext, createUniqueNamespace, eventOff, eventOn, getGlobal, getJSON, isFetchSupported, isXhrSupported, mergeEvtNamespace, onConfigChange, sendCustomEvent } from \"@microsoft/applicationinsights-core-js\";\r\nimport { doAwaitResponse } from \"@nevware21/ts-async\";\r\nimport { isFunction, isNullOrUndefined, isPlainObject, objDeepFreeze, scheduleTimeout } from \"@nevware21/ts-utils\";\r\nimport { applyCdnfeatureCfg, replaceByNonOverrideCfg } from \"./CfgSyncHelperFuncs\";\r\nimport { _DYN_NON_OVERRIDE_CONFIGS, _DYN_ON_CFG_CHANGE_RECEIV0, _DYN_SCHEDULE_FETCH_TIMEO1 } from \"./__DynamicConstants\";\r\nvar EVENT_NAME = \"ai_cfgsync\";\r\nvar STR_GET_METHOD = \"GET\";\r\nvar FETCH_TIMEOUT = 1800000; // 30 minutes\r\nvar udfVal = undefined;\r\nvar defaultNonOverrideCfg = { instrumentationKey: true, connectionString: true, endpointUrl: true };\r\nvar _defaultConfig = objDeepFreeze((_a = {\r\n        syncMode: 1 /* ICfgSyncMode.Broadcast */,\r\n        blkCdnCfg: udfVal,\r\n        customEvtName: udfVal,\r\n        cfgUrl: udfVal,\r\n        overrideSyncFn: udfVal,\r\n        overrideFetchFn: udfVal\r\n    },\r\n    _a[_DYN_ON_CFG_CHANGE_RECEIV0 /* @min:onCfgChangeReceive */] = udfVal,\r\n    _a[_DYN_SCHEDULE_FETCH_TIMEO1 /* @min:scheduleFetchTimeout */] = FETCH_TIMEOUT,\r\n    _a[_DYN_NON_OVERRIDE_CONFIGS /* @min:nonOverrideConfigs */] = defaultNonOverrideCfg,\r\n    _a));\r\nvar CfgSyncPlugin = /** @class */ (function (_super) {\r\n    __extends(CfgSyncPlugin, _super);\r\n    function CfgSyncPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.priority = 198;\r\n        _this.identifier = \"AppInsightsCfgSyncPlugin\";\r\n        var _extensionConfig;\r\n        var _mainConfig; // throttle config should be wrapped in IConfiguration\r\n        var _evtName;\r\n        var _evtNamespace;\r\n        var _cfgUrl;\r\n        var _timeoutHandle;\r\n        var _receiveChanges;\r\n        var _broadcastChanges;\r\n        var _blkCdnCfg;\r\n        var _fetchTimeout;\r\n        var _retryCnt;\r\n        var _onCfgChangeReceive;\r\n        var _nonOverrideConfigs;\r\n        var _fetchFn;\r\n        var _overrideFetchFn;\r\n        var _overrideSyncFn;\r\n        var _paused = false;\r\n        dynamicProto(CfgSyncPlugin, _this, function (_self, _base) {\r\n            _initDefaults();\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                _base.initialize(config, core, extensions, pluginChain);\r\n                _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\r\n                _populateDefaults(config);\r\n            };\r\n            _self.getCfg = function () {\r\n                return _mainConfig;\r\n            };\r\n            _self.pause = function () {\r\n                _paused = true;\r\n                _clearScheduledTimer();\r\n            };\r\n            _self.resume = function () {\r\n                _paused = false;\r\n                _setupTimer();\r\n            };\r\n            // used for V2 to manaully trigger config udpate\r\n            _self.setCfg = function (config) {\r\n                return _setCfg(config);\r\n            };\r\n            _self.sync = function (customDetails) {\r\n                return _sendCfgsyncEvents(customDetails);\r\n            };\r\n            _self.updateEventListenerName = function (eventName) {\r\n                return _updateEventListenerName(eventName);\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                _eventOff();\r\n                _clearScheduledTimer();\r\n                _initDefaults();\r\n            };\r\n            _self[\"_getDbgPlgTargets\"] = function () {\r\n                return [_broadcastChanges, _receiveChanges, _evtName, _blkCdnCfg, _nonOverrideConfigs];\r\n            };\r\n            function _initDefaults() {\r\n                _mainConfig = null;\r\n                _evtName = null;\r\n                _evtNamespace = null;\r\n                _cfgUrl = null;\r\n                _receiveChanges = null;\r\n                _broadcastChanges = null;\r\n                _nonOverrideConfigs = null;\r\n                _timeoutHandle = null;\r\n                _fetchTimeout = null;\r\n                _retryCnt = null;\r\n                _blkCdnCfg = null;\r\n                _overrideFetchFn = null;\r\n                _overrideSyncFn = null;\r\n                _onCfgChangeReceive = null;\r\n            }\r\n            function _populateDefaults(config) {\r\n                var identifier = _self.identifier;\r\n                var core = _self.core;\r\n                _self._addHook(onConfigChange(config, function () {\r\n                    var ctx = createProcessTelemetryContext(null, config, core);\r\n                    _extensionConfig = ctx.getExtCfg(identifier, _defaultConfig);\r\n                    var preBlkCdn = _blkCdnCfg;\r\n                    _blkCdnCfg = !!_extensionConfig.blkCdnCfg;\r\n                    // avoid initial call\r\n                    if (!isNullOrUndefined(preBlkCdn) && preBlkCdn !== _blkCdnCfg) {\r\n                        if (!_blkCdnCfg && _cfgUrl) {\r\n                            _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\r\n                        }\r\n                        else {\r\n                            _clearScheduledTimer();\r\n                        }\r\n                    }\r\n                    if (isNullOrUndefined(_receiveChanges)) {\r\n                        _receiveChanges = _extensionConfig.syncMode === 2 /* ICfgSyncMode.Receive */;\r\n                    }\r\n                    if (isNullOrUndefined(_broadcastChanges)) {\r\n                        _broadcastChanges = _extensionConfig.syncMode === 1 /* ICfgSyncMode.Broadcast */;\r\n                    }\r\n                    var newEvtName = _extensionConfig.customEvtName || EVENT_NAME;\r\n                    if (_evtName !== newEvtName) {\r\n                        if (_receiveChanges) {\r\n                            _updateEventListenerName(newEvtName);\r\n                        }\r\n                        else {\r\n                            _eventOff();\r\n                            _evtName = newEvtName;\r\n                        }\r\n                    }\r\n                    if (isNullOrUndefined(_cfgUrl)) {\r\n                        _cfgUrl = _extensionConfig.cfgUrl;\r\n                    }\r\n                    // if cfgUrl is set, we will ignore core config change\r\n                    if (!_cfgUrl) {\r\n                        _mainConfig = config;\r\n                        if (_broadcastChanges) {\r\n                            _sendCfgsyncEvents();\r\n                        }\r\n                    }\r\n                }));\r\n                _overrideSyncFn = _extensionConfig.overrideSyncFn;\r\n                _overrideFetchFn = _extensionConfig.overrideFetchFn;\r\n                _onCfgChangeReceive = _extensionConfig[_DYN_ON_CFG_CHANGE_RECEIV0 /* @min:%2eonCfgChangeReceive */];\r\n                _nonOverrideConfigs = _extensionConfig[_DYN_NON_OVERRIDE_CONFIGS /* @min:%2enonOverrideConfigs */]; // override values should not be changed\r\n                _fetchTimeout = _extensionConfig[_DYN_SCHEDULE_FETCH_TIMEO1 /* @min:%2escheduleFetchTimeout */];\r\n                _fetchFn = _getFetchFnInterface();\r\n                _retryCnt = 0;\r\n                // NOT support cfgURL change to avoid mutiple fetch calls\r\n                if (_cfgUrl && !_blkCdnCfg) {\r\n                    _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\r\n                }\r\n            }\r\n            function _setCfg(config, isAutoSync) {\r\n                if (config) {\r\n                    _mainConfig = config;\r\n                    if (!!isAutoSync && !_paused) {\r\n                        return _sendCfgsyncEvents();\r\n                    }\r\n                    if (_receiveChanges && !_paused) {\r\n                        _self.core.updateCfg(config);\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            function _eventOff() {\r\n                try {\r\n                    var global_1 = getGlobal();\r\n                    if (global_1) {\r\n                        eventOff(global_1, null, null, _evtNamespace);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _sendCfgsyncEvents(customDetails) {\r\n                try {\r\n                    if (!!_overrideSyncFn && isFunction(_overrideSyncFn)) {\r\n                        return _overrideSyncFn(_mainConfig, customDetails);\r\n                    }\r\n                    return sendCustomEvent(_evtName, _mainConfig, customDetails);\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return false;\r\n            }\r\n            function _updateEventListenerName(name) {\r\n                try {\r\n                    _eventOff();\r\n                    if (name) {\r\n                        _evtName = name;\r\n                        _addEventListener();\r\n                    }\r\n                    return true;\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return false;\r\n            }\r\n            function _getFetchFnInterface() {\r\n                var _fetchFn = _overrideFetchFn;\r\n                if (isNullOrUndefined(_fetchFn)) {\r\n                    if (isFetchSupported()) {\r\n                        _fetchFn = _fetchSender;\r\n                    }\r\n                    else if (isXhrSupported()) {\r\n                        _fetchFn = _xhrSender;\r\n                    }\r\n                }\r\n                return _fetchFn;\r\n            }\r\n            function _fetchSender(url, oncomplete, isAutoSync) {\r\n                var global = getGlobal();\r\n                var fetchFn = (global && global.fetch) || null;\r\n                if (url && fetchFn && isFunction(fetchFn)) {\r\n                    try {\r\n                        var init = {\r\n                            method: STR_GET_METHOD\r\n                        };\r\n                        var request = new Request(url, init);\r\n                        doAwaitResponse(fetch(request), function (result) {\r\n                            var response = result.value;\r\n                            if (!result.rejected) {\r\n                                if (response.ok) {\r\n                                    doAwaitResponse(response.text(), function (res) {\r\n                                        _doOnComplete(oncomplete, response.status, res.value, isAutoSync);\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    _doOnComplete(oncomplete, response.status, null, isAutoSync);\r\n                                }\r\n                            }\r\n                            else {\r\n                                _doOnComplete(oncomplete, 400);\r\n                            }\r\n                        });\r\n                    }\r\n                    catch (e) {\r\n                        // eslint-disable-next-line no-empty\r\n                    }\r\n                }\r\n            }\r\n            function _xhrSender(url, oncomplete, isAutoSync) {\r\n                try {\r\n                    var xhr_1 = new XMLHttpRequest();\r\n                    xhr_1.open(STR_GET_METHOD, url);\r\n                    xhr_1.onreadystatechange = function () {\r\n                        if (xhr_1.readyState === XMLHttpRequest.DONE) {\r\n                            _doOnComplete(oncomplete, xhr_1.status, xhr_1.responseText, isAutoSync);\r\n                        }\r\n                    };\r\n                    xhr_1.onerror = function () {\r\n                        _doOnComplete(oncomplete, 400);\r\n                    };\r\n                    xhr_1.ontimeout = function () {\r\n                        _doOnComplete(oncomplete, 400);\r\n                    };\r\n                    xhr_1.send();\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _onFetchComplete(status, response, isAutoSync) {\r\n                try {\r\n                    if (status >= 200 && status < 400 && response) {\r\n                        _retryCnt = 0; // any successful response will reset retry count to 0\r\n                        var JSON_1 = getJSON();\r\n                        if (JSON_1) {\r\n                            var cdnCfg = JSON_1.parse(response); //comments are not allowed\r\n                            var cfg = applyCdnfeatureCfg(cdnCfg, _self.core);\r\n                            var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);\r\n                            newCfg && _setCfg(newCfg, isAutoSync);\r\n                            //cfg && _setCfg(cfg, isAutoSync);\r\n                        }\r\n                    }\r\n                    else {\r\n                        _retryCnt++;\r\n                    }\r\n                    if (_retryCnt < 3) {\r\n                        _setupTimer();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _doOnComplete(oncomplete, status, response, isAutoSync) {\r\n                try {\r\n                    oncomplete(status, response, isAutoSync);\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _addEventListener() {\r\n                if (_receiveChanges) {\r\n                    var global_2 = getGlobal();\r\n                    if (global_2) {\r\n                        try {\r\n                            eventOn(global_2, _evtName, function (event) {\r\n                                // TODO: add more validation here\r\n                                // may include a \"name\" or some other features to check\r\n                                var cfgEvent = event && event.detail;\r\n                                if (_onCfgChangeReceive && cfgEvent) {\r\n                                    _onCfgChangeReceive(cfgEvent);\r\n                                }\r\n                                else {\r\n                                    var cfg = cfgEvent && cfgEvent.cfg;\r\n                                    var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);\r\n                                    newCfg && _setCfg(newCfg);\r\n                                }\r\n                            }, _evtNamespace, true);\r\n                        }\r\n                        catch (e) {\r\n                            // eslint-disable-next-line no-empty\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // 4 levels\r\n            function _replaceTartgetByKeys(cfg, level) {\r\n                var _cfg = null;\r\n                try {\r\n                    if (cfg) {\r\n                        _cfg = replaceByNonOverrideCfg(cfg, _nonOverrideConfigs, 0, 5);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return _cfg;\r\n            }\r\n            /**\r\n             * Sets up the timer which triggers fetching cdn every 30mins after inital call\r\n             */\r\n            function _setupTimer() {\r\n                if (!_timeoutHandle && _fetchTimeout) {\r\n                    _timeoutHandle = scheduleTimeout(function () {\r\n                        _timeoutHandle = null;\r\n                        _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\r\n                    }, _fetchTimeout);\r\n                    _timeoutHandle.unref();\r\n                }\r\n            }\r\n            function _clearScheduledTimer() {\r\n                _timeoutHandle && _timeoutHandle.cancel();\r\n                _timeoutHandle = null;\r\n                _retryCnt = 0;\r\n            }\r\n            _self.processTelemetry = function (env, itemCtx) {\r\n                _self.processNext(env, itemCtx);\r\n            };\r\n        });\r\n        return _this;\r\n    }\r\n    CfgSyncPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Get current configs of current instance.\r\n     * @param config current configs\r\n     */\r\n    CfgSyncPlugin.prototype.getCfg = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Manually set configs of current instance.\r\n     * @param config new configs\r\n    */\r\n    CfgSyncPlugin.prototype.setCfg = function (config) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Manually broadcast configs of current instance to all other instances.\r\n     * @param customDetails additional details should also be sent out to other instances\r\n    */\r\n    CfgSyncPlugin.prototype.sync = function (customDetails) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Manually update event name.\r\n     * If current instance is the main instance, then following config changes will be sent out under this new event name.\r\n     * If current instance is listener instances, it will listen to event details under this new name.\r\n     * @param eventName new event name\r\n     */\r\n    CfgSyncPlugin.prototype.updateEventListenerName = function (eventName) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Pause the sending/receiving of events\r\n     */\r\n    CfgSyncPlugin.prototype.pause = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Resume the sending/receiving of events\r\n     */\r\n    CfgSyncPlugin.prototype.resume = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // /**\r\n    //  * Add Part A fields to the event\r\n    //  * @param event - The event that needs to be processed\r\n    //  */\r\n    CfgSyncPlugin.prototype.processTelemetry = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return CfgSyncPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport { CfgSyncPlugin };\r\n//# sourceMappingURL=CfgSyncPlugin.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}