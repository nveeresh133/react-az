{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Channel, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { _DYN_CONCAT, _DYN_LENGTH } from \"../../__DynamicConstants\";\n// (Magic number) DJB algorithm can't work on shorter strings (results in poor distribution\nvar MIN_INPUT_LENGTH = 8;\nvar HashCodeScoreGenerator = /** @class */function () {\n  function HashCodeScoreGenerator() {}\n  HashCodeScoreGenerator.prototype.getHashCodeScore = function (key) {\n    var score = this.getHashCode(key) / HashCodeScoreGenerator.INT_MAX_VALUE;\n    return score * 100;\n  };\n  HashCodeScoreGenerator.prototype.getHashCode = function (input) {\n    if (input === \"\") {\n      return 0;\n    }\n    while (input[_DYN_LENGTH /* @min:%2elength */] < MIN_INPUT_LENGTH) {\n      input = input[_DYN_CONCAT /* @min:%2econcat */](input);\n    }\n    // 5381 is a magic number: http://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function\n    var hash = 5381;\n    for (var i = 0; i < input[_DYN_LENGTH /* @min:%2elength */]; ++i) {\n      hash = (hash << 5) + hash + input.charCodeAt(i);\n      // 'hash' is of number type which means 53 bit integer (http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type)\n      // 'hash & hash' will keep it 32 bit integer - just to make it clearer what the result is.\n      hash = hash & hash;\n    }\n    return Math.abs(hash);\n  };\n  // We're using 32 bit math, hence max value is (2^31 - 1)\n  HashCodeScoreGenerator.INT_MAX_VALUE = 2147483647;\n  return HashCodeScoreGenerator;\n}();\nexport { HashCodeScoreGenerator };","map":{"version":3,"names":["_DYN_CONCAT","_DYN_LENGTH","MIN_INPUT_LENGTH","HashCodeScoreGenerator","prototype","getHashCodeScore","key","score","getHashCode","INT_MAX_VALUE","input","hash","i","charCodeAt","Math","abs"],"sources":["/home/veeresh133/app/react-az/node_modules/@microsoft/applicationinsights-channel-js/dist-es5/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { _DYN_CONCAT, _DYN_LENGTH } from \"../../__DynamicConstants\";\r\n// (Magic number) DJB algorithm can't work on shorter strings (results in poor distribution\r\nvar MIN_INPUT_LENGTH = 8;\r\nvar HashCodeScoreGenerator = /** @class */ (function () {\r\n    function HashCodeScoreGenerator() {\r\n    }\r\n    HashCodeScoreGenerator.prototype.getHashCodeScore = function (key) {\r\n        var score = this.getHashCode(key) / HashCodeScoreGenerator.INT_MAX_VALUE;\r\n        return score * 100;\r\n    };\r\n    HashCodeScoreGenerator.prototype.getHashCode = function (input) {\r\n        if (input === \"\") {\r\n            return 0;\r\n        }\r\n        while (input[_DYN_LENGTH /* @min:%2elength */] < MIN_INPUT_LENGTH) {\r\n            input = input[_DYN_CONCAT /* @min:%2econcat */](input);\r\n        }\r\n        // 5381 is a magic number: http://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function\r\n        var hash = 5381;\r\n        for (var i = 0; i < input[_DYN_LENGTH /* @min:%2elength */]; ++i) {\r\n            hash = ((hash << 5) + hash) + input.charCodeAt(i);\r\n            // 'hash' is of number type which means 53 bit integer (http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type)\r\n            // 'hash & hash' will keep it 32 bit integer - just to make it clearer what the result is.\r\n            hash = hash & hash;\r\n        }\r\n        return Math.abs(hash);\r\n    };\r\n    // We're using 32 bit math, hence max value is (2^31 - 1)\r\n    HashCodeScoreGenerator.INT_MAX_VALUE = 2147483647;\r\n    return HashCodeScoreGenerator;\r\n}());\r\nexport { HashCodeScoreGenerator };\r\n//# sourceMappingURL=HashCodeScoreGenerator.js.map"],"mappings":";;;;;AAEA,SAAAA,WAAA,EAAAC,WAAA;AACA;AACA,IAAAC,gBAAA;AACA,IAAAC,sBAAA;EACA,SAAAA,uBAAA,GACA;EACAA,sBAAA,CAAAC,SAAA,CAAAC,gBAAA,aAAAC,GAAA;IACA,IAAAC,KAAA,QAAAC,WAAA,CAAAF,GAAA,IAAAH,sBAAA,CAAAM,aAAA;IACA,OAAAF,KAAA;EACA;EACAJ,sBAAA,CAAAC,SAAA,CAAAI,WAAA,aAAAE,KAAA;IACA,IAAAA,KAAA;MACA;IACA;IACA,OAAAA,KAAA,CAAAT,WAAA,yBAAAC,gBAAA;MACAQ,KAAA,GAAAA,KAAA,CAAAV,WAAA,uBAAAU,KAAA;IACA;IACA;IACA,IAAAC,IAAA;IACA,SAAAC,CAAA,MAAAA,CAAA,GAAAF,KAAA,CAAAT,WAAA,0BAAAW,CAAA;MACAD,IAAA,IAAAA,IAAA,SAAAA,IAAA,GAAAD,KAAA,CAAAG,UAAA,CAAAD,CAAA;MACA;MACA;MACAD,IAAA,GAAAA,IAAA,GAAAA,IAAA;IACA;IACA,OAAAG,IAAA,CAAAC,GAAA,CAAAJ,IAAA;EACA;EACA;EACAR,sBAAA,CAAAM,aAAA;EACA,OAAAN,sBAAA;AACA;AACA,SAAAA,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}