{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Click Analytics, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n/**\r\n* @copyright Microsoft 2020\r\n*/\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { _throwInternal, getDocument, hasDocument, isNullOrUndefined, objExtend } from \"@microsoft/applicationinsights-core-js\";\nimport { strSubstring } from \"@nevware21/ts-utils\";\nimport { _DYN_ATTRIBUTES, _DYN_CAPTURE_ALL_META_DAT2, _DYN_CONTENT, _DYN_CONTENT_NAME, _DYN_CUSTOM_DATA_PREFIX, _DYN_DATA_TAGS, _DYN_GET_ATTRIBUTE, _DYN_GET_ELEMENT_CONTENT, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_META_DATA_PREFIX, _DYN_NAME, _DYN_PARENT_DATA_TAG, _DYN_PARENT_ELEMENT, _DYN_PARENT_NODE, _DYN_TAG_NAME, _DYN_USE_DEFAULT_CONTENT_1, _DYN__CONFIG, _DYN__TRACE_LOGGER } from \"../__DynamicConstants\";\nimport { isValueAssigned, removeInvalidElements, walkUpDomChainWithElementValidation } from \"../common/Utils\";\nvar MAX_CONTENTNAME_LENGTH = 200;\nvar DomContentHandler = /** @class */function () {\n  /**\r\n   * @param config - ClickAnalytics configuration object\r\n   * @param traceLogger - Trace logger to log to console.\r\n   */\n  function DomContentHandler(_config, _traceLogger) {\n    this._config = _config;\n    this._traceLogger = _traceLogger;\n    dynamicProto(DomContentHandler, this, function (_self) {\n      _self.getMetadata = function () {\n        var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\n        var metaTags = {};\n        if (hasDocument()) {\n          metaTags = isValueAssigned(dataTags.metaDataPrefix) ? _getMetaDataFromDOM(dataTags[_DYN_CAPTURE_ALL_META_DAT2 /* @min:%2ecaptureAllMetaDataContent */], dataTags[_DYN_META_DATA_PREFIX /* @min:%2emetaDataPrefix */], false) : _getMetaDataFromDOM(dataTags[_DYN_CAPTURE_ALL_META_DAT2 /* @min:%2ecaptureAllMetaDataContent */], \"\", false);\n        }\n        return metaTags;\n      };\n      _self[_DYN_GET_ELEMENT_CONTENT /* @min:%2egetElementContent */] = function (element) {\n        if (!element) {\n          return {};\n        }\n        var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\n        var elementContent = {};\n        var biBlobValue;\n        var parentDataTagPrefix;\n        var dataTagPrefix = dataTags[_DYN_CUSTOM_DATA_PREFIX /* @min:%2ecustomDataPrefix */];\n        var aiBlobAttributeTag = dataTagPrefix + dataTags.aiBlobAttributeTag;\n        if (isValueAssigned(dataTags[_DYN_PARENT_DATA_TAG /* @min:%2eparentDataTag */])) {\n          parentDataTagPrefix = dataTagPrefix + dataTags[_DYN_PARENT_DATA_TAG /* @min:%2eparentDataTag */];\n        }\n        if (!_isTracked(element, dataTagPrefix, aiBlobAttributeTag)) {\n          // capture blob from element or hierarchy\n          biBlobValue = element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](aiBlobAttributeTag);\n          if (biBlobValue) {\n            try {\n              elementContent = JSON.parse(biBlobValue);\n            } catch (e) {\n              _throwInternal(_self[_DYN__TRACE_LOGGER /* @min:%2e_traceLogger */], 1 /* eLoggingSeverity.CRITICAL */, 101 /* _eInternalMessageId.CannotParseAiBlobValue */, \"Can not parse \" + biBlobValue);\n            }\n          } else {\n            // traverse up the DOM to find the closest parent with data-* tag defined\n            //contentElement = walkUpDomChainWithElementValidation(element, _self._isTracked, dataTagPrefix);\n            elementContent = objExtend(elementContent, _populateElementContent(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag));\n          }\n        } else {\n          elementContent = objExtend(elementContent, _populateElementContentwithDataTag(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag));\n        }\n        removeInvalidElements(elementContent);\n        if (parentDataTagPrefix) {\n          elementContent = objExtend(elementContent, _getParentDetails(element, elementContent, dataTagPrefix, aiBlobAttributeTag));\n        }\n        return elementContent;\n      };\n      /**\r\n       * Capture current level Element content\r\n       */\n      function _captureElementContentWithDataTag(contentElement, elementContent, dataTagPrefix) {\n        for (var i = 0, attrib; i < contentElement.attributes[_DYN_LENGTH /* @min:%2elength */]; i++) {\n          attrib = contentElement[_DYN_ATTRIBUTES /* @min:%2eattributes */][i];\n          if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTagPrefix) !== 0) {\n            continue;\n          }\n          var attribName = attrib[_DYN_NAME /* @min:%2ename */].replace(dataTagPrefix, \"\");\n          elementContent[attribName] = attrib.value;\n        }\n      }\n      /**\r\n       * Walk Up the DOM to capture Element content\r\n       */\n      function _walkUpDomChainCaptureData(el, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\n        var element = el;\n        var parentDataTagFound = false;\n        var elementLevelFlag = false; // Use this flag to capture 'id' only at the incoming html element level.\n        while (!isNullOrUndefined(element) && !isNullOrUndefined(element[_DYN_ATTRIBUTES /* @min:%2eattributes */])) {\n          var attributes = element[_DYN_ATTRIBUTES /* @min:%2eattributes */];\n          for (var i = 0; i < attributes[_DYN_LENGTH /* @min:%2elength */]; i++) {\n            var attrib = attributes[i];\n            if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTagPrefix) !== 0) {\n              continue;\n            }\n            if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](parentDataTagPrefix) === 0) {\n              parentDataTagFound = true;\n            }\n            // Todo handle blob data\n            if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](aiBlobAttributeTag) === 0) {\n              continue;\n            }\n            var attribName = attrib[_DYN_NAME /* @min:%2ename */].replace(dataTagPrefix, \"\");\n            if (elementLevelFlag && attribName === \"id\") {\n              continue; // skip capturing id if not at the first level.\n            }\n            if (!isValueAssigned(elementContent[attribName])) {\n              elementContent[attribName] = attrib.value;\n            }\n          }\n          // break after current level;\n          if (parentDataTagFound) {\n            break;\n          }\n          elementLevelFlag = true; // after the initial level set this flag to true.\n          element = element[_DYN_PARENT_NODE /* @min:%2eparentNode */];\n        }\n      }\n      /**\r\n       * Capture Element content along with Data Tag attributes and values\r\n       */\n      function _populateElementContent(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\n        var elementContent = {};\n        if (!element) {\n          return elementContent;\n        }\n        var htmlContent = _getHtmlIdAndContentName(element);\n        elementContent = {\n          id: htmlContent.id || \"\",\n          contentName: htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] || \"\"\n        };\n        if (isValueAssigned(parentDataTagPrefix)) {\n          _walkUpDomChainCaptureData(element, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag);\n        }\n        // Validate to ensure the minimum required field 'id' or 'contentName' is present.\n        // The content schema defines id, aN and sN as required fields.  However,\n        // requiring these fields would result in majority of adopter's content from being collected.\n        // Just throw a warning and continue collection.\n        if (!elementContent.id && !elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */]) {\n          _throwInternal(_traceLogger, 2 /* eLoggingSeverity.WARNING */, 102 /* _eInternalMessageId.InvalidContentBlob */, \"Invalid content blob.  Missing required attributes (id, contentName. \" + \" Content information will still be collected!\");\n        }\n        return elementContent;\n      }\n      /**\r\n       * Capture Element content along with Data Tag attributes and values\r\n       */\n      function _populateElementContentwithDataTag(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\n        var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\n        var elementContent = {};\n        if (!element) {\n          return elementContent;\n        }\n        var htmlContent = _getHtmlIdAndContentName(element);\n        if (isValueAssigned(parentDataTagPrefix)) {\n          _walkUpDomChainCaptureData(element, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag);\n        } else {\n          _captureElementContentWithDataTag(element, elementContent, dataTagPrefix);\n        }\n        if (dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) {\n          if (!isValueAssigned(elementContent.id)) {\n            elementContent.id = htmlContent.id || \"\";\n          }\n          elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] = htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] || \"\";\n        }\n        // Validate to ensure the minimum required field 'id' or 'contentName' is present.\n        // The content schema defines id, aN and sN as required fields.  However,\n        // requiring these fields would result in majority of adopter's content from being collected.\n        // Just throw a warning and continue collection.\n        if (!elementContent.id && !elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */]) {\n          _throwInternal(_traceLogger, 2 /* eLoggingSeverity.WARNING */, 102 /* _eInternalMessageId.InvalidContentBlob */, \"Invalid content blob.  Missing required attributes (id, contentName. \" + \" Content information will still be collected!\");\n        }\n        return elementContent;\n      }\n      /**\r\n       * Retrieve a specified metadata tag value from the DOM.\r\n       * @param captureAllMetaDataContent - Flag to capture all metadata content\r\n       * @param prefix - Prefix to search the metatags with.\r\n       * @param removePrefix - Specifies if the prefix must be excluded from key names in the returned collection.\r\n       * @returns Metadata collection/property bag\r\n       */\n      function _getMetaDataFromDOM(captureAllMetaDataContent, prefix, removePrefix) {\n        var metaElements;\n        var metaData = {};\n        if (hasDocument()) {\n          metaElements = getDocument().querySelectorAll(\"meta\");\n          for (var i = 0; i < metaElements[_DYN_LENGTH /* @min:%2elength */]; i++) {\n            var meta = metaElements[i];\n            if (meta[_DYN_NAME /* @min:%2ename */]) {\n              if (captureAllMetaDataContent || meta.name[_DYN_INDEX_OF /* @min:%2eindexOf */](prefix) === 0) {\n                var name_1 = removePrefix ? meta[_DYN_NAME /* @min:%2ename */].replace(prefix, \"\") : meta[_DYN_NAME /* @min:%2ename */];\n                metaData[name_1] = meta[_DYN_CONTENT /* @min:%2econtent */];\n              }\n            }\n          }\n        }\n        return metaData;\n      }\n      /**\r\n       * Gets the default content name.\r\n       * @param element - An html element\r\n       * @param useDefaultContentNameOrId - Flag indicating if an element is market PII.\r\n       * @returns Content name\r\n       */\n      function _getDefaultContentName(element, useDefaultContentName) {\n        if (useDefaultContentName === false || !element[_DYN_TAG_NAME /* @min:%2etagName */]) {\n          return \"\";\n        }\n        var doc = getDocument() || {};\n        var contentName;\n        switch (element[_DYN_TAG_NAME /* @min:%2etagName */]) {\n          case \"A\":\n            contentName = doc.all ? element.innerText || element.innerHTML : element.text || element.innerHTML;\n            break;\n          case \"IMG\":\n          case \"AREA\":\n            contentName = element.alt;\n            break;\n          default:\n            contentName = element.value || element[_DYN_NAME /* @min:%2ename */] || element.alt || element.innerText || element.id;\n        }\n        return strSubstring(contentName, 0, MAX_CONTENTNAME_LENGTH);\n      }\n      /**\r\n       * Check if the user wants to track the element, which means if the element has any tags with data-* or customDataPrefix\r\n       * @param element - An html element\r\n       * @returns true if any data-* exist, otherwise return false\r\n       */\n      function _isTracked(element, dataTag, aiBlobAttributeTag) {\n        var attrs = element[_DYN_ATTRIBUTES /* @min:%2eattributes */];\n        var dataTagFound = false;\n        for (var i = 0; i < attrs[_DYN_LENGTH /* @min:%2elength */]; i++) {\n          var attributeName = attrs[i][_DYN_NAME /* @min:%2ename */];\n          if (attributeName === aiBlobAttributeTag) {\n            // ignore if the attribute name is equal to aiBlobAttributeTag\n            return false;\n          } else if (attributeName[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTag) === 0) {\n            dataTagFound = true;\n          }\n        }\n        return dataTagFound;\n      }\n      function _getHtmlIdAndContentName(element) {\n        var _a;\n        var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\n        var callback = (_self[_DYN__CONFIG /* @min:%2e_config */] || {}).callback;\n        var htmlContent = {};\n        if (!element) {\n          return htmlContent;\n        }\n        if (dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) {\n          var customizedContentName = callback[_DYN_CONTENT_NAME /* @min:%2econtentName */] ? callback[_DYN_CONTENT_NAME /* @min:%2econtentName */](element, dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) : \"\";\n          var defaultContentName = _getDefaultContentName(element, dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]);\n          htmlContent = (_a = {\n            id: element.id\n          }, _a[_DYN_CONTENT_NAME /* @min:contentName */] = customizedContentName || defaultContentName || element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](\"alt\"), _a);\n        }\n        return htmlContent;\n      }\n      /**\r\n      * Computes the parentId of a given element.\r\n      * @param element - An html element\r\n      * @returns An object containing the closest parentId , can be empty if nothing was found\r\n      */\n      function _getParentDetails(element, elementContent, dataTagPrefix, aiBlobAttributeTag) {\n        var parentId = elementContent[\"parentid\"];\n        var parentName = elementContent[\"parentname\"];\n        var parentInfo = {};\n        if (parentId || parentName || !element) {\n          return parentInfo;\n        }\n        return _populateParentInfo(element, dataTagPrefix, aiBlobAttributeTag);\n      }\n      /**\r\n      * Check if parent info already set up, if so take and put into content, if not walk up the DOM to find correct info\r\n      * @param element - An html element that the user wants to track\r\n      * @returns An object containing the parent info, can be empty if nothing was found\r\n      */\n      function _populateParentInfo(element, dataTagPrefix, aiBlobAttributeTag) {\n        var parentInfo = {};\n        var parentId;\n        // if the user does not set up parent info, walk to the DOM, find the closest parent element (with tags) and populate the info\n        var closestParentElement = walkUpDomChainWithElementValidation(element[_DYN_PARENT_ELEMENT /* @min:%2eparentElement */], _isTracked, dataTagPrefix);\n        if (closestParentElement) {\n          var dataAttr = closestParentElement[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](aiBlobAttributeTag) || element[aiBlobAttributeTag];\n          if (dataAttr) {\n            try {\n              var telemetryObject = JSON.parse(dataAttr);\n            } catch (e) {\n              _throwInternal(_traceLogger, 1 /* eLoggingSeverity.CRITICAL */, 101 /* _eInternalMessageId.CannotParseAiBlobValue */, \"Can not parse \" + dataAttr);\n            }\n            if (telemetryObject) {\n              parentId = telemetryObject.id;\n            }\n          } else {\n            parentId = closestParentElement[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](dataTagPrefix + \"id\");\n          }\n        }\n        if (parentId) {\n          parentInfo[\"parentid\"] = parentId;\n        } else {\n          var htmlContent = _getHtmlIdAndContentName(element[_DYN_PARENT_ELEMENT /* @min:%2eparentElement */]);\n          parentInfo[\"parentid\"] = htmlContent.id;\n          parentInfo[\"parentname\"] = htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */];\n        }\n        return parentInfo;\n      }\n    });\n  }\n  // Removed Stub for DomContentHandler.prototype.getMetadata.\n  // Removed Stub for DomContentHandler.prototype.getElementContent.\n  // This is a workaround for an IE bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  DomContentHandler.__ieDyn = 1;\n  return DomContentHandler;\n}();\nexport { DomContentHandler };","map":{"version":3,"names":["dynamicProto","_throwInternal","getDocument","hasDocument","isNullOrUndefined","objExtend","strSubstring","_DYN_ATTRIBUTES","_DYN_CAPTURE_ALL_META_DAT2","_DYN_CONTENT","_DYN_CONTENT_NAME","_DYN_CUSTOM_DATA_PREFIX","_DYN_DATA_TAGS","_DYN_GET_ATTRIBUTE","_DYN_GET_ELEMENT_CONTENT","_DYN_INDEX_OF","_DYN_LENGTH","_DYN_META_DATA_PREFIX","_DYN_NAME","_DYN_PARENT_DATA_TAG","_DYN_PARENT_ELEMENT","_DYN_PARENT_NODE","_DYN_TAG_NAME","_DYN_USE_DEFAULT_CONTENT_1","_DYN__CONFIG","_DYN__TRACE_LOGGER","isValueAssigned","removeInvalidElements","walkUpDomChainWithElementValidation","MAX_CONTENTNAME_LENGTH","DomContentHandler","_config","_traceLogger","_self","getMetadata","dataTags","metaTags","metaDataPrefix","_getMetaDataFromDOM","element","elementContent","biBlobValue","parentDataTagPrefix","dataTagPrefix","aiBlobAttributeTag","_isTracked","JSON","parse","e","_populateElementContent","_populateElementContentwithDataTag","_getParentDetails","_captureElementContentWithDataTag","contentElement","i","attrib","attributes","name","attribName","replace","value","_walkUpDomChainCaptureData","el","parentDataTagFound","elementLevelFlag","htmlContent","_getHtmlIdAndContentName","id","contentName","captureAllMetaDataContent","prefix","removePrefix","metaElements","metaData","querySelectorAll","meta","name_1","_getDefaultContentName","useDefaultContentName","doc","all","innerText","innerHTML","text","alt","dataTag","attrs","dataTagFound","attributeName","_a","callback","customizedContentName","defaultContentName","parentId","parentName","parentInfo","_populateParentInfo","closestParentElement","dataAttr","telemetryObject"],"sources":["/home/veeresh133/app/json-holder-api/react-az/node_modules/@microsoft/applicationinsights-clickanalytics-js/dist-es5/handlers/DomContentHandler.js"],"sourcesContent":["/**\r\n* @copyright Microsoft 2020\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { _throwInternal, getDocument, hasDocument, isNullOrUndefined, objExtend } from \"@microsoft/applicationinsights-core-js\";\r\nimport { strSubstring } from \"@nevware21/ts-utils\";\r\nimport { _DYN_ATTRIBUTES, _DYN_CAPTURE_ALL_META_DAT2, _DYN_CONTENT, _DYN_CONTENT_NAME, _DYN_CUSTOM_DATA_PREFIX, _DYN_DATA_TAGS, _DYN_GET_ATTRIBUTE, _DYN_GET_ELEMENT_CONTENT, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_META_DATA_PREFIX, _DYN_NAME, _DYN_PARENT_DATA_TAG, _DYN_PARENT_ELEMENT, _DYN_PARENT_NODE, _DYN_TAG_NAME, _DYN_USE_DEFAULT_CONTENT_1, _DYN__CONFIG, _DYN__TRACE_LOGGER } from \"../__DynamicConstants\";\r\nimport { isValueAssigned, removeInvalidElements, walkUpDomChainWithElementValidation } from \"../common/Utils\";\r\nvar MAX_CONTENTNAME_LENGTH = 200;\r\nvar DomContentHandler = /** @class */ (function () {\r\n    /**\r\n     * @param config - ClickAnalytics configuration object\r\n     * @param traceLogger - Trace logger to log to console.\r\n     */\r\n    function DomContentHandler(_config, _traceLogger) {\r\n        this._config = _config;\r\n        this._traceLogger = _traceLogger;\r\n        dynamicProto(DomContentHandler, this, function (_self) {\r\n            _self.getMetadata = function () {\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var metaTags = {};\r\n                if (hasDocument()) {\r\n                    metaTags = isValueAssigned(dataTags.metaDataPrefix) ? _getMetaDataFromDOM(dataTags[_DYN_CAPTURE_ALL_META_DAT2 /* @min:%2ecaptureAllMetaDataContent */], dataTags[_DYN_META_DATA_PREFIX /* @min:%2emetaDataPrefix */], false) :\r\n                        _getMetaDataFromDOM(dataTags[_DYN_CAPTURE_ALL_META_DAT2 /* @min:%2ecaptureAllMetaDataContent */], \"\", false);\r\n                }\r\n                return metaTags;\r\n            };\r\n            _self[_DYN_GET_ELEMENT_CONTENT /* @min:%2egetElementContent */] = function (element) {\r\n                if (!element) {\r\n                    return {};\r\n                }\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var elementContent = {};\r\n                var biBlobValue;\r\n                var parentDataTagPrefix;\r\n                var dataTagPrefix = dataTags[_DYN_CUSTOM_DATA_PREFIX /* @min:%2ecustomDataPrefix */];\r\n                var aiBlobAttributeTag = dataTagPrefix + dataTags.aiBlobAttributeTag;\r\n                if (isValueAssigned(dataTags[_DYN_PARENT_DATA_TAG /* @min:%2eparentDataTag */])) {\r\n                    parentDataTagPrefix = dataTagPrefix + dataTags[_DYN_PARENT_DATA_TAG /* @min:%2eparentDataTag */];\r\n                }\r\n                if (!_isTracked(element, dataTagPrefix, aiBlobAttributeTag)) {\r\n                    // capture blob from element or hierarchy\r\n                    biBlobValue = element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](aiBlobAttributeTag);\r\n                    if (biBlobValue) {\r\n                        try {\r\n                            elementContent = JSON.parse(biBlobValue);\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternal(_self[_DYN__TRACE_LOGGER /* @min:%2e_traceLogger */], 1 /* eLoggingSeverity.CRITICAL */, 101 /* _eInternalMessageId.CannotParseAiBlobValue */, \"Can not parse \" + biBlobValue);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // traverse up the DOM to find the closest parent with data-* tag defined\r\n                        //contentElement = walkUpDomChainWithElementValidation(element, _self._isTracked, dataTagPrefix);\r\n                        elementContent = objExtend(elementContent, _populateElementContent(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag));\r\n                    }\r\n                }\r\n                else {\r\n                    elementContent = objExtend(elementContent, _populateElementContentwithDataTag(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag));\r\n                }\r\n                removeInvalidElements(elementContent);\r\n                if (parentDataTagPrefix) {\r\n                    elementContent = objExtend(elementContent, _getParentDetails(element, elementContent, dataTagPrefix, aiBlobAttributeTag));\r\n                }\r\n                return elementContent;\r\n            };\r\n            /**\r\n             * Capture current level Element content\r\n             */\r\n            function _captureElementContentWithDataTag(contentElement, elementContent, dataTagPrefix) {\r\n                for (var i = 0, attrib; i < contentElement.attributes[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                    attrib = contentElement[_DYN_ATTRIBUTES /* @min:%2eattributes */][i];\r\n                    if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTagPrefix) !== 0) {\r\n                        continue;\r\n                    }\r\n                    var attribName = attrib[_DYN_NAME /* @min:%2ename */].replace(dataTagPrefix, \"\");\r\n                    elementContent[attribName] = attrib.value;\r\n                }\r\n            }\r\n            /**\r\n             * Walk Up the DOM to capture Element content\r\n             */\r\n            function _walkUpDomChainCaptureData(el, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\r\n                var element = el;\r\n                var parentDataTagFound = false;\r\n                var elementLevelFlag = false; // Use this flag to capture 'id' only at the incoming html element level.\r\n                while (!isNullOrUndefined(element) && !isNullOrUndefined(element[_DYN_ATTRIBUTES /* @min:%2eattributes */])) {\r\n                    var attributes = element[_DYN_ATTRIBUTES /* @min:%2eattributes */];\r\n                    for (var i = 0; i < attributes[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                        var attrib = attributes[i];\r\n                        if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTagPrefix) !== 0) {\r\n                            continue;\r\n                        }\r\n                        if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](parentDataTagPrefix) === 0) {\r\n                            parentDataTagFound = true;\r\n                        }\r\n                        // Todo handle blob data\r\n                        if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](aiBlobAttributeTag) === 0) {\r\n                            continue;\r\n                        }\r\n                        var attribName = attrib[_DYN_NAME /* @min:%2ename */].replace(dataTagPrefix, \"\");\r\n                        if (elementLevelFlag && attribName === \"id\") {\r\n                            continue; // skip capturing id if not at the first level.\r\n                        }\r\n                        if (!isValueAssigned(elementContent[attribName])) {\r\n                            elementContent[attribName] = attrib.value;\r\n                        }\r\n                    }\r\n                    // break after current level;\r\n                    if (parentDataTagFound) {\r\n                        break;\r\n                    }\r\n                    elementLevelFlag = true; // after the initial level set this flag to true.\r\n                    element = element[_DYN_PARENT_NODE /* @min:%2eparentNode */];\r\n                }\r\n            }\r\n            /**\r\n             * Capture Element content along with Data Tag attributes and values\r\n             */\r\n            function _populateElementContent(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\r\n                var elementContent = {};\r\n                if (!element) {\r\n                    return elementContent;\r\n                }\r\n                var htmlContent = _getHtmlIdAndContentName(element);\r\n                elementContent = {\r\n                    id: htmlContent.id || \"\",\r\n                    contentName: htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] || \"\"\r\n                };\r\n                if (isValueAssigned(parentDataTagPrefix)) {\r\n                    _walkUpDomChainCaptureData(element, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag);\r\n                }\r\n                // Validate to ensure the minimum required field 'id' or 'contentName' is present.\r\n                // The content schema defines id, aN and sN as required fields.  However,\r\n                // requiring these fields would result in majority of adopter's content from being collected.\r\n                // Just throw a warning and continue collection.\r\n                if (!elementContent.id && !elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */]) {\r\n                    _throwInternal(_traceLogger, 2 /* eLoggingSeverity.WARNING */, 102 /* _eInternalMessageId.InvalidContentBlob */, \"Invalid content blob.  Missing required attributes (id, contentName. \" +\r\n                        \" Content information will still be collected!\");\r\n                }\r\n                return elementContent;\r\n            }\r\n            /**\r\n             * Capture Element content along with Data Tag attributes and values\r\n             */\r\n            function _populateElementContentwithDataTag(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var elementContent = {};\r\n                if (!element) {\r\n                    return elementContent;\r\n                }\r\n                var htmlContent = _getHtmlIdAndContentName(element);\r\n                if (isValueAssigned(parentDataTagPrefix)) {\r\n                    _walkUpDomChainCaptureData(element, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag);\r\n                }\r\n                else {\r\n                    _captureElementContentWithDataTag(element, elementContent, dataTagPrefix);\r\n                }\r\n                if (dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) {\r\n                    if (!isValueAssigned(elementContent.id)) {\r\n                        elementContent.id = htmlContent.id || \"\";\r\n                    }\r\n                    elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] = htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] || \"\";\r\n                }\r\n                // Validate to ensure the minimum required field 'id' or 'contentName' is present.\r\n                // The content schema defines id, aN and sN as required fields.  However,\r\n                // requiring these fields would result in majority of adopter's content from being collected.\r\n                // Just throw a warning and continue collection.\r\n                if (!elementContent.id && !elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */]) {\r\n                    _throwInternal(_traceLogger, 2 /* eLoggingSeverity.WARNING */, 102 /* _eInternalMessageId.InvalidContentBlob */, \"Invalid content blob.  Missing required attributes (id, contentName. \" +\r\n                        \" Content information will still be collected!\");\r\n                }\r\n                return elementContent;\r\n            }\r\n            /**\r\n             * Retrieve a specified metadata tag value from the DOM.\r\n             * @param captureAllMetaDataContent - Flag to capture all metadata content\r\n             * @param prefix - Prefix to search the metatags with.\r\n             * @param removePrefix - Specifies if the prefix must be excluded from key names in the returned collection.\r\n             * @returns Metadata collection/property bag\r\n             */\r\n            function _getMetaDataFromDOM(captureAllMetaDataContent, prefix, removePrefix) {\r\n                var metaElements;\r\n                var metaData = {};\r\n                if (hasDocument()) {\r\n                    metaElements = getDocument().querySelectorAll(\"meta\");\r\n                    for (var i = 0; i < metaElements[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                        var meta = metaElements[i];\r\n                        if (meta[_DYN_NAME /* @min:%2ename */]) {\r\n                            if (captureAllMetaDataContent || meta.name[_DYN_INDEX_OF /* @min:%2eindexOf */](prefix) === 0) {\r\n                                var name_1 = removePrefix ? meta[_DYN_NAME /* @min:%2ename */].replace(prefix, \"\") : meta[_DYN_NAME /* @min:%2ename */];\r\n                                metaData[name_1] = meta[_DYN_CONTENT /* @min:%2econtent */];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return metaData;\r\n            }\r\n            /**\r\n             * Gets the default content name.\r\n             * @param element - An html element\r\n             * @param useDefaultContentNameOrId - Flag indicating if an element is market PII.\r\n             * @returns Content name\r\n             */\r\n            function _getDefaultContentName(element, useDefaultContentName) {\r\n                if (useDefaultContentName === false || !element[_DYN_TAG_NAME /* @min:%2etagName */]) {\r\n                    return \"\";\r\n                }\r\n                var doc = getDocument() || {};\r\n                var contentName;\r\n                switch (element[_DYN_TAG_NAME /* @min:%2etagName */]) {\r\n                    case \"A\":\r\n                        contentName = doc.all ? element.innerText || element.innerHTML : element.text || element.innerHTML;\r\n                        break;\r\n                    case \"IMG\":\r\n                    case \"AREA\":\r\n                        contentName = element.alt;\r\n                        break;\r\n                    default:\r\n                        contentName = element.value || element[_DYN_NAME /* @min:%2ename */] || element.alt || element.innerText || element.id;\r\n                }\r\n                return strSubstring(contentName, 0, MAX_CONTENTNAME_LENGTH);\r\n            }\r\n            /**\r\n             * Check if the user wants to track the element, which means if the element has any tags with data-* or customDataPrefix\r\n             * @param element - An html element\r\n             * @returns true if any data-* exist, otherwise return false\r\n             */\r\n            function _isTracked(element, dataTag, aiBlobAttributeTag) {\r\n                var attrs = element[_DYN_ATTRIBUTES /* @min:%2eattributes */];\r\n                var dataTagFound = false;\r\n                for (var i = 0; i < attrs[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                    var attributeName = attrs[i][_DYN_NAME /* @min:%2ename */];\r\n                    if (attributeName === aiBlobAttributeTag) {\r\n                        // ignore if the attribute name is equal to aiBlobAttributeTag\r\n                        return false;\r\n                    }\r\n                    else if (attributeName[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTag) === 0) {\r\n                        dataTagFound = true;\r\n                    }\r\n                }\r\n                return dataTagFound;\r\n            }\r\n            function _getHtmlIdAndContentName(element) {\r\n                var _a;\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var callback = (_self[_DYN__CONFIG /* @min:%2e_config */] || {}).callback;\r\n                var htmlContent = {};\r\n                if (!element) {\r\n                    return htmlContent;\r\n                }\r\n                if (dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) {\r\n                    var customizedContentName = callback[_DYN_CONTENT_NAME /* @min:%2econtentName */] ? callback[_DYN_CONTENT_NAME /* @min:%2econtentName */](element, dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) : \"\";\r\n                    var defaultContentName = _getDefaultContentName(element, dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]);\r\n                    htmlContent = (_a = {\r\n                            id: element.id\r\n                        },\r\n                        _a[_DYN_CONTENT_NAME /* @min:contentName */] = customizedContentName || defaultContentName || element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](\"alt\"),\r\n                        _a);\r\n                }\r\n                return htmlContent;\r\n            }\r\n            /**\r\n            * Computes the parentId of a given element.\r\n            * @param element - An html element\r\n            * @returns An object containing the closest parentId , can be empty if nothing was found\r\n            */\r\n            function _getParentDetails(element, elementContent, dataTagPrefix, aiBlobAttributeTag) {\r\n                var parentId = elementContent[\"parentid\"];\r\n                var parentName = elementContent[\"parentname\"];\r\n                var parentInfo = {};\r\n                if (parentId || parentName || !element) {\r\n                    return parentInfo;\r\n                }\r\n                return _populateParentInfo(element, dataTagPrefix, aiBlobAttributeTag);\r\n            }\r\n            /**\r\n            * Check if parent info already set up, if so take and put into content, if not walk up the DOM to find correct info\r\n            * @param element - An html element that the user wants to track\r\n            * @returns An object containing the parent info, can be empty if nothing was found\r\n            */\r\n            function _populateParentInfo(element, dataTagPrefix, aiBlobAttributeTag) {\r\n                var parentInfo = {};\r\n                var parentId;\r\n                // if the user does not set up parent info, walk to the DOM, find the closest parent element (with tags) and populate the info\r\n                var closestParentElement = walkUpDomChainWithElementValidation(element[_DYN_PARENT_ELEMENT /* @min:%2eparentElement */], _isTracked, dataTagPrefix);\r\n                if (closestParentElement) {\r\n                    var dataAttr = closestParentElement[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](aiBlobAttributeTag) || element[aiBlobAttributeTag];\r\n                    if (dataAttr) {\r\n                        try {\r\n                            var telemetryObject = JSON.parse(dataAttr);\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternal(_traceLogger, 1 /* eLoggingSeverity.CRITICAL */, 101 /* _eInternalMessageId.CannotParseAiBlobValue */, \"Can not parse \" + dataAttr);\r\n                        }\r\n                        if (telemetryObject) {\r\n                            parentId = telemetryObject.id;\r\n                        }\r\n                    }\r\n                    else {\r\n                        parentId = closestParentElement[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](dataTagPrefix + \"id\");\r\n                    }\r\n                }\r\n                if (parentId) {\r\n                    parentInfo[\"parentid\"] = parentId;\r\n                }\r\n                else {\r\n                    var htmlContent = _getHtmlIdAndContentName(element[_DYN_PARENT_ELEMENT /* @min:%2eparentElement */]);\r\n                    parentInfo[\"parentid\"] = htmlContent.id;\r\n                    parentInfo[\"parentname\"] = htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */];\r\n                }\r\n                return parentInfo;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Collect metatags from DOM.\r\n     * Collect data from meta tags.\r\n     * @returns {object} - Metatags collection/property bag\r\n     */\r\n    DomContentHandler.prototype.getMetadata = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Collect data-* attributes for the given element.\r\n     * All attributes with data-* prefix or user provided customDataPrefix are collected.'data-*' prefix is removed from the key name.\r\n     * @param element - The element from which attributes need to be collected.\r\n     * @returns String representation of the Json array of element attributes\r\n     */\r\n    DomContentHandler.prototype.getElementContent = function (element) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return DomContentHandler;\r\n}());\r\nexport { DomContentHandler };\r\n//# sourceMappingURL=DomContentHandler.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}