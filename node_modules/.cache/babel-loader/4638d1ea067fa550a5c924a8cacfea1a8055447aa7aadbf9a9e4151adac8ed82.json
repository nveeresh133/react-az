{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Common, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { strNotSpecified } from \"../Constants\";\nimport { _DYN_COUNT, _DYN_MEASUREMENTS, _DYN_NAME, _DYN_PROPERTIES } from \"../__DynamicConstants\";\nimport { DataPoint } from \"./Common/DataPoint\";\nimport { dataSanitizeMeasurements, dataSanitizeProperties, dataSanitizeString } from \"./Common/DataSanitizer\";\nvar Metric = /** @class */function () {\n  /**\r\n   * Constructs a new instance of the MetricTelemetry object\r\n   */\n  function Metric(logger, name, value, count, min, max, stdDev, properties, measurements) {\n    this.aiDataContract = {\n      ver: 1 /* FieldType.Required */,\n      metrics: 1 /* FieldType.Required */,\n      properties: 0 /* FieldType.Default */\n    };\n    var _self = this;\n    _self.ver = 2;\n    var dataPoint = new DataPoint();\n    dataPoint[_DYN_COUNT /* @min:%2ecount */] = count > 0 ? count : undefined;\n    dataPoint.max = isNaN(max) || max === null ? undefined : max;\n    dataPoint.min = isNaN(min) || min === null ? undefined : min;\n    dataPoint[_DYN_NAME /* @min:%2ename */] = dataSanitizeString(logger, name) || strNotSpecified;\n    dataPoint.value = value;\n    dataPoint.stdDev = isNaN(stdDev) || stdDev === null ? undefined : stdDev;\n    _self.metrics = [dataPoint];\n    _self[_DYN_PROPERTIES /* @min:%2eproperties */] = dataSanitizeProperties(logger, properties);\n    _self[_DYN_MEASUREMENTS /* @min:%2emeasurements */] = dataSanitizeMeasurements(logger, measurements);\n  }\n  Metric.envelopeType = \"Microsoft.ApplicationInsights.{0}.Metric\";\n  Metric.dataType = \"MetricData\";\n  return Metric;\n}();\nexport { Metric };","map":{"version":3,"names":["strNotSpecified","_DYN_COUNT","_DYN_MEASUREMENTS","_DYN_NAME","_DYN_PROPERTIES","DataPoint","dataSanitizeMeasurements","dataSanitizeProperties","dataSanitizeString","Metric","logger","name","value","count","min","max","stdDev","properties","measurements","aiDataContract","ver","metrics","_self","dataPoint","undefined","isNaN","envelopeType","dataType"],"sources":["/home/veeresh133/app/json-holder-api/react-az/node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/Metric.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { strNotSpecified } from \"../Constants\";\r\nimport { _DYN_COUNT, _DYN_MEASUREMENTS, _DYN_NAME, _DYN_PROPERTIES } from \"../__DynamicConstants\";\r\nimport { DataPoint } from \"./Common/DataPoint\";\r\nimport { dataSanitizeMeasurements, dataSanitizeProperties, dataSanitizeString } from \"./Common/DataSanitizer\";\r\nvar Metric = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the MetricTelemetry object\r\n     */\r\n    function Metric(logger, name, value, count, min, max, stdDev, properties, measurements) {\r\n        this.aiDataContract = {\r\n            ver: 1 /* FieldType.Required */,\r\n            metrics: 1 /* FieldType.Required */,\r\n            properties: 0 /* FieldType.Default */\r\n        };\r\n        var _self = this;\r\n        _self.ver = 2;\r\n        var dataPoint = new DataPoint();\r\n        dataPoint[_DYN_COUNT /* @min:%2ecount */] = count > 0 ? count : undefined;\r\n        dataPoint.max = isNaN(max) || max === null ? undefined : max;\r\n        dataPoint.min = isNaN(min) || min === null ? undefined : min;\r\n        dataPoint[_DYN_NAME /* @min:%2ename */] = dataSanitizeString(logger, name) || strNotSpecified;\r\n        dataPoint.value = value;\r\n        dataPoint.stdDev = isNaN(stdDev) || stdDev === null ? undefined : stdDev;\r\n        _self.metrics = [dataPoint];\r\n        _self[_DYN_PROPERTIES /* @min:%2eproperties */] = dataSanitizeProperties(logger, properties);\r\n        _self[_DYN_MEASUREMENTS /* @min:%2emeasurements */] = dataSanitizeMeasurements(logger, measurements);\r\n    }\r\n    Metric.envelopeType = \"Microsoft.ApplicationInsights.{0}.Metric\";\r\n    Metric.dataType = \"MetricData\";\r\n    return Metric;\r\n}());\r\nexport { Metric };\r\n//# sourceMappingURL=Metric.js.map"],"mappings":";;;;;AAEA,SAAAA,eAAA;AACA,SAAAC,UAAA,EAAAC,iBAAA,EAAAC,SAAA,EAAAC,eAAA;AACA,SAAAC,SAAA;AACA,SAAAC,wBAAA,EAAAC,sBAAA,EAAAC,kBAAA;AACA,IAAAC,MAAA;EACA;AACA;AACA;EACA,SAAAA,OAAAC,MAAA,EAAAC,IAAA,EAAAC,KAAA,EAAAC,KAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,MAAA,EAAAC,UAAA,EAAAC,YAAA;IACA,KAAAC,cAAA;MACAC,GAAA;MACAC,OAAA;MACAJ,UAAA;IACA;IACA,IAAAK,KAAA;IACAA,KAAA,CAAAF,GAAA;IACA,IAAAG,SAAA,OAAAlB,SAAA;IACAkB,SAAA,CAAAtB,UAAA,wBAAAY,KAAA,OAAAA,KAAA,GAAAW,SAAA;IACAD,SAAA,CAAAR,GAAA,GAAAU,KAAA,CAAAV,GAAA,KAAAA,GAAA,YAAAS,SAAA,GAAAT,GAAA;IACAQ,SAAA,CAAAT,GAAA,GAAAW,KAAA,CAAAX,GAAA,KAAAA,GAAA,YAAAU,SAAA,GAAAV,GAAA;IACAS,SAAA,CAAApB,SAAA,uBAAAK,kBAAA,CAAAE,MAAA,EAAAC,IAAA,KAAAX,eAAA;IACAuB,SAAA,CAAAX,KAAA,GAAAA,KAAA;IACAW,SAAA,CAAAP,MAAA,GAAAS,KAAA,CAAAT,MAAA,KAAAA,MAAA,YAAAQ,SAAA,GAAAR,MAAA;IACAM,KAAA,CAAAD,OAAA,IAAAE,SAAA;IACAD,KAAA,CAAAlB,eAAA,6BAAAG,sBAAA,CAAAG,MAAA,EAAAO,UAAA;IACAK,KAAA,CAAApB,iBAAA,+BAAAI,wBAAA,CAAAI,MAAA,EAAAQ,YAAA;EACA;EACAT,MAAA,CAAAiB,YAAA;EACAjB,MAAA,CAAAkB,QAAA;EACA,OAAAlB,MAAA;AACA;AACA,SAAAA,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}