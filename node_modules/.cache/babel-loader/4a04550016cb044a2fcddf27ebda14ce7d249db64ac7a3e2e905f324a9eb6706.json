{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Properties Plugin, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n/**\r\n* TelemetryContext.ts\r\n* @copyright Microsoft 2018\r\n*/\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { CtxTagKeys, Extensions, PageView, dataSanitizeString } from \"@microsoft/applicationinsights-common\";\nimport { _InternalLogMessage, getSetValue, hasWindow, isNullOrUndefined, isString, objKeys, setValue } from \"@microsoft/applicationinsights-core-js\";\nimport { Application } from \"./Context/Application\";\nimport { Device } from \"./Context/Device\";\nimport { Internal } from \"./Context/Internal\";\nimport { Location } from \"./Context/Location\";\nimport { Session, _SessionManager } from \"./Context/Session\";\nimport { TelemetryTrace } from \"./Context/TelemetryTrace\";\nimport { User } from \"./Context/User\";\nimport { _DYN_ACCOUNT_ID, _DYN_APPLY_APPLICATION_CO1, _DYN_APPLY_DEVICE_CONTEXT, _DYN_APPLY_INTERNAL_CONTE5, _DYN_APPLY_LOCATION_CONTE4, _DYN_APPLY_OPERATING_SYST3, _DYN_APPLY_OPERATION_CONT2, _DYN_APPLY_SESSION_CONTEX0, _DYN_APPLY_USER_CONTEXT, _DYN_AUTHENTICATED_ID, _DYN_AUTOMATIC_SESSION, _DYN_GET_SESSION_ID, _DYN_LENGTH, _DYN_SESSION_MANAGER, _DYN_TELEMETRY_TRACE } from \"./__DynamicConstants\";\nvar strExt = \"ext\";\nvar strTags = \"tags\";\nfunction _removeEmpty(target, name) {\n  if (target && target[name] && objKeys(target[name])[_DYN_LENGTH /* @min:%2elength */] === 0) {\n    delete target[name];\n  }\n}\nfunction _nullResult() {\n  return null;\n}\nvar TelemetryContext = /** @class */function () {\n  function TelemetryContext(core, defaultConfig, previousTraceCtx, unloadHookContainer) {\n    var _this = this;\n    var logger = core.logger;\n    dynamicProto(TelemetryContext, this, function (_self) {\n      _self.appId = _nullResult;\n      _self[_DYN_GET_SESSION_ID /* @min:%2egetSessionId */] = _nullResult;\n      _self.application = new Application();\n      _self.internal = new Internal(defaultConfig, unloadHookContainer);\n      if (hasWindow()) {\n        _self[_DYN_SESSION_MANAGER /* @min:%2esessionManager */] = new _SessionManager(defaultConfig, core, unloadHookContainer);\n        _self.device = new Device();\n        _self.location = new Location();\n        _self.user = new User(defaultConfig, core, unloadHookContainer);\n        var traceId = void 0;\n        var parentId = void 0;\n        var name_1;\n        if (previousTraceCtx) {\n          traceId = previousTraceCtx.getTraceId();\n          parentId = previousTraceCtx.getSpanId();\n          name_1 = previousTraceCtx.getName();\n        }\n        _self[_DYN_TELEMETRY_TRACE /* @min:%2etelemetryTrace */] = new TelemetryTrace(traceId, parentId, name_1, logger);\n        _self.session = new Session();\n      }\n      _self[_DYN_GET_SESSION_ID /* @min:%2egetSessionId */] = function () {\n        var session = _self.session;\n        var sesId = null;\n        // If customer set session info, apply their context; otherwise apply context automatically generated\n        if (session && isString(session.id)) {\n          sesId = session.id;\n        } else {\n          // Gets the automatic session if it exists or an empty object\n          var autoSession = (_self[_DYN_SESSION_MANAGER /* @min:%2esessionManager */] || {})[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */];\n          sesId = autoSession && isString(autoSession.id) ? autoSession.id : null;\n        }\n        return sesId;\n      };\n      _self[_DYN_APPLY_SESSION_CONTEX0 /* @min:%2eapplySessionContext */] = function (evt, itemCtx) {\n        setValue(getSetValue(evt.ext, Extensions.AppExt), \"sesId\", _self[_DYN_GET_SESSION_ID /* @min:%2egetSessionId */](), isString);\n      };\n      _self[_DYN_APPLY_OPERATING_SYST3 /* @min:%2eapplyOperatingSystemContxt */] = function (evt, itemCtx) {\n        setValue(evt.ext, Extensions.OSExt, _self.os);\n      };\n      _self[_DYN_APPLY_APPLICATION_CO1 /* @min:%2eapplyApplicationContext */] = function (evt, itemCtx) {\n        var application = _self.application;\n        if (application) {\n          // evt.ext.app\n          var tags = getSetValue(evt, strTags);\n          setValue(tags, CtxTagKeys.applicationVersion, application.ver, isString);\n          setValue(tags, CtxTagKeys.applicationBuild, application.build, isString);\n        }\n      };\n      _self[_DYN_APPLY_DEVICE_CONTEXT /* @min:%2eapplyDeviceContext */] = function (evt, itemCtx) {\n        var device = _self.device;\n        if (device) {\n          // evt.ext.device\n          var extDevice = getSetValue(getSetValue(evt, strExt), Extensions.DeviceExt);\n          setValue(extDevice, \"localId\", device.id, isString);\n          setValue(extDevice, \"ip\", device.ip, isString);\n          setValue(extDevice, \"model\", device.model, isString);\n          setValue(extDevice, \"deviceClass\", device.deviceClass, isString);\n        }\n      };\n      _self[_DYN_APPLY_INTERNAL_CONTE5 /* @min:%2eapplyInternalContext */] = function (evt, itemCtx) {\n        var internal = _self.internal;\n        if (internal) {\n          var tags = getSetValue(evt, strTags);\n          setValue(tags, CtxTagKeys.internalAgentVersion, internal.agentVersion, isString); // not mapped in CS 4.0\n          setValue(tags, CtxTagKeys.internalSdkVersion, dataSanitizeString(logger, internal.sdkVersion, 64), isString);\n          if (evt.baseType === _InternalLogMessage.dataType || evt.baseType === PageView.dataType) {\n            setValue(tags, CtxTagKeys.internalSnippet, internal.snippetVer, isString);\n            setValue(tags, CtxTagKeys.internalSdkSrc, internal.sdkSrc, isString);\n          }\n        }\n      };\n      _self[_DYN_APPLY_LOCATION_CONTE4 /* @min:%2eapplyLocationContext */] = function (evt, itemCtx) {\n        var location = _this.location;\n        if (location) {\n          setValue(getSetValue(evt, strTags, []), CtxTagKeys.locationIp, location.ip, isString);\n        }\n      };\n      _self[_DYN_APPLY_OPERATION_CONT2 /* @min:%2eapplyOperationContext */] = function (evt, itemCtx) {\n        var telemetryTrace = _self[_DYN_TELEMETRY_TRACE /* @min:%2etelemetryTrace */];\n        if (telemetryTrace) {\n          var extTrace = getSetValue(getSetValue(evt, strExt), Extensions.TraceExt, {\n            traceID: undefined,\n            parentID: undefined\n          });\n          setValue(extTrace, \"traceID\", telemetryTrace.traceID, isString, isNullOrUndefined);\n          setValue(extTrace, \"name\", telemetryTrace.name, isString, isNullOrUndefined);\n          setValue(extTrace, \"parentID\", telemetryTrace.parentID, isString, isNullOrUndefined);\n        }\n      };\n      _self.applyWebContext = function (evt, itemCtx) {\n        var web = _this.web;\n        if (web) {\n          setValue(getSetValue(evt, strExt), Extensions.WebExt, web);\n        }\n      };\n      _self[_DYN_APPLY_USER_CONTEXT /* @min:%2eapplyUserContext */] = function (evt, itemCtx) {\n        var user = _self.user;\n        if (user) {\n          var tags = getSetValue(evt, strTags, []);\n          // stays in tags\n          setValue(tags, CtxTagKeys.userAccountId, user[_DYN_ACCOUNT_ID /* @min:%2eaccountId */], isString);\n          // CS 4.0\n          var extUser = getSetValue(getSetValue(evt, strExt), Extensions.UserExt);\n          setValue(extUser, \"id\", user.id, isString);\n          setValue(extUser, \"authId\", user[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */], isString);\n        }\n      };\n      _self.cleanUp = function (evt, itemCtx) {\n        var ext = evt.ext;\n        if (ext) {\n          _removeEmpty(ext, Extensions.DeviceExt);\n          _removeEmpty(ext, Extensions.UserExt);\n          _removeEmpty(ext, Extensions.WebExt);\n          _removeEmpty(ext, Extensions.OSExt);\n          _removeEmpty(ext, Extensions.AppExt);\n          _removeEmpty(ext, Extensions.TraceExt);\n        }\n      };\n    });\n  }\n  // Removed Stub for TelemetryContext.prototype.applySessionContext.\n  // Removed Stub for TelemetryContext.prototype.applyOperatingSystemContxt.\n  // Removed Stub for TelemetryContext.prototype.applyApplicationContext.\n  // Removed Stub for TelemetryContext.prototype.applyDeviceContext.\n  // Removed Stub for TelemetryContext.prototype.applyInternalContext.\n  // Removed Stub for TelemetryContext.prototype.applyLocationContext.\n  // Removed Stub for TelemetryContext.prototype.applyOperationContext.\n  // Removed Stub for TelemetryContext.prototype.applyWebContext.\n  // Removed Stub for TelemetryContext.prototype.applyUserContext.\n  // Removed Stub for TelemetryContext.prototype.cleanUp.\n  // This is a workaround for an IE bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  TelemetryContext.__ieDyn = 1;\n  return TelemetryContext;\n}();\nexport { TelemetryContext };","map":{"version":3,"names":["dynamicProto","CtxTagKeys","Extensions","PageView","dataSanitizeString","_InternalLogMessage","getSetValue","hasWindow","isNullOrUndefined","isString","objKeys","setValue","Application","Device","Internal","Location","Session","_SessionManager","TelemetryTrace","User","_DYN_ACCOUNT_ID","_DYN_APPLY_APPLICATION_CO1","_DYN_APPLY_DEVICE_CONTEXT","_DYN_APPLY_INTERNAL_CONTE5","_DYN_APPLY_LOCATION_CONTE4","_DYN_APPLY_OPERATING_SYST3","_DYN_APPLY_OPERATION_CONT2","_DYN_APPLY_SESSION_CONTEX0","_DYN_APPLY_USER_CONTEXT","_DYN_AUTHENTICATED_ID","_DYN_AUTOMATIC_SESSION","_DYN_GET_SESSION_ID","_DYN_LENGTH","_DYN_SESSION_MANAGER","_DYN_TELEMETRY_TRACE","strExt","strTags","_removeEmpty","target","name","_nullResult","TelemetryContext","core","defaultConfig","previousTraceCtx","unloadHookContainer","_this","logger","_self","appId","application","internal","device","location","user","traceId","parentId","name_1","getTraceId","getSpanId","getName","session","sesId","id","autoSession","evt","itemCtx","ext","AppExt","OSExt","os","tags","applicationVersion","ver","applicationBuild","build","extDevice","DeviceExt","ip","model","deviceClass","internalAgentVersion","agentVersion","internalSdkVersion","sdkVersion","baseType","dataType","internalSnippet","snippetVer","internalSdkSrc","sdkSrc","locationIp","telemetryTrace","extTrace","TraceExt","traceID","undefined","parentID","applyWebContext","web","WebExt","userAccountId","extUser","UserExt","cleanUp"],"sources":["/home/veeresh133/app/test-error-react/react-az/node_modules/@microsoft/applicationinsights-properties-js/dist-es5/TelemetryContext.js"],"sourcesContent":["/**\r\n* TelemetryContext.ts\r\n* @copyright Microsoft 2018\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { CtxTagKeys, Extensions, PageView, dataSanitizeString } from \"@microsoft/applicationinsights-common\";\r\nimport { _InternalLogMessage, getSetValue, hasWindow, isNullOrUndefined, isString, objKeys, setValue } from \"@microsoft/applicationinsights-core-js\";\r\nimport { Application } from \"./Context/Application\";\r\nimport { Device } from \"./Context/Device\";\r\nimport { Internal } from \"./Context/Internal\";\r\nimport { Location } from \"./Context/Location\";\r\nimport { Session, _SessionManager } from \"./Context/Session\";\r\nimport { TelemetryTrace } from \"./Context/TelemetryTrace\";\r\nimport { User } from \"./Context/User\";\r\nimport { _DYN_ACCOUNT_ID, _DYN_APPLY_APPLICATION_CO1, _DYN_APPLY_DEVICE_CONTEXT, _DYN_APPLY_INTERNAL_CONTE5, _DYN_APPLY_LOCATION_CONTE4, _DYN_APPLY_OPERATING_SYST3, _DYN_APPLY_OPERATION_CONT2, _DYN_APPLY_SESSION_CONTEX0, _DYN_APPLY_USER_CONTEXT, _DYN_AUTHENTICATED_ID, _DYN_AUTOMATIC_SESSION, _DYN_GET_SESSION_ID, _DYN_LENGTH, _DYN_SESSION_MANAGER, _DYN_TELEMETRY_TRACE } from \"./__DynamicConstants\";\r\nvar strExt = \"ext\";\r\nvar strTags = \"tags\";\r\nfunction _removeEmpty(target, name) {\r\n    if (target && target[name] && objKeys(target[name])[_DYN_LENGTH /* @min:%2elength */] === 0) {\r\n        delete target[name];\r\n    }\r\n}\r\nfunction _nullResult() {\r\n    return null;\r\n}\r\nvar TelemetryContext = /** @class */ (function () {\r\n    function TelemetryContext(core, defaultConfig, previousTraceCtx, unloadHookContainer) {\r\n        var _this = this;\r\n        var logger = core.logger;\r\n        dynamicProto(TelemetryContext, this, function (_self) {\r\n            _self.appId = _nullResult;\r\n            _self[_DYN_GET_SESSION_ID /* @min:%2egetSessionId */] = _nullResult;\r\n            _self.application = new Application();\r\n            _self.internal = new Internal(defaultConfig, unloadHookContainer);\r\n            if (hasWindow()) {\r\n                _self[_DYN_SESSION_MANAGER /* @min:%2esessionManager */] = new _SessionManager(defaultConfig, core, unloadHookContainer);\r\n                _self.device = new Device();\r\n                _self.location = new Location();\r\n                _self.user = new User(defaultConfig, core, unloadHookContainer);\r\n                var traceId = void 0;\r\n                var parentId = void 0;\r\n                var name_1;\r\n                if (previousTraceCtx) {\r\n                    traceId = previousTraceCtx.getTraceId();\r\n                    parentId = previousTraceCtx.getSpanId();\r\n                    name_1 = previousTraceCtx.getName();\r\n                }\r\n                _self[_DYN_TELEMETRY_TRACE /* @min:%2etelemetryTrace */] = new TelemetryTrace(traceId, parentId, name_1, logger);\r\n                _self.session = new Session();\r\n            }\r\n            _self[_DYN_GET_SESSION_ID /* @min:%2egetSessionId */] = function () {\r\n                var session = _self.session;\r\n                var sesId = null;\r\n                // If customer set session info, apply their context; otherwise apply context automatically generated\r\n                if (session && isString(session.id)) {\r\n                    sesId = session.id;\r\n                }\r\n                else {\r\n                    // Gets the automatic session if it exists or an empty object\r\n                    var autoSession = (_self[_DYN_SESSION_MANAGER /* @min:%2esessionManager */] || {})[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */];\r\n                    sesId = autoSession && isString(autoSession.id) ? autoSession.id : null;\r\n                }\r\n                return sesId;\r\n            };\r\n            _self[_DYN_APPLY_SESSION_CONTEX0 /* @min:%2eapplySessionContext */] = function (evt, itemCtx) {\r\n                setValue(getSetValue(evt.ext, Extensions.AppExt), \"sesId\", _self[_DYN_GET_SESSION_ID /* @min:%2egetSessionId */](), isString);\r\n            };\r\n            _self[_DYN_APPLY_OPERATING_SYST3 /* @min:%2eapplyOperatingSystemContxt */] = function (evt, itemCtx) {\r\n                setValue(evt.ext, Extensions.OSExt, _self.os);\r\n            };\r\n            _self[_DYN_APPLY_APPLICATION_CO1 /* @min:%2eapplyApplicationContext */] = function (evt, itemCtx) {\r\n                var application = _self.application;\r\n                if (application) {\r\n                    // evt.ext.app\r\n                    var tags = getSetValue(evt, strTags);\r\n                    setValue(tags, CtxTagKeys.applicationVersion, application.ver, isString);\r\n                    setValue(tags, CtxTagKeys.applicationBuild, application.build, isString);\r\n                }\r\n            };\r\n            _self[_DYN_APPLY_DEVICE_CONTEXT /* @min:%2eapplyDeviceContext */] = function (evt, itemCtx) {\r\n                var device = _self.device;\r\n                if (device) {\r\n                    // evt.ext.device\r\n                    var extDevice = getSetValue(getSetValue(evt, strExt), Extensions.DeviceExt);\r\n                    setValue(extDevice, \"localId\", device.id, isString);\r\n                    setValue(extDevice, \"ip\", device.ip, isString);\r\n                    setValue(extDevice, \"model\", device.model, isString);\r\n                    setValue(extDevice, \"deviceClass\", device.deviceClass, isString);\r\n                }\r\n            };\r\n            _self[_DYN_APPLY_INTERNAL_CONTE5 /* @min:%2eapplyInternalContext */] = function (evt, itemCtx) {\r\n                var internal = _self.internal;\r\n                if (internal) {\r\n                    var tags = getSetValue(evt, strTags);\r\n                    setValue(tags, CtxTagKeys.internalAgentVersion, internal.agentVersion, isString); // not mapped in CS 4.0\r\n                    setValue(tags, CtxTagKeys.internalSdkVersion, dataSanitizeString(logger, internal.sdkVersion, 64), isString);\r\n                    if (evt.baseType === _InternalLogMessage.dataType || evt.baseType === PageView.dataType) {\r\n                        setValue(tags, CtxTagKeys.internalSnippet, internal.snippetVer, isString);\r\n                        setValue(tags, CtxTagKeys.internalSdkSrc, internal.sdkSrc, isString);\r\n                    }\r\n                }\r\n            };\r\n            _self[_DYN_APPLY_LOCATION_CONTE4 /* @min:%2eapplyLocationContext */] = function (evt, itemCtx) {\r\n                var location = _this.location;\r\n                if (location) {\r\n                    setValue(getSetValue(evt, strTags, []), CtxTagKeys.locationIp, location.ip, isString);\r\n                }\r\n            };\r\n            _self[_DYN_APPLY_OPERATION_CONT2 /* @min:%2eapplyOperationContext */] = function (evt, itemCtx) {\r\n                var telemetryTrace = _self[_DYN_TELEMETRY_TRACE /* @min:%2etelemetryTrace */];\r\n                if (telemetryTrace) {\r\n                    var extTrace = getSetValue(getSetValue(evt, strExt), Extensions.TraceExt, { traceID: undefined, parentID: undefined });\r\n                    setValue(extTrace, \"traceID\", telemetryTrace.traceID, isString, isNullOrUndefined);\r\n                    setValue(extTrace, \"name\", telemetryTrace.name, isString, isNullOrUndefined);\r\n                    setValue(extTrace, \"parentID\", telemetryTrace.parentID, isString, isNullOrUndefined);\r\n                }\r\n            };\r\n            _self.applyWebContext = function (evt, itemCtx) {\r\n                var web = _this.web;\r\n                if (web) {\r\n                    setValue(getSetValue(evt, strExt), Extensions.WebExt, web);\r\n                }\r\n            };\r\n            _self[_DYN_APPLY_USER_CONTEXT /* @min:%2eapplyUserContext */] = function (evt, itemCtx) {\r\n                var user = _self.user;\r\n                if (user) {\r\n                    var tags = getSetValue(evt, strTags, []);\r\n                    // stays in tags\r\n                    setValue(tags, CtxTagKeys.userAccountId, user[_DYN_ACCOUNT_ID /* @min:%2eaccountId */], isString);\r\n                    // CS 4.0\r\n                    var extUser = getSetValue(getSetValue(evt, strExt), Extensions.UserExt);\r\n                    setValue(extUser, \"id\", user.id, isString);\r\n                    setValue(extUser, \"authId\", user[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */], isString);\r\n                }\r\n            };\r\n            _self.cleanUp = function (evt, itemCtx) {\r\n                var ext = evt.ext;\r\n                if (ext) {\r\n                    _removeEmpty(ext, Extensions.DeviceExt);\r\n                    _removeEmpty(ext, Extensions.UserExt);\r\n                    _removeEmpty(ext, Extensions.WebExt);\r\n                    _removeEmpty(ext, Extensions.OSExt);\r\n                    _removeEmpty(ext, Extensions.AppExt);\r\n                    _removeEmpty(ext, Extensions.TraceExt);\r\n                }\r\n            };\r\n        });\r\n    }\r\n    TelemetryContext.prototype.applySessionContext = function (evt, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyOperatingSystemContxt = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyApplicationContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyDeviceContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyInternalContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyLocationContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyOperationContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyWebContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyUserContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.cleanUp = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return TelemetryContext;\r\n}());\r\nexport { TelemetryContext };\r\n//# sourceMappingURL=TelemetryContext.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}