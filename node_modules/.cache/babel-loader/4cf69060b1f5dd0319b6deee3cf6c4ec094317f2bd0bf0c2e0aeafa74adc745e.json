{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { getGlobal, objAssign } from \"@nevware21/ts-utils\";\nimport { __assignFn, __createBindingFn, __extendsFn } from \"./TsLibShims\";\nexport function __exposeGlobalTsLib() {\n  var globalObj = getGlobal() || {};\n  // tslint:disable: only-arrow-functions\n  (function (root, assignFn, extendsFn, createBindingFn) {\n    // Assign the globally scoped versions of the functions -- used when consuming individual ts files\n    // If check is to support NativeScript where these are marked as readonly\n    if (!root.__assign) {\n      root.__assign = objAssign || assignFn;\n    }\n    if (!root.__extends) {\n      root.__extends = extendsFn;\n    }\n    if (!root.__createBinding) {\n      root.__createBinding = createBindingFn;\n    }\n  })(globalObj, __assignFn, __extendsFn, __createBindingFn);\n  // Assign local variables that will be used for embedded scenarios, if check is to support NativeScript where these are marked as readonly\n  if (!__assign) {\n    __assign = globalObj.__assign;\n  }\n  if (!__extends) {\n    __extends = globalObj.__extends;\n  }\n  if (!__createBinding) {\n    __createBinding = globalObj.__createBinding;\n  }\n}","map":{"version":3,"names":["getGlobal","objAssign","__assignFn","__createBindingFn","__extendsFn","__exposeGlobalTsLib","globalObj","root","assignFn","extendsFn","createBindingFn","__assign","__extends","__createBinding"],"sources":["/home/veeresh133/app/json-holder-api/react-az/node_modules/@microsoft/applicationinsights-shims/src/TsLibGlobals.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { getGlobal, objAssign } from \"@nevware21/ts-utils\";\r\nimport { __assignFn, __createBindingFn, __extendsFn } from \"./TsLibShims\";\r\n\r\n// To address compile time errors declaring these here\r\ndeclare var __extends:(d: any, b: any) => any;\r\ndeclare var __assign:(t: any) => any;\r\ndeclare var __createBinding:(o: any, m: any, k: any, k2?: any) => void;\r\n\r\nexport function __exposeGlobalTsLib() {\r\n    let globalObj:any = getGlobal() || {};\r\n\r\n    // tslint:disable: only-arrow-functions\r\n    (function (root: any, assignFn, extendsFn, createBindingFn) {\r\n        // Assign the globally scoped versions of the functions -- used when consuming individual ts files\r\n        // If check is to support NativeScript where these are marked as readonly\r\n        if (!root.__assign) {\r\n            root.__assign = objAssign || assignFn;\r\n        }\r\n        if (!root.__extends) {\r\n            root.__extends = extendsFn;\r\n        }\r\n        if (!root.__createBinding) {\r\n            root.__createBinding = createBindingFn;\r\n        }\r\n    })(globalObj, __assignFn, __extendsFn, __createBindingFn);\r\n    \r\n    // Assign local variables that will be used for embedded scenarios, if check is to support NativeScript where these are marked as readonly\r\n    if (!__assign) {\r\n        __assign = globalObj.__assign;\r\n    }\r\n    if (!__extends) {\r\n        __extends = globalObj.__extends;\r\n    }\r\n    if (!__createBinding) {\r\n        __createBinding = globalObj.__createBinding;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,SAASA,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAC1D,SAASC,UAAU,EAAEC,iBAAiB,EAAEC,WAAW,QAAQ,cAAc;AAOzE,OAAM,SAAUC,mBAAmBA,CAAA;EAC/B,IAAIC,SAAS,GAAON,SAAS,EAAE,IAAI,EAAE;EAErC;EACA,CAAC,UAAUO,IAAS,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,eAAe;IACtD;IACA;IACA,IAAI,CAACH,IAAI,CAACI,QAAQ,EAAE;MAChBJ,IAAI,CAACI,QAAQ,GAAGV,SAAS,IAAIO,QAAQ;;IAEzC,IAAI,CAACD,IAAI,CAACK,SAAS,EAAE;MACjBL,IAAI,CAACK,SAAS,GAAGH,SAAS;;IAE9B,IAAI,CAACF,IAAI,CAACM,eAAe,EAAE;MACvBN,IAAI,CAACM,eAAe,GAAGH,eAAe;;EAE9C,CAAC,EAAEJ,SAAS,EAAEJ,UAAU,EAAEE,WAAW,EAAED,iBAAiB,CAAC;EAEzD;EACA,IAAI,CAACQ,QAAQ,EAAE;IACXA,QAAQ,GAAGL,SAAS,CAACK,QAAQ;;EAEjC,IAAI,CAACC,SAAS,EAAE;IACZA,SAAS,GAAGN,SAAS,CAACM,SAAS;;EAEnC,IAAI,CAACC,eAAe,EAAE;IAClBA,eAAe,GAAGP,SAAS,CAACO,eAAe;;AAEnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}