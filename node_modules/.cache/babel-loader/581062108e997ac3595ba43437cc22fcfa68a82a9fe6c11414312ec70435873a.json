{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { asString, isBoolean, isFunction, isNullOrUndefined, isString } from \"@nevware21/ts-utils\";\nimport { STR_EMPTY } from \"../JavaScriptSDK/InternalConstants\";\nimport { _DYN_BLK_VAL, _DYN_TO_LOWER_CASE } from \"../__DynamicConstants\";\n/**\r\n * @internal\r\n * @ignore\r\n * @param str\r\n * @param defaultValue\r\n * @returns\r\n */\nfunction _stringToBoolOrDefault(theValue, defaultValue, theConfig) {\n  if (!theValue && isNullOrUndefined(theValue)) {\n    return defaultValue;\n  }\n  if (isBoolean(theValue)) {\n    return theValue;\n  }\n  return asString(theValue)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() === \"true\";\n}\n/**\r\n * Helper which returns an IConfigDefaultCheck instance with the field defined as an object\r\n * that should be merged\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\nexport function cfgDfMerge(defaultValue) {\n  return {\n    mrg: true,\n    v: defaultValue\n  };\n}\n/**\r\n * Helper which returns an IConfigDefaultCheck instance with the provided field set function\r\n * @param setter - The IConfigCheckFn function to validate the user provided value\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\nexport function cfgDfSet(setter, defaultValue) {\n  return {\n    set: setter,\n    v: defaultValue\n  };\n}\n/**\r\n * Helper which returns an IConfigDefaultCheck instance with the provided field validator\r\n * @param validator - The IConfigCheckFn function to validate the user provided value\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @param fallBackName - The fallback configuration name if the current value is not available\r\n * @returns a new IConfigDefaultCheck structure\r\n */\nexport function cfgDfValidate(validator, defaultValue, fallBackName) {\n  return {\n    fb: fallBackName,\n    isVal: validator,\n    v: defaultValue\n  };\n}\n/**\r\n * Helper which returns an IConfigDefaultCheck instance that will validate and convert the user\r\n * provided value to a boolean from a string or boolean value\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @param fallBackName - The fallback configuration name if the current value is not available\r\n * @returns a new IConfigDefaultCheck structure\r\n */\nexport function cfgDfBoolean(defaultValue, fallBackName) {\n  return {\n    fb: fallBackName,\n    set: _stringToBoolOrDefault,\n    v: !!defaultValue\n  };\n}\n/**\r\n * Helper which returns an IConfigDefaultCheck instance that will validate that the user\r\n * provided value is a function.\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\nexport function cfgDfFunc(defaultValue) {\n  return {\n    isVal: isFunction,\n    v: defaultValue || null\n  };\n}\n/**\r\n * Helper which returns an IConfigDefaultCheck instance that will validate that the user\r\n * provided value is a function.\r\n * @param defaultValue - The default string value to apply it not provided or it's not valid, defaults to an empty string\r\n * @returns a new IConfigDefaultCheck structure\r\n */\nexport function cfgDfString(defaultValue) {\n  return {\n    isVal: isString,\n    v: asString(defaultValue || STR_EMPTY)\n  };\n}\n/**\r\n * Helper which returns an IConfigDefaultCheck instance identifying that value associated with this property\r\n * should not have it's properties converted into a dynamic config properties.\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\nexport function cfgDfBlockPropValue(defaultValue) {\n  var _a;\n  return _a = {}, _a[_DYN_BLK_VAL /* @min:blkVal */] = true, _a.v = defaultValue, _a;\n}","map":{"version":3,"names":["asString","isBoolean","isFunction","isNullOrUndefined","isString","STR_EMPTY","_DYN_BLK_VAL","_DYN_TO_LOWER_CASE","_stringToBoolOrDefault","theValue","defaultValue","theConfig","cfgDfMerge","mrg","v","cfgDfSet","setter","set","cfgDfValidate","validator","fallBackName","fb","isVal","cfgDfBoolean","cfgDfFunc","cfgDfString","cfgDfBlockPropValue","_a"],"sources":["/home/veeresh133/app/api-call/react-az/node_modules/@microsoft/applicationinsights-core-js/dist-es5/Config/ConfigDefaultHelpers.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { asString, isBoolean, isFunction, isNullOrUndefined, isString } from \"@nevware21/ts-utils\";\r\nimport { STR_EMPTY } from \"../JavaScriptSDK/InternalConstants\";\r\nimport { _DYN_BLK_VAL, _DYN_TO_LOWER_CASE } from \"../__DynamicConstants\";\r\n/**\r\n * @internal\r\n * @ignore\r\n * @param str\r\n * @param defaultValue\r\n * @returns\r\n */\r\nfunction _stringToBoolOrDefault(theValue, defaultValue, theConfig) {\r\n    if (!theValue && isNullOrUndefined(theValue)) {\r\n        return defaultValue;\r\n    }\r\n    if (isBoolean(theValue)) {\r\n        return theValue;\r\n    }\r\n    return asString(theValue)[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() === \"true\";\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance with the field defined as an object\r\n * that should be merged\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfMerge(defaultValue) {\r\n    return {\r\n        mrg: true,\r\n        v: defaultValue\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance with the provided field set function\r\n * @param setter - The IConfigCheckFn function to validate the user provided value\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfSet(setter, defaultValue) {\r\n    return {\r\n        set: setter,\r\n        v: defaultValue\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance with the provided field validator\r\n * @param validator - The IConfigCheckFn function to validate the user provided value\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @param fallBackName - The fallback configuration name if the current value is not available\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfValidate(validator, defaultValue, fallBackName) {\r\n    return {\r\n        fb: fallBackName,\r\n        isVal: validator,\r\n        v: defaultValue\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance that will validate and convert the user\r\n * provided value to a boolean from a string or boolean value\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @param fallBackName - The fallback configuration name if the current value is not available\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfBoolean(defaultValue, fallBackName) {\r\n    return {\r\n        fb: fallBackName,\r\n        set: _stringToBoolOrDefault,\r\n        v: !!defaultValue\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance that will validate that the user\r\n * provided value is a function.\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfFunc(defaultValue) {\r\n    return {\r\n        isVal: isFunction,\r\n        v: defaultValue || null\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance that will validate that the user\r\n * provided value is a function.\r\n * @param defaultValue - The default string value to apply it not provided or it's not valid, defaults to an empty string\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfString(defaultValue) {\r\n    return {\r\n        isVal: isString,\r\n        v: asString(defaultValue || STR_EMPTY)\r\n    };\r\n}\r\n/**\r\n * Helper which returns an IConfigDefaultCheck instance identifying that value associated with this property\r\n * should not have it's properties converted into a dynamic config properties.\r\n * @param defaultValue - The default value to apply it not provided or it's not valid\r\n * @returns a new IConfigDefaultCheck structure\r\n */\r\nexport function cfgDfBlockPropValue(defaultValue) {\r\n    var _a;\r\n    return _a = {},\r\n        _a[_DYN_BLK_VAL /* @min:blkVal */] = true,\r\n        _a.v = defaultValue,\r\n        _a;\r\n}\r\n//# sourceMappingURL=ConfigDefaultHelpers.js.map"],"mappings":";;;;;AAEA,SAAAA,QAAA,EAAAC,SAAA,EAAAC,UAAA,EAAAC,iBAAA,EAAAC,QAAA;AACA,SAAAC,SAAA;AACA,SAAAC,YAAA,EAAAC,kBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAC,uBAAAC,QAAA,EAAAC,YAAA,EAAAC,SAAA;EACA,KAAAF,QAAA,IAAAN,iBAAA,CAAAM,QAAA;IACA,OAAAC,YAAA;EACA;EACA,IAAAT,SAAA,CAAAQ,QAAA;IACA,OAAAA,QAAA;EACA;EACA,OAAAT,QAAA,CAAAS,QAAA,EAAAF,kBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAK,WAAAF,YAAA;EACA;IACAG,GAAA;IACAC,CAAA,EAAAJ;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAK,SAAAC,MAAA,EAAAN,YAAA;EACA;IACAO,GAAA,EAAAD,MAAA;IACAF,CAAA,EAAAJ;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAQ,cAAAC,SAAA,EAAAT,YAAA,EAAAU,YAAA;EACA;IACAC,EAAA,EAAAD,YAAA;IACAE,KAAA,EAAAH,SAAA;IACAL,CAAA,EAAAJ;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAa,aAAAb,YAAA,EAAAU,YAAA;EACA;IACAC,EAAA,EAAAD,YAAA;IACAH,GAAA,EAAAT,sBAAA;IACAM,CAAA,IAAAJ;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAc,UAAAd,YAAA;EACA;IACAY,KAAA,EAAApB,UAAA;IACAY,CAAA,EAAAJ,YAAA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAe,YAAAf,YAAA;EACA;IACAY,KAAA,EAAAlB,QAAA;IACAU,CAAA,EAAAd,QAAA,CAAAU,YAAA,IAAAL,SAAA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAqB,oBAAAhB,YAAA;EACA,IAAAiB,EAAA;EACA,OAAAA,EAAA,OACAA,EAAA,CAAArB,YAAA,4BACAqB,EAAA,CAAAb,CAAA,GAAAJ,YAAA,EACAiB,EAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}