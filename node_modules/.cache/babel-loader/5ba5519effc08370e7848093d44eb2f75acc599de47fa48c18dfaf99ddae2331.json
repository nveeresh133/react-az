{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Common, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { getDocument, isString } from \"@microsoft/applicationinsights-core-js\";\nimport { _DYN_LENGTH, _DYN_PATHNAME, _DYN_TO_LOWER_CASE } from \"./__DynamicConstants\";\nvar _document = getDocument() || {};\nvar _htmlAnchorIdx = 0;\n// Use an array of temporary values as it's possible for multiple calls to parseUrl() will be called with different URLs\n// Using a cache size of 5 for now as it current depth usage is at least 2, so adding a minor buffer to handle future updates\nvar _htmlAnchorElement = [null, null, null, null, null];\nexport function urlParseUrl(url) {\n  var anchorIdx = _htmlAnchorIdx;\n  var anchorCache = _htmlAnchorElement;\n  var tempAnchor = anchorCache[anchorIdx];\n  if (!_document.createElement) {\n    // Always create the temp instance if createElement is not available\n    tempAnchor = {\n      host: urlParseHost(url, true)\n    };\n  } else if (!anchorCache[anchorIdx]) {\n    // Create and cache the unattached anchor instance\n    tempAnchor = anchorCache[anchorIdx] = _document.createElement(\"a\");\n  }\n  tempAnchor.href = url;\n  // Move the cache index forward\n  anchorIdx++;\n  if (anchorIdx >= anchorCache[_DYN_LENGTH /* @min:%2elength */]) {\n    anchorIdx = 0;\n  }\n  _htmlAnchorIdx = anchorIdx;\n  return tempAnchor;\n}\nexport function urlGetAbsoluteUrl(url) {\n  var result;\n  var a = urlParseUrl(url);\n  if (a) {\n    result = a.href;\n  }\n  return result;\n}\nexport function urlGetPathName(url) {\n  var result;\n  var a = urlParseUrl(url);\n  if (a) {\n    result = a[_DYN_PATHNAME /* @min:%2epathname */];\n  }\n  return result;\n}\nexport function urlGetCompleteUrl(method, absoluteUrl) {\n  if (method) {\n    return method.toUpperCase() + \" \" + absoluteUrl;\n  }\n  return absoluteUrl;\n}\n// Fallback method to grab host from url if document.createElement method is not available\nexport function urlParseHost(url, inclPort) {\n  var fullHost = urlParseFullHost(url, inclPort) || \"\";\n  if (fullHost) {\n    var match = fullHost.match(/(www\\d{0,5}\\.)?([^\\/:]{1,256})(:\\d{1,20})?/i);\n    if (match != null && match[_DYN_LENGTH /* @min:%2elength */] > 3 && isString(match[2]) && match[2][_DYN_LENGTH /* @min:%2elength */] > 0) {\n      return match[2] + (match[3] || \"\");\n    }\n  }\n  return fullHost;\n}\nexport function urlParseFullHost(url, inclPort) {\n  var result = null;\n  if (url) {\n    var match = url.match(/(\\w{1,150}):\\/\\/([^\\/:]{1,256})(:\\d{1,20})?/i);\n    if (match != null && match[_DYN_LENGTH /* @min:%2elength */] > 2 && isString(match[2]) && match[2][_DYN_LENGTH /* @min:%2elength */] > 0) {\n      result = match[2] || \"\";\n      if (inclPort && match[_DYN_LENGTH /* @min:%2elength */] > 2) {\n        var protocol = (match[1] || \"\")[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\n        var port = match[3] || \"\";\n        // IE includes the standard port so pass it off if it's the same as the protocol\n        if (protocol === \"http\" && port === \":80\") {\n          port = \"\";\n        } else if (protocol === \"https\" && port === \":443\") {\n          port = \"\";\n        }\n        result += port;\n      }\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["getDocument","isString","_DYN_LENGTH","_DYN_PATHNAME","_DYN_TO_LOWER_CASE","_document","_htmlAnchorIdx","_htmlAnchorElement","urlParseUrl","url","anchorIdx","anchorCache","tempAnchor","createElement","host","urlParseHost","href","urlGetAbsoluteUrl","result","a","urlGetPathName","urlGetCompleteUrl","method","absoluteUrl","toUpperCase","inclPort","fullHost","urlParseFullHost","match","protocol","port"],"sources":["/home/veeresh133/app/react-az/node_modules/@microsoft/applicationinsights-common/dist-es5/UrlHelperFuncs.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { getDocument, isString } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_LENGTH, _DYN_PATHNAME, _DYN_TO_LOWER_CASE } from \"./__DynamicConstants\";\r\nvar _document = getDocument() || {};\r\nvar _htmlAnchorIdx = 0;\r\n// Use an array of temporary values as it's possible for multiple calls to parseUrl() will be called with different URLs\r\n// Using a cache size of 5 for now as it current depth usage is at least 2, so adding a minor buffer to handle future updates\r\nvar _htmlAnchorElement = [null, null, null, null, null];\r\nexport function urlParseUrl(url) {\r\n    var anchorIdx = _htmlAnchorIdx;\r\n    var anchorCache = _htmlAnchorElement;\r\n    var tempAnchor = anchorCache[anchorIdx];\r\n    if (!_document.createElement) {\r\n        // Always create the temp instance if createElement is not available\r\n        tempAnchor = { host: urlParseHost(url, true) };\r\n    }\r\n    else if (!anchorCache[anchorIdx]) {\r\n        // Create and cache the unattached anchor instance\r\n        tempAnchor = anchorCache[anchorIdx] = _document.createElement(\"a\");\r\n    }\r\n    tempAnchor.href = url;\r\n    // Move the cache index forward\r\n    anchorIdx++;\r\n    if (anchorIdx >= anchorCache[_DYN_LENGTH /* @min:%2elength */]) {\r\n        anchorIdx = 0;\r\n    }\r\n    _htmlAnchorIdx = anchorIdx;\r\n    return tempAnchor;\r\n}\r\nexport function urlGetAbsoluteUrl(url) {\r\n    var result;\r\n    var a = urlParseUrl(url);\r\n    if (a) {\r\n        result = a.href;\r\n    }\r\n    return result;\r\n}\r\nexport function urlGetPathName(url) {\r\n    var result;\r\n    var a = urlParseUrl(url);\r\n    if (a) {\r\n        result = a[_DYN_PATHNAME /* @min:%2epathname */];\r\n    }\r\n    return result;\r\n}\r\nexport function urlGetCompleteUrl(method, absoluteUrl) {\r\n    if (method) {\r\n        return method.toUpperCase() + \" \" + absoluteUrl;\r\n    }\r\n    return absoluteUrl;\r\n}\r\n// Fallback method to grab host from url if document.createElement method is not available\r\nexport function urlParseHost(url, inclPort) {\r\n    var fullHost = urlParseFullHost(url, inclPort) || \"\";\r\n    if (fullHost) {\r\n        var match = fullHost.match(/(www\\d{0,5}\\.)?([^\\/:]{1,256})(:\\d{1,20})?/i);\r\n        if (match != null && match[_DYN_LENGTH /* @min:%2elength */] > 3 && isString(match[2]) && match[2][_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n            return match[2] + (match[3] || \"\");\r\n        }\r\n    }\r\n    return fullHost;\r\n}\r\nexport function urlParseFullHost(url, inclPort) {\r\n    var result = null;\r\n    if (url) {\r\n        var match = url.match(/(\\w{1,150}):\\/\\/([^\\/:]{1,256})(:\\d{1,20})?/i);\r\n        if (match != null && match[_DYN_LENGTH /* @min:%2elength */] > 2 && isString(match[2]) && match[2][_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n            result = match[2] || \"\";\r\n            if (inclPort && match[_DYN_LENGTH /* @min:%2elength */] > 2) {\r\n                var protocol = (match[1] || \"\")[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n                var port = match[3] || \"\";\r\n                // IE includes the standard port so pass it off if it's the same as the protocol\r\n                if (protocol === \"http\" && port === \":80\") {\r\n                    port = \"\";\r\n                }\r\n                else if (protocol === \"https\" && port === \":443\") {\r\n                    port = \"\";\r\n                }\r\n                result += port;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=UrlHelperFuncs.js.map"],"mappings":";;;;;AAEA,SAAAA,WAAA,EAAAC,QAAA;AACA,SAAAC,WAAA,EAAAC,aAAA,EAAAC,kBAAA;AACA,IAAAC,SAAA,GAAAL,WAAA;AACA,IAAAM,cAAA;AACA;AACA;AACA,IAAAC,kBAAA;AACA,gBAAAC,YAAAC,GAAA;EACA,IAAAC,SAAA,GAAAJ,cAAA;EACA,IAAAK,WAAA,GAAAJ,kBAAA;EACA,IAAAK,UAAA,GAAAD,WAAA,CAAAD,SAAA;EACA,KAAAL,SAAA,CAAAQ,aAAA;IACA;IACAD,UAAA;MAAAE,IAAA,EAAAC,YAAA,CAAAN,GAAA;IAAA;EACA,OACA,KAAAE,WAAA,CAAAD,SAAA;IACA;IACAE,UAAA,GAAAD,WAAA,CAAAD,SAAA,IAAAL,SAAA,CAAAQ,aAAA;EACA;EACAD,UAAA,CAAAI,IAAA,GAAAP,GAAA;EACA;EACAC,SAAA;EACA,IAAAA,SAAA,IAAAC,WAAA,CAAAT,WAAA;IACAQ,SAAA;EACA;EACAJ,cAAA,GAAAI,SAAA;EACA,OAAAE,UAAA;AACA;AACA,gBAAAK,kBAAAR,GAAA;EACA,IAAAS,MAAA;EACA,IAAAC,CAAA,GAAAX,WAAA,CAAAC,GAAA;EACA,IAAAU,CAAA;IACAD,MAAA,GAAAC,CAAA,CAAAH,IAAA;EACA;EACA,OAAAE,MAAA;AACA;AACA,gBAAAE,eAAAX,GAAA;EACA,IAAAS,MAAA;EACA,IAAAC,CAAA,GAAAX,WAAA,CAAAC,GAAA;EACA,IAAAU,CAAA;IACAD,MAAA,GAAAC,CAAA,CAAAhB,aAAA;EACA;EACA,OAAAe,MAAA;AACA;AACA,gBAAAG,kBAAAC,MAAA,EAAAC,WAAA;EACA,IAAAD,MAAA;IACA,OAAAA,MAAA,CAAAE,WAAA,WAAAD,WAAA;EACA;EACA,OAAAA,WAAA;AACA;AACA;AACA,gBAAAR,aAAAN,GAAA,EAAAgB,QAAA;EACA,IAAAC,QAAA,GAAAC,gBAAA,CAAAlB,GAAA,EAAAgB,QAAA;EACA,IAAAC,QAAA;IACA,IAAAE,KAAA,GAAAF,QAAA,CAAAE,KAAA;IACA,IAAAA,KAAA,YAAAA,KAAA,CAAA1B,WAAA,8BAAAD,QAAA,CAAA2B,KAAA,QAAAA,KAAA,IAAA1B,WAAA;MACA,OAAA0B,KAAA,OAAAA,KAAA;IACA;EACA;EACA,OAAAF,QAAA;AACA;AACA,gBAAAC,iBAAAlB,GAAA,EAAAgB,QAAA;EACA,IAAAP,MAAA;EACA,IAAAT,GAAA;IACA,IAAAmB,KAAA,GAAAnB,GAAA,CAAAmB,KAAA;IACA,IAAAA,KAAA,YAAAA,KAAA,CAAA1B,WAAA,8BAAAD,QAAA,CAAA2B,KAAA,QAAAA,KAAA,IAAA1B,WAAA;MACAgB,MAAA,GAAAU,KAAA;MACA,IAAAH,QAAA,IAAAG,KAAA,CAAA1B,WAAA;QACA,IAAA2B,QAAA,IAAAD,KAAA,WAAAxB,kBAAA;QACA,IAAA0B,IAAA,GAAAF,KAAA;QACA;QACA,IAAAC,QAAA,eAAAC,IAAA;UACAA,IAAA;QACA,OACA,IAAAD,QAAA,gBAAAC,IAAA;UACAA,IAAA;QACA;QACAZ,MAAA,IAAAY,IAAA;MACA;IACA;EACA;EACA,OAAAZ,MAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}