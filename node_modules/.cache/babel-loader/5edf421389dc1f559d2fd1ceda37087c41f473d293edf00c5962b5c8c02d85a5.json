{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { arrAppend, arrForEach, dumpObj } from \"@nevware21/ts-utils\";\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\nimport { _throwInternal } from \"./DiagnosticLogger\";\nvar _maxHooks;\nvar _hookAddMonitor;\n/**\r\n * Test hook for setting the maximum number of unload hooks and calling a monitor function when the hooks are added or removed\r\n * This allows for automatic test failure when the maximum number of unload hooks is exceeded\r\n * @param maxHooks - The maximum number of unload hooks\r\n * @param addMonitor - The monitor function to call when hooks are added or removed\r\n */\nexport function _testHookMaxUnloadHooksCb(maxHooks, addMonitor) {\n  _maxHooks = maxHooks;\n  _hookAddMonitor = addMonitor;\n}\n/**\r\n * Create a IUnloadHookContainer which can be used to remember unload hook functions to be executed during the component unloading\r\n * process.\r\n * @returns A new IUnloadHookContainer instance\r\n */\nexport function createUnloadHookContainer() {\n  var _hooks = [];\n  function _doUnload(logger) {\n    var oldHooks = _hooks;\n    _hooks = [];\n    // Remove all registered unload hooks\n    arrForEach(oldHooks, function (fn) {\n      // allow either rm or remove callback function\n      try {\n        (fn.rm || fn.remove).call(fn);\n      } catch (e) {\n        _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 73 /* _eInternalMessageId.PluginException */, \"Unloading:\" + dumpObj(e));\n      }\n    });\n    if (_maxHooks && oldHooks[_DYN_LENGTH /* @min:%2elength */] > _maxHooks) {\n      _hookAddMonitor ? _hookAddMonitor(\"doUnload\", oldHooks) : _throwInternal(null, 1 /* eLoggingSeverity.CRITICAL */, 48 /* _eInternalMessageId.MaxUnloadHookExceeded */, \"Max unload hooks exceeded. An excessive number of unload hooks has been detected.\");\n    }\n  }\n  function _addHook(hooks) {\n    if (hooks) {\n      arrAppend(_hooks, hooks);\n      if (_maxHooks && _hooks[_DYN_LENGTH /* @min:%2elength */] > _maxHooks) {\n        _hookAddMonitor ? _hookAddMonitor(\"Add\", _hooks) : _throwInternal(null, 1 /* eLoggingSeverity.CRITICAL */, 48 /* _eInternalMessageId.MaxUnloadHookExceeded */, \"Max unload hooks exceeded. An excessive number of unload hooks has been detected.\");\n      }\n    }\n  }\n  return {\n    run: _doUnload,\n    add: _addHook\n  };\n}","map":{"version":3,"names":["arrAppend","arrForEach","dumpObj","_DYN_LENGTH","_throwInternal","_maxHooks","_hookAddMonitor","_testHookMaxUnloadHooksCb","maxHooks","addMonitor","createUnloadHookContainer","_hooks","_doUnload","logger","oldHooks","fn","rm","remove","call","e","_addHook","hooks","run","add"],"sources":["/home/veeresh133/app/api-call/react-az/node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/UnloadHookContainer.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { arrAppend, arrForEach, dumpObj } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\nimport { _throwInternal } from \"./DiagnosticLogger\";\r\nvar _maxHooks;\r\nvar _hookAddMonitor;\r\n/**\r\n * Test hook for setting the maximum number of unload hooks and calling a monitor function when the hooks are added or removed\r\n * This allows for automatic test failure when the maximum number of unload hooks is exceeded\r\n * @param maxHooks - The maximum number of unload hooks\r\n * @param addMonitor - The monitor function to call when hooks are added or removed\r\n */\r\nexport function _testHookMaxUnloadHooksCb(maxHooks, addMonitor) {\r\n    _maxHooks = maxHooks;\r\n    _hookAddMonitor = addMonitor;\r\n}\r\n/**\r\n * Create a IUnloadHookContainer which can be used to remember unload hook functions to be executed during the component unloading\r\n * process.\r\n * @returns A new IUnloadHookContainer instance\r\n */\r\nexport function createUnloadHookContainer() {\r\n    var _hooks = [];\r\n    function _doUnload(logger) {\r\n        var oldHooks = _hooks;\r\n        _hooks = [];\r\n        // Remove all registered unload hooks\r\n        arrForEach(oldHooks, function (fn) {\r\n            // allow either rm or remove callback function\r\n            try {\r\n                (fn.rm || fn.remove).call(fn);\r\n            }\r\n            catch (e) {\r\n                _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 73 /* _eInternalMessageId.PluginException */, \"Unloading:\" + dumpObj(e));\r\n            }\r\n        });\r\n        if (_maxHooks && oldHooks[_DYN_LENGTH /* @min:%2elength */] > _maxHooks) {\r\n            _hookAddMonitor ? _hookAddMonitor(\"doUnload\", oldHooks) : _throwInternal(null, 1 /* eLoggingSeverity.CRITICAL */, 48 /* _eInternalMessageId.MaxUnloadHookExceeded */, \"Max unload hooks exceeded. An excessive number of unload hooks has been detected.\");\r\n        }\r\n    }\r\n    function _addHook(hooks) {\r\n        if (hooks) {\r\n            arrAppend(_hooks, hooks);\r\n            if (_maxHooks && _hooks[_DYN_LENGTH /* @min:%2elength */] > _maxHooks) {\r\n                _hookAddMonitor ? _hookAddMonitor(\"Add\", _hooks) : _throwInternal(null, 1 /* eLoggingSeverity.CRITICAL */, 48 /* _eInternalMessageId.MaxUnloadHookExceeded */, \"Max unload hooks exceeded. An excessive number of unload hooks has been detected.\");\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        run: _doUnload,\r\n        add: _addHook\r\n    };\r\n}\r\n//# sourceMappingURL=UnloadHookContainer.js.map"],"mappings":";;;;;AAEA,SAAAA,SAAA,EAAAC,UAAA,EAAAC,OAAA;AACA,SAAAC,WAAA;AACA,SAAAC,cAAA;AACA,IAAAC,SAAA;AACA,IAAAC,eAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAC,0BAAAC,QAAA,EAAAC,UAAA;EACAJ,SAAA,GAAAG,QAAA;EACAF,eAAA,GAAAG,UAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAC,0BAAA;EACA,IAAAC,MAAA;EACA,SAAAC,UAAAC,MAAA;IACA,IAAAC,QAAA,GAAAH,MAAA;IACAA,MAAA;IACA;IACAV,UAAA,CAAAa,QAAA,YAAAC,EAAA;MACA;MACA;QACA,CAAAA,EAAA,CAAAC,EAAA,IAAAD,EAAA,CAAAE,MAAA,EAAAC,IAAA,CAAAH,EAAA;MACA,EACA,OAAAI,CAAA;QACAf,cAAA,CAAAS,MAAA,iGAAAX,OAAA,CAAAiB,CAAA;MACA;IACA;IACA,IAAAd,SAAA,IAAAS,QAAA,CAAAX,WAAA,yBAAAE,SAAA;MACAC,eAAA,GAAAA,eAAA,aAAAQ,QAAA,IAAAV,cAAA;IACA;EACA;EACA,SAAAgB,SAAAC,KAAA;IACA,IAAAA,KAAA;MACArB,SAAA,CAAAW,MAAA,EAAAU,KAAA;MACA,IAAAhB,SAAA,IAAAM,MAAA,CAAAR,WAAA,yBAAAE,SAAA;QACAC,eAAA,GAAAA,eAAA,QAAAK,MAAA,IAAAP,cAAA;MACA;IACA;EACA;EACA;IACAkB,GAAA,EAAAV,SAAA;IACAW,GAAA,EAAAH;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}