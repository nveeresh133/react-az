{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { dumpObj } from \"@nevware21/ts-utils\";\nimport { _DYN_ITEMS_RECEIVED, _DYN_LENGTH, _DYN_NAME } from \"../__DynamicConstants\";\nimport { _throwInternal } from \"./DiagnosticLogger\";\nimport { getJSON } from \"./EnvUtils\";\n/**\r\n * Parses the response from the backend.\r\n * @param response - XMLHttpRequest or XDomainRequest response\r\n */\nexport function parseResponse(response, diagLog) {\n  try {\n    if (response && response !== \"\") {\n      var result = getJSON().parse(response);\n      if (result && result[_DYN_ITEMS_RECEIVED /* @min:%2eitemsReceived */] && result[_DYN_ITEMS_RECEIVED /* @min:%2eitemsReceived */] >= result.itemsAccepted && result.itemsReceived - result.itemsAccepted === result.errors[_DYN_LENGTH /* @min:%2elength */]) {\n        return result;\n      }\n    }\n  } catch (e) {\n    _throwInternal(diagLog, 1 /* eLoggingSeverity.CRITICAL */, 43 /* _eInternalMessageId.InvalidBackendResponse */, \"Cannot parse the response. \" + (e[_DYN_NAME /* @min:%2ename */] || dumpObj(e)), {\n      response: response\n    });\n  }\n  return null;\n}","map":{"version":3,"names":["dumpObj","_DYN_ITEMS_RECEIVED","_DYN_LENGTH","_DYN_NAME","_throwInternal","getJSON","parseResponse","response","diagLog","result","parse","itemsAccepted","itemsReceived","errors","e"],"sources":["/home/veeresh133/app/api-call/react-az/node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/ResponseHelpers.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { dumpObj } from \"@nevware21/ts-utils\";\r\nimport { _DYN_ITEMS_RECEIVED, _DYN_LENGTH, _DYN_NAME } from \"../__DynamicConstants\";\r\nimport { _throwInternal } from \"./DiagnosticLogger\";\r\nimport { getJSON } from \"./EnvUtils\";\r\n/**\r\n * Parses the response from the backend.\r\n * @param response - XMLHttpRequest or XDomainRequest response\r\n */\r\nexport function parseResponse(response, diagLog) {\r\n    try {\r\n        if (response && response !== \"\") {\r\n            var result = getJSON().parse(response);\r\n            if (result && result[_DYN_ITEMS_RECEIVED /* @min:%2eitemsReceived */] && result[_DYN_ITEMS_RECEIVED /* @min:%2eitemsReceived */] >= result.itemsAccepted &&\r\n                result.itemsReceived - result.itemsAccepted === result.errors[_DYN_LENGTH /* @min:%2elength */]) {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        _throwInternal(diagLog, 1 /* eLoggingSeverity.CRITICAL */, 43 /* _eInternalMessageId.InvalidBackendResponse */, \"Cannot parse the response. \" + (e[_DYN_NAME /* @min:%2ename */] || dumpObj(e)), {\r\n            response: response\r\n        });\r\n    }\r\n    return null;\r\n}\r\n//# sourceMappingURL=ResponseHelpers.js.map"],"mappings":";;;;;AAEA,SAAAA,OAAA;AACA,SAAAC,mBAAA,EAAAC,WAAA,EAAAC,SAAA;AACA,SAAAC,cAAA;AACA,SAAAC,OAAA;AACA;AACA;AACA;AACA;AACA,gBAAAC,cAAAC,QAAA,EAAAC,OAAA;EACA;IACA,IAAAD,QAAA,IAAAA,QAAA;MACA,IAAAE,MAAA,GAAAJ,OAAA,GAAAK,KAAA,CAAAH,QAAA;MACA,IAAAE,MAAA,IAAAA,MAAA,CAAAR,mBAAA,iCAAAQ,MAAA,CAAAR,mBAAA,iCAAAQ,MAAA,CAAAE,aAAA,IACAF,MAAA,CAAAG,aAAA,GAAAH,MAAA,CAAAE,aAAA,KAAAF,MAAA,CAAAI,MAAA,CAAAX,WAAA;QACA,OAAAO,MAAA;MACA;IACA;EACA,EACA,OAAAK,CAAA;IACAV,cAAA,CAAAI,OAAA,2HAAAM,CAAA,CAAAX,SAAA,wBAAAH,OAAA,CAAAc,CAAA;MACAP,QAAA,EAAAA;IACA;EACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}