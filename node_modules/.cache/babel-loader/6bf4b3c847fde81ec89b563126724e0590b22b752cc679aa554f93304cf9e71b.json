{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Channel, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { __assignFn as __assign } from \"@microsoft/applicationinsights-shims\";\nimport { CtxTagKeys, Data, Envelope, Event, Exception, HttpMethod, Metric, PageView, PageViewPerformance, RemoteDependencyData, SampleRate, Trace, dataSanitizeString } from \"@microsoft/applicationinsights-common\";\nimport { _throwInternal, _warnToConsole, getJSON, hasJSON, isNullOrUndefined, isNumber, isString, isTruthy, objForEachKey, optimizeObject, setValue, toISOString } from \"@microsoft/applicationinsights-core-js\";\nimport { STR_DURATION } from \"./InternalConstants\";\nimport { _DYN_DATA, _DYN_DATA_TYPE, _DYN_DEVICE_TYPE, _DYN_ENVELOPE_TYPE, _DYN_LENGTH, _DYN_MEASUREMENTS, _DYN_NAME, _DYN_STRINGIFY, _DYN_TAGS, _DYN_TO_STRING, _DYN_TRACE_ID } from \"./__DynamicConstants\";\n// these two constants are used to filter out properties not needed when trying to extract custom properties and measurements from the incoming payload\nvar strBaseType = \"baseType\";\nvar strBaseData = \"baseData\";\nvar strProperties = \"properties\";\nvar strTrue = \"true\";\nfunction _setValueIf(target, field, value) {\n  return setValue(target, field, value, isTruthy);\n}\n/*\r\n * Maps Part A data from CS 4.0\r\n */\nfunction _extractPartAExtensions(logger, item, env) {\n  // todo: switch to keys from common in this method\n  var envTags = env[_DYN_TAGS /* @min:%2etags */] = env[_DYN_TAGS /* @min:%2etags */] || {};\n  var itmExt = item.ext = item.ext || {};\n  var itmTags = item[_DYN_TAGS /* @min:%2etags */] = item[_DYN_TAGS /* @min:%2etags */] || [];\n  var extUser = itmExt.user;\n  if (extUser) {\n    _setValueIf(envTags, CtxTagKeys.userAuthUserId, extUser.authId);\n    _setValueIf(envTags, CtxTagKeys.userId, extUser.id || extUser.localId);\n  }\n  var extApp = itmExt.app;\n  if (extApp) {\n    _setValueIf(envTags, CtxTagKeys.sessionId, extApp.sesId);\n  }\n  var extDevice = itmExt.device;\n  if (extDevice) {\n    _setValueIf(envTags, CtxTagKeys.deviceId, extDevice.id || extDevice.localId);\n    _setValueIf(envTags, CtxTagKeys[_DYN_DEVICE_TYPE /* @min:%2edeviceType */], extDevice.deviceClass);\n    _setValueIf(envTags, CtxTagKeys.deviceIp, extDevice.ip);\n    _setValueIf(envTags, CtxTagKeys.deviceModel, extDevice.model);\n    _setValueIf(envTags, CtxTagKeys[_DYN_DEVICE_TYPE /* @min:%2edeviceType */], extDevice[_DYN_DEVICE_TYPE /* @min:%2edeviceType */]);\n  }\n  var web = item.ext.web;\n  if (web) {\n    _setValueIf(envTags, CtxTagKeys.deviceLanguage, web.browserLang);\n    _setValueIf(envTags, CtxTagKeys.deviceBrowserVersion, web.browserVer);\n    _setValueIf(envTags, CtxTagKeys.deviceBrowser, web.browser);\n    var envData = env[_DYN_DATA /* @min:%2edata */] = env[_DYN_DATA /* @min:%2edata */] || {};\n    var envBaseData = envData[strBaseData] = envData[strBaseData] || {};\n    var envProps = envBaseData[strProperties] = envBaseData[strProperties] || {};\n    _setValueIf(envProps, \"domain\", web.domain);\n    _setValueIf(envProps, \"isManual\", web.isManual ? strTrue : null);\n    _setValueIf(envProps, \"screenRes\", web.screenRes);\n    _setValueIf(envProps, \"userConsent\", web.userConsent ? strTrue : null);\n  }\n  var extOs = itmExt.os;\n  if (extOs) {\n    _setValueIf(envTags, CtxTagKeys.deviceOS, extOs[_DYN_NAME /* @min:%2ename */]);\n    _setValueIf(envTags, CtxTagKeys.deviceOSVersion, extOs.osVer);\n  }\n  // No support for mapping Trace.traceState to 2.0 as it is currently empty\n  var extTrace = itmExt.trace;\n  if (extTrace) {\n    _setValueIf(envTags, CtxTagKeys.operationParentId, extTrace.parentID);\n    _setValueIf(envTags, CtxTagKeys.operationName, dataSanitizeString(logger, extTrace[_DYN_NAME /* @min:%2ename */]));\n    _setValueIf(envTags, CtxTagKeys.operationId, extTrace[_DYN_TRACE_ID /* @min:%2etraceID */]);\n  }\n  // Sample 4.0 schema\n  //  {\n  //     \"time\" : \"2018-09-05T22:51:22.4936Z\",\n  //     \"name\" : \"MetricWithNamespace\",\n  //     \"iKey\" : \"ABC-5a4cbd20-e601-4ef5-a3c6-5d6577e4398e\",\n  //     \"ext\": {  \"cloud\": {\n  //          \"role\": \"WATSON3\",\n  //          \"roleInstance\": \"CO4AEAP00000260\"\n  //      },\n  //      \"device\": {}, \"correlation\": {} },\n  //      \"tags\": [\n  //        { \"amazon.region\" : \"east2\" },\n  //        { \"os.expid\" : \"wp:02df239\" }\n  //     ]\n  //   }\n  var tgs = {};\n  // deals with tags.push({object})\n  for (var i = itmTags[_DYN_LENGTH /* @min:%2elength */] - 1; i >= 0; i--) {\n    var tg = itmTags[i];\n    objForEachKey(tg, function (key, value) {\n      tgs[key] = value;\n    });\n    itmTags.splice(i, 1);\n  }\n  // deals with tags[key]=value (and handles hasOwnProperty)\n  objForEachKey(itmTags, function (tg, value) {\n    tgs[tg] = value;\n  });\n  var theTags = __assign(__assign({}, envTags), tgs);\n  if (!theTags[CtxTagKeys.internalSdkVersion]) {\n    // Append a version in case it is not already set\n    theTags[CtxTagKeys.internalSdkVersion] = dataSanitizeString(logger, \"javascript:\".concat(EnvelopeCreator.Version), 64);\n  }\n  env[_DYN_TAGS /* @min:%2etags */] = optimizeObject(theTags);\n}\nfunction _extractPropsAndMeasurements(data, properties, measurements) {\n  if (!isNullOrUndefined(data)) {\n    objForEachKey(data, function (key, value) {\n      if (isNumber(value)) {\n        measurements[key] = value;\n      } else if (isString(value)) {\n        properties[key] = value;\n      } else if (hasJSON()) {\n        properties[key] = getJSON()[_DYN_STRINGIFY /* @min:%2estringify */](value);\n      }\n    });\n  }\n}\nfunction _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue) {\n  if (!isNullOrUndefined(properties)) {\n    objForEachKey(properties, function (key, value) {\n      properties[key] = value || customUndefinedValue;\n    });\n  }\n}\n// TODO: Do we want this to take logger as arg or use this._logger as nonstatic?\nfunction _createEnvelope(logger, envelopeType, telemetryItem, data) {\n  var envelope = new Envelope(logger, data, envelopeType);\n  _setValueIf(envelope, \"sampleRate\", telemetryItem[SampleRate]);\n  if ((telemetryItem[strBaseData] || {}).startTime) {\n    // Starting from Version 3.0.3, the time property will be assigned by the startTime value,\n    // which records the loadEvent time for the pageView event.\n    envelope.time = toISOString(telemetryItem[strBaseData].startTime);\n  }\n  envelope.iKey = telemetryItem.iKey;\n  var iKeyNoDashes = telemetryItem.iKey.replace(/-/g, \"\");\n  envelope[_DYN_NAME /* @min:%2ename */] = envelope[_DYN_NAME /* @min:%2ename */].replace(\"{0}\", iKeyNoDashes);\n  // extract all extensions from ctx\n  _extractPartAExtensions(logger, telemetryItem, envelope);\n  // loop through the envelope tags (extension of Part A) and pick out the ones that should go in outgoing envelope tags\n  telemetryItem[_DYN_TAGS /* @min:%2etags */] = telemetryItem[_DYN_TAGS /* @min:%2etags */] || [];\n  return optimizeObject(envelope);\n}\nfunction EnvelopeCreatorInit(logger, telemetryItem) {\n  if (isNullOrUndefined(telemetryItem[strBaseData])) {\n    _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 46 /* _eInternalMessageId.TelemetryEnvelopeInvalid */, \"telemetryItem.baseData cannot be null.\");\n  }\n}\nexport var EnvelopeCreator = {\n  Version: '3.3.1'\n};\nexport function DependencyEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\n  EnvelopeCreatorInit(logger, telemetryItem);\n  var customMeasurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\n  var customProperties = telemetryItem[strBaseData][strProperties] || {};\n  _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], customProperties, customMeasurements);\n  if (!isNullOrUndefined(customUndefinedValue)) {\n    _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);\n  }\n  var bd = telemetryItem[strBaseData];\n  if (isNullOrUndefined(bd)) {\n    _warnToConsole(logger, \"Invalid input for dependency data\");\n    return null;\n  }\n  var method = bd[strProperties] && bd[strProperties][HttpMethod] ? bd[strProperties][HttpMethod] : \"GET\";\n  var remoteDepData = new RemoteDependencyData(logger, bd.id, bd.target, bd[_DYN_NAME /* @min:%2ename */], bd[STR_DURATION /* @min:%2eduration */], bd.success, bd.responseCode, method, bd.type, bd.correlationContext, customProperties, customMeasurements);\n  var data = new Data(RemoteDependencyData[_DYN_DATA_TYPE /* @min:%2edataType */], remoteDepData);\n  return _createEnvelope(logger, RemoteDependencyData[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\n}\nexport function EventEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\n  EnvelopeCreatorInit(logger, telemetryItem);\n  var customProperties = {};\n  var customMeasurements = {};\n  if (telemetryItem[strBaseType] !== Event[_DYN_DATA_TYPE /* @min:%2edataType */]) {\n    customProperties[\"baseTypeSource\"] = telemetryItem[strBaseType]; // save the passed in base type as a property\n  }\n  if (telemetryItem[strBaseType] === Event[_DYN_DATA_TYPE /* @min:%2edataType */]) {\n    // take collection\n    customProperties = telemetryItem[strBaseData][strProperties] || {};\n    customMeasurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\n  } else {\n    // if its not a known type, convert to custom event\n    if (telemetryItem[strBaseData]) {\n      _extractPropsAndMeasurements(telemetryItem[strBaseData], customProperties, customMeasurements);\n    }\n  }\n  // Extract root level properties from part C telemetryItem.data\n  _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], customProperties, customMeasurements);\n  if (!isNullOrUndefined(customUndefinedValue)) {\n    _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);\n  }\n  var eventName = telemetryItem[strBaseData][_DYN_NAME /* @min:%2ename */];\n  var eventData = new Event(logger, eventName, customProperties, customMeasurements);\n  var data = new Data(Event[_DYN_DATA_TYPE /* @min:%2edataType */], eventData);\n  return _createEnvelope(logger, Event[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\n}\nexport function ExceptionEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\n  EnvelopeCreatorInit(logger, telemetryItem);\n  // Extract root level properties from part C telemetryItem.data\n  var customMeasurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\n  var customProperties = telemetryItem[strBaseData][strProperties] || {};\n  _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], customProperties, customMeasurements);\n  if (!isNullOrUndefined(customUndefinedValue)) {\n    _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);\n  }\n  var bd = telemetryItem[strBaseData];\n  var exData = Exception.CreateFromInterface(logger, bd, customProperties, customMeasurements);\n  var data = new Data(Exception[_DYN_DATA_TYPE /* @min:%2edataType */], exData);\n  return _createEnvelope(logger, Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\n}\nexport function MetricEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\n  EnvelopeCreatorInit(logger, telemetryItem);\n  var baseData = telemetryItem[strBaseData];\n  var props = baseData[strProperties] || {};\n  var measurements = baseData[_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\n  _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], props, measurements);\n  if (!isNullOrUndefined(customUndefinedValue)) {\n    _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);\n  }\n  var baseMetricData = new Metric(logger, baseData[_DYN_NAME /* @min:%2ename */], baseData.average, baseData.sampleCount, baseData.min, baseData.max, baseData.stdDev, props, measurements);\n  var data = new Data(Metric[_DYN_DATA_TYPE /* @min:%2edataType */], baseMetricData);\n  return _createEnvelope(logger, Metric[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\n}\nexport function PageViewEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\n  EnvelopeCreatorInit(logger, telemetryItem);\n  // Since duration is not part of the domain properties in Common Schema, extract it from part C\n  var duration;\n  var baseData = telemetryItem[strBaseData];\n  if (!isNullOrUndefined(baseData) && !isNullOrUndefined(baseData[strProperties]) && !isNullOrUndefined(baseData[strProperties][STR_DURATION])) {\n    // from part B properties\n    duration = baseData[strProperties][STR_DURATION];\n    delete baseData[strProperties][STR_DURATION];\n  } else if (!isNullOrUndefined(telemetryItem[_DYN_DATA /* @min:%2edata */]) && !isNullOrUndefined(telemetryItem[_DYN_DATA /* @min:%2edata */][STR_DURATION])) {\n    // from custom properties\n    duration = telemetryItem[_DYN_DATA /* @min:%2edata */][STR_DURATION];\n    delete telemetryItem[_DYN_DATA /* @min:%2edata */][STR_DURATION];\n  }\n  var bd = telemetryItem[strBaseData];\n  // special case: pageview.id is grabbed from current operation id. Analytics plugin is decoupled from properties plugin, so this is done here instead. This can be made a default telemetry intializer instead if needed to be decoupled from channel\n  var currentContextId;\n  if (((telemetryItem.ext || {}).trace || {})[_DYN_TRACE_ID /* @min:%2etraceID */]) {\n    currentContextId = telemetryItem.ext.trace[_DYN_TRACE_ID /* @min:%2etraceID */];\n  }\n  var id = bd.id || currentContextId;\n  var name = bd[_DYN_NAME /* @min:%2ename */];\n  var url = bd.uri;\n  var properties = bd[strProperties] || {};\n  var measurements = bd[_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\n  // refUri is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\n  if (!isNullOrUndefined(bd.refUri)) {\n    properties[\"refUri\"] = bd.refUri;\n  }\n  // pageType is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\n  if (!isNullOrUndefined(bd.pageType)) {\n    properties[\"pageType\"] = bd.pageType;\n  }\n  // isLoggedIn is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\n  if (!isNullOrUndefined(bd.isLoggedIn)) {\n    properties[\"isLoggedIn\"] = bd.isLoggedIn[_DYN_TO_STRING /* @min:%2etoString */]();\n  }\n  // pageTags is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\n  if (!isNullOrUndefined(bd[strProperties])) {\n    var pageTags = bd[strProperties];\n    objForEachKey(pageTags, function (key, value) {\n      properties[key] = value;\n    });\n  }\n  _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], properties, measurements);\n  if (!isNullOrUndefined(customUndefinedValue)) {\n    _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);\n  }\n  var pageViewData = new PageView(logger, name, url, duration, properties, measurements, id);\n  var data = new Data(PageView[_DYN_DATA_TYPE /* @min:%2edataType */], pageViewData);\n  return _createEnvelope(logger, PageView[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\n}\nexport function PageViewPerformanceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\n  EnvelopeCreatorInit(logger, telemetryItem);\n  var bd = telemetryItem[strBaseData];\n  var name = bd[_DYN_NAME /* @min:%2ename */];\n  var url = bd.uri || bd.url;\n  var properties = bd[strProperties] || {};\n  var measurements = bd[_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\n  _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], properties, measurements);\n  if (!isNullOrUndefined(customUndefinedValue)) {\n    _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);\n  }\n  var baseData = new PageViewPerformance(logger, name, url, undefined, properties, measurements, bd);\n  var data = new Data(PageViewPerformance[_DYN_DATA_TYPE /* @min:%2edataType */], baseData);\n  return _createEnvelope(logger, PageViewPerformance[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\n}\nexport function TraceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\n  EnvelopeCreatorInit(logger, telemetryItem);\n  var message = telemetryItem[strBaseData].message;\n  var severityLevel = telemetryItem[strBaseData].severityLevel;\n  var props = telemetryItem[strBaseData][strProperties] || {};\n  var measurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\n  _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], props, measurements);\n  if (!isNullOrUndefined(customUndefinedValue)) {\n    _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);\n  }\n  var baseData = new Trace(logger, message, severityLevel, props, measurements);\n  var data = new Data(Trace[_DYN_DATA_TYPE /* @min:%2edataType */], baseData);\n  return _createEnvelope(logger, Trace[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\n}","map":{"version":3,"names":["__assignFn","__assign","CtxTagKeys","Data","Envelope","Event","Exception","HttpMethod","Metric","PageView","PageViewPerformance","RemoteDependencyData","SampleRate","Trace","dataSanitizeString","_throwInternal","_warnToConsole","getJSON","hasJSON","isNullOrUndefined","isNumber","isString","isTruthy","objForEachKey","optimizeObject","setValue","toISOString","STR_DURATION","_DYN_DATA","_DYN_DATA_TYPE","_DYN_DEVICE_TYPE","_DYN_ENVELOPE_TYPE","_DYN_LENGTH","_DYN_MEASUREMENTS","_DYN_NAME","_DYN_STRINGIFY","_DYN_TAGS","_DYN_TO_STRING","_DYN_TRACE_ID","strBaseType","strBaseData","strProperties","strTrue","_setValueIf","target","field","value","_extractPartAExtensions","logger","item","env","envTags","itmExt","ext","itmTags","extUser","user","userAuthUserId","authId","userId","id","localId","extApp","app","sessionId","sesId","extDevice","device","deviceId","deviceClass","deviceIp","ip","deviceModel","model","web","deviceLanguage","browserLang","deviceBrowserVersion","browserVer","deviceBrowser","browser","envData","envBaseData","envProps","domain","isManual","screenRes","userConsent","extOs","os","deviceOS","deviceOSVersion","osVer","extTrace","trace","operationParentId","parentID","operationName","operationId","tgs","i","tg","key","splice","theTags","internalSdkVersion","concat","EnvelopeCreator","Version","_extractPropsAndMeasurements","data","properties","measurements","_convertPropsUndefinedToCustomDefinedValue","customUndefinedValue","_createEnvelope","envelopeType","telemetryItem","envelope","startTime","time","iKey","iKeyNoDashes","replace","EnvelopeCreatorInit","DependencyEnvelopeCreator","customMeasurements","customProperties","bd","method","remoteDepData","success","responseCode","type","correlationContext","EventEnvelopeCreator","eventName","eventData","ExceptionEnvelopeCreator","exData","CreateFromInterface","MetricEnvelopeCreator","baseData","props","baseMetricData","average","sampleCount","min","max","stdDev","PageViewEnvelopeCreator","duration","currentContextId","name","url","uri","refUri","pageType","isLoggedIn","pageTags","pageViewData","PageViewPerformanceEnvelopeCreator","undefined","TraceEnvelopeCreator","message","severityLevel"],"sources":["/home/veeresh133/app/json-holder-api/react-az/node_modules/@microsoft/applicationinsights-channel-js/dist-es5/EnvelopeCreator.js"],"sourcesContent":["import { __assign } from \"tslib\";\r\nimport { CtxTagKeys, Data, Envelope, Event, Exception, HttpMethod, Metric, PageView, PageViewPerformance, RemoteDependencyData, SampleRate, Trace, dataSanitizeString } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, _warnToConsole, getJSON, hasJSON, isNullOrUndefined, isNumber, isString, isTruthy, objForEachKey, optimizeObject, setValue, toISOString } from \"@microsoft/applicationinsights-core-js\";\r\nimport { STR_DURATION } from \"./InternalConstants\";\r\nimport { _DYN_DATA, _DYN_DATA_TYPE, _DYN_DEVICE_TYPE, _DYN_ENVELOPE_TYPE, _DYN_LENGTH, _DYN_MEASUREMENTS, _DYN_NAME, _DYN_STRINGIFY, _DYN_TAGS, _DYN_TO_STRING, _DYN_TRACE_ID } from \"./__DynamicConstants\";\r\n// these two constants are used to filter out properties not needed when trying to extract custom properties and measurements from the incoming payload\r\nvar strBaseType = \"baseType\";\r\nvar strBaseData = \"baseData\";\r\nvar strProperties = \"properties\";\r\nvar strTrue = \"true\";\r\nfunction _setValueIf(target, field, value) {\r\n    return setValue(target, field, value, isTruthy);\r\n}\r\n/*\r\n * Maps Part A data from CS 4.0\r\n */\r\nfunction _extractPartAExtensions(logger, item, env) {\r\n    // todo: switch to keys from common in this method\r\n    var envTags = env[_DYN_TAGS /* @min:%2etags */] = env[_DYN_TAGS /* @min:%2etags */] || {};\r\n    var itmExt = item.ext = item.ext || {};\r\n    var itmTags = item[_DYN_TAGS /* @min:%2etags */] = item[_DYN_TAGS /* @min:%2etags */] || [];\r\n    var extUser = itmExt.user;\r\n    if (extUser) {\r\n        _setValueIf(envTags, CtxTagKeys.userAuthUserId, extUser.authId);\r\n        _setValueIf(envTags, CtxTagKeys.userId, extUser.id || extUser.localId);\r\n    }\r\n    var extApp = itmExt.app;\r\n    if (extApp) {\r\n        _setValueIf(envTags, CtxTagKeys.sessionId, extApp.sesId);\r\n    }\r\n    var extDevice = itmExt.device;\r\n    if (extDevice) {\r\n        _setValueIf(envTags, CtxTagKeys.deviceId, extDevice.id || extDevice.localId);\r\n        _setValueIf(envTags, CtxTagKeys[_DYN_DEVICE_TYPE /* @min:%2edeviceType */], extDevice.deviceClass);\r\n        _setValueIf(envTags, CtxTagKeys.deviceIp, extDevice.ip);\r\n        _setValueIf(envTags, CtxTagKeys.deviceModel, extDevice.model);\r\n        _setValueIf(envTags, CtxTagKeys[_DYN_DEVICE_TYPE /* @min:%2edeviceType */], extDevice[_DYN_DEVICE_TYPE /* @min:%2edeviceType */]);\r\n    }\r\n    var web = item.ext.web;\r\n    if (web) {\r\n        _setValueIf(envTags, CtxTagKeys.deviceLanguage, web.browserLang);\r\n        _setValueIf(envTags, CtxTagKeys.deviceBrowserVersion, web.browserVer);\r\n        _setValueIf(envTags, CtxTagKeys.deviceBrowser, web.browser);\r\n        var envData = env[_DYN_DATA /* @min:%2edata */] = env[_DYN_DATA /* @min:%2edata */] || {};\r\n        var envBaseData = envData[strBaseData] = envData[strBaseData] || {};\r\n        var envProps = envBaseData[strProperties] = envBaseData[strProperties] || {};\r\n        _setValueIf(envProps, \"domain\", web.domain);\r\n        _setValueIf(envProps, \"isManual\", web.isManual ? strTrue : null);\r\n        _setValueIf(envProps, \"screenRes\", web.screenRes);\r\n        _setValueIf(envProps, \"userConsent\", web.userConsent ? strTrue : null);\r\n    }\r\n    var extOs = itmExt.os;\r\n    if (extOs) {\r\n        _setValueIf(envTags, CtxTagKeys.deviceOS, extOs[_DYN_NAME /* @min:%2ename */]);\r\n        _setValueIf(envTags, CtxTagKeys.deviceOSVersion, extOs.osVer);\r\n    }\r\n    // No support for mapping Trace.traceState to 2.0 as it is currently empty\r\n    var extTrace = itmExt.trace;\r\n    if (extTrace) {\r\n        _setValueIf(envTags, CtxTagKeys.operationParentId, extTrace.parentID);\r\n        _setValueIf(envTags, CtxTagKeys.operationName, dataSanitizeString(logger, extTrace[_DYN_NAME /* @min:%2ename */]));\r\n        _setValueIf(envTags, CtxTagKeys.operationId, extTrace[_DYN_TRACE_ID /* @min:%2etraceID */]);\r\n    }\r\n    // Sample 4.0 schema\r\n    //  {\r\n    //     \"time\" : \"2018-09-05T22:51:22.4936Z\",\r\n    //     \"name\" : \"MetricWithNamespace\",\r\n    //     \"iKey\" : \"ABC-5a4cbd20-e601-4ef5-a3c6-5d6577e4398e\",\r\n    //     \"ext\": {  \"cloud\": {\r\n    //          \"role\": \"WATSON3\",\r\n    //          \"roleInstance\": \"CO4AEAP00000260\"\r\n    //      },\r\n    //      \"device\": {}, \"correlation\": {} },\r\n    //      \"tags\": [\r\n    //        { \"amazon.region\" : \"east2\" },\r\n    //        { \"os.expid\" : \"wp:02df239\" }\r\n    //     ]\r\n    //   }\r\n    var tgs = {};\r\n    // deals with tags.push({object})\r\n    for (var i = itmTags[_DYN_LENGTH /* @min:%2elength */] - 1; i >= 0; i--) {\r\n        var tg = itmTags[i];\r\n        objForEachKey(tg, function (key, value) {\r\n            tgs[key] = value;\r\n        });\r\n        itmTags.splice(i, 1);\r\n    }\r\n    // deals with tags[key]=value (and handles hasOwnProperty)\r\n    objForEachKey(itmTags, function (tg, value) {\r\n        tgs[tg] = value;\r\n    });\r\n    var theTags = __assign(__assign({}, envTags), tgs);\r\n    if (!theTags[CtxTagKeys.internalSdkVersion]) {\r\n        // Append a version in case it is not already set\r\n        theTags[CtxTagKeys.internalSdkVersion] = dataSanitizeString(logger, \"javascript:\".concat(EnvelopeCreator.Version), 64);\r\n    }\r\n    env[_DYN_TAGS /* @min:%2etags */] = optimizeObject(theTags);\r\n}\r\nfunction _extractPropsAndMeasurements(data, properties, measurements) {\r\n    if (!isNullOrUndefined(data)) {\r\n        objForEachKey(data, function (key, value) {\r\n            if (isNumber(value)) {\r\n                measurements[key] = value;\r\n            }\r\n            else if (isString(value)) {\r\n                properties[key] = value;\r\n            }\r\n            else if (hasJSON()) {\r\n                properties[key] = getJSON()[_DYN_STRINGIFY /* @min:%2estringify */](value);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue) {\r\n    if (!isNullOrUndefined(properties)) {\r\n        objForEachKey(properties, function (key, value) {\r\n            properties[key] = value || customUndefinedValue;\r\n        });\r\n    }\r\n}\r\n// TODO: Do we want this to take logger as arg or use this._logger as nonstatic?\r\nfunction _createEnvelope(logger, envelopeType, telemetryItem, data) {\r\n    var envelope = new Envelope(logger, data, envelopeType);\r\n    _setValueIf(envelope, \"sampleRate\", telemetryItem[SampleRate]);\r\n    if ((telemetryItem[strBaseData] || {}).startTime) {\r\n        // Starting from Version 3.0.3, the time property will be assigned by the startTime value,\r\n        // which records the loadEvent time for the pageView event.\r\n        envelope.time = toISOString(telemetryItem[strBaseData].startTime);\r\n    }\r\n    envelope.iKey = telemetryItem.iKey;\r\n    var iKeyNoDashes = telemetryItem.iKey.replace(/-/g, \"\");\r\n    envelope[_DYN_NAME /* @min:%2ename */] = envelope[_DYN_NAME /* @min:%2ename */].replace(\"{0}\", iKeyNoDashes);\r\n    // extract all extensions from ctx\r\n    _extractPartAExtensions(logger, telemetryItem, envelope);\r\n    // loop through the envelope tags (extension of Part A) and pick out the ones that should go in outgoing envelope tags\r\n    telemetryItem[_DYN_TAGS /* @min:%2etags */] = telemetryItem[_DYN_TAGS /* @min:%2etags */] || [];\r\n    return optimizeObject(envelope);\r\n}\r\nfunction EnvelopeCreatorInit(logger, telemetryItem) {\r\n    if (isNullOrUndefined(telemetryItem[strBaseData])) {\r\n        _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 46 /* _eInternalMessageId.TelemetryEnvelopeInvalid */, \"telemetryItem.baseData cannot be null.\");\r\n    }\r\n}\r\nexport var EnvelopeCreator = {\r\n    Version: '3.3.1'\r\n};\r\nexport function DependencyEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    var customMeasurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    var customProperties = telemetryItem[strBaseData][strProperties] || {};\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], customProperties, customMeasurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);\r\n    }\r\n    var bd = telemetryItem[strBaseData];\r\n    if (isNullOrUndefined(bd)) {\r\n        _warnToConsole(logger, \"Invalid input for dependency data\");\r\n        return null;\r\n    }\r\n    var method = bd[strProperties] && bd[strProperties][HttpMethod] ? bd[strProperties][HttpMethod] : \"GET\";\r\n    var remoteDepData = new RemoteDependencyData(logger, bd.id, bd.target, bd[_DYN_NAME /* @min:%2ename */], bd[STR_DURATION /* @min:%2eduration */], bd.success, bd.responseCode, method, bd.type, bd.correlationContext, customProperties, customMeasurements);\r\n    var data = new Data(RemoteDependencyData[_DYN_DATA_TYPE /* @min:%2edataType */], remoteDepData);\r\n    return _createEnvelope(logger, RemoteDependencyData[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function EventEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    var customProperties = {};\r\n    var customMeasurements = {};\r\n    if (telemetryItem[strBaseType] !== Event[_DYN_DATA_TYPE /* @min:%2edataType */]) {\r\n        customProperties[\"baseTypeSource\"] = telemetryItem[strBaseType]; // save the passed in base type as a property\r\n    }\r\n    if (telemetryItem[strBaseType] === Event[_DYN_DATA_TYPE /* @min:%2edataType */]) { // take collection\r\n        customProperties = telemetryItem[strBaseData][strProperties] || {};\r\n        customMeasurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    }\r\n    else { // if its not a known type, convert to custom event\r\n        if (telemetryItem[strBaseData]) {\r\n            _extractPropsAndMeasurements(telemetryItem[strBaseData], customProperties, customMeasurements);\r\n        }\r\n    }\r\n    // Extract root level properties from part C telemetryItem.data\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], customProperties, customMeasurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);\r\n    }\r\n    var eventName = telemetryItem[strBaseData][_DYN_NAME /* @min:%2ename */];\r\n    var eventData = new Event(logger, eventName, customProperties, customMeasurements);\r\n    var data = new Data(Event[_DYN_DATA_TYPE /* @min:%2edataType */], eventData);\r\n    return _createEnvelope(logger, Event[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function ExceptionEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    // Extract root level properties from part C telemetryItem.data\r\n    var customMeasurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    var customProperties = telemetryItem[strBaseData][strProperties] || {};\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], customProperties, customMeasurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);\r\n    }\r\n    var bd = telemetryItem[strBaseData];\r\n    var exData = Exception.CreateFromInterface(logger, bd, customProperties, customMeasurements);\r\n    var data = new Data(Exception[_DYN_DATA_TYPE /* @min:%2edataType */], exData);\r\n    return _createEnvelope(logger, Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function MetricEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    var baseData = telemetryItem[strBaseData];\r\n    var props = baseData[strProperties] || {};\r\n    var measurements = baseData[_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], props, measurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);\r\n    }\r\n    var baseMetricData = new Metric(logger, baseData[_DYN_NAME /* @min:%2ename */], baseData.average, baseData.sampleCount, baseData.min, baseData.max, baseData.stdDev, props, measurements);\r\n    var data = new Data(Metric[_DYN_DATA_TYPE /* @min:%2edataType */], baseMetricData);\r\n    return _createEnvelope(logger, Metric[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function PageViewEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    // Since duration is not part of the domain properties in Common Schema, extract it from part C\r\n    var duration;\r\n    var baseData = telemetryItem[strBaseData];\r\n    if (!isNullOrUndefined(baseData) &&\r\n        !isNullOrUndefined(baseData[strProperties]) &&\r\n        !isNullOrUndefined(baseData[strProperties][STR_DURATION])) { // from part B properties\r\n        duration = baseData[strProperties][STR_DURATION];\r\n        delete baseData[strProperties][STR_DURATION];\r\n    }\r\n    else if (!isNullOrUndefined(telemetryItem[_DYN_DATA /* @min:%2edata */]) &&\r\n        !isNullOrUndefined(telemetryItem[_DYN_DATA /* @min:%2edata */][STR_DURATION])) { // from custom properties\r\n        duration = telemetryItem[_DYN_DATA /* @min:%2edata */][STR_DURATION];\r\n        delete telemetryItem[_DYN_DATA /* @min:%2edata */][STR_DURATION];\r\n    }\r\n    var bd = telemetryItem[strBaseData];\r\n    // special case: pageview.id is grabbed from current operation id. Analytics plugin is decoupled from properties plugin, so this is done here instead. This can be made a default telemetry intializer instead if needed to be decoupled from channel\r\n    var currentContextId;\r\n    if (((telemetryItem.ext || {}).trace || {})[_DYN_TRACE_ID /* @min:%2etraceID */]) {\r\n        currentContextId = telemetryItem.ext.trace[_DYN_TRACE_ID /* @min:%2etraceID */];\r\n    }\r\n    var id = bd.id || currentContextId;\r\n    var name = bd[_DYN_NAME /* @min:%2ename */];\r\n    var url = bd.uri;\r\n    var properties = bd[strProperties] || {};\r\n    var measurements = bd[_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    // refUri is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n    if (!isNullOrUndefined(bd.refUri)) {\r\n        properties[\"refUri\"] = bd.refUri;\r\n    }\r\n    // pageType is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n    if (!isNullOrUndefined(bd.pageType)) {\r\n        properties[\"pageType\"] = bd.pageType;\r\n    }\r\n    // isLoggedIn is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n    if (!isNullOrUndefined(bd.isLoggedIn)) {\r\n        properties[\"isLoggedIn\"] = bd.isLoggedIn[_DYN_TO_STRING /* @min:%2etoString */]();\r\n    }\r\n    // pageTags is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n    if (!isNullOrUndefined(bd[strProperties])) {\r\n        var pageTags = bd[strProperties];\r\n        objForEachKey(pageTags, function (key, value) {\r\n            properties[key] = value;\r\n        });\r\n    }\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], properties, measurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);\r\n    }\r\n    var pageViewData = new PageView(logger, name, url, duration, properties, measurements, id);\r\n    var data = new Data(PageView[_DYN_DATA_TYPE /* @min:%2edataType */], pageViewData);\r\n    return _createEnvelope(logger, PageView[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function PageViewPerformanceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    var bd = telemetryItem[strBaseData];\r\n    var name = bd[_DYN_NAME /* @min:%2ename */];\r\n    var url = bd.uri || bd.url;\r\n    var properties = bd[strProperties] || {};\r\n    var measurements = bd[_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], properties, measurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);\r\n    }\r\n    var baseData = new PageViewPerformance(logger, name, url, undefined, properties, measurements, bd);\r\n    var data = new Data(PageViewPerformance[_DYN_DATA_TYPE /* @min:%2edataType */], baseData);\r\n    return _createEnvelope(logger, PageViewPerformance[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function TraceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    var message = telemetryItem[strBaseData].message;\r\n    var severityLevel = telemetryItem[strBaseData].severityLevel;\r\n    var props = telemetryItem[strBaseData][strProperties] || {};\r\n    var measurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], props, measurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);\r\n    }\r\n    var baseData = new Trace(logger, message, severityLevel, props, measurements);\r\n    var data = new Data(Trace[_DYN_DATA_TYPE /* @min:%2edataType */], baseData);\r\n    return _createEnvelope(logger, Trace[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\n//# sourceMappingURL=EnvelopeCreator.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}