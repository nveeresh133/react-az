{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Common, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { arrForEach, createUniqueNamespace, eventOff, eventOn, getDocument, getNavigator, getWindow, isNullOrUndefined, isUndefined, mergeEvtNamespace } from \"@microsoft/applicationinsights-core-js\";\nimport { _DYN_PUSH } from \"./__DynamicConstants\";\nfunction _disableEvents(target, evtNamespace) {\n  eventOff(target, null, null, evtNamespace);\n}\n/**\r\n * Create a new OfflineListener instance to monitor browser online / offline events\r\n * @param parentEvtNamespace - The parent event namespace to append to any specific events for this instance\r\n */\nexport function createOfflineListener(parentEvtNamespace) {\n  var _document = getDocument();\n  var _navigator = getNavigator(); // Gets the window.navigator or workerNavigator depending on the global\n  var _isListening = false;\n  var listenerList = [];\n  // Set the initial state\n  // rState is changed by the browser, both via events and when we check the navigator.onLine property\n  var rState = 1 /* eOfflineValue.Online */;\n  if (_navigator && !isNullOrUndefined(_navigator.onLine) && !_navigator.onLine) {\n    // navigator.onLine is undefined in react-native\n    rState = 2 /* eOfflineValue.Offline */;\n  }\n  // ustate is changed by the user calling setOnlineState\n  var uState = 0 /* eOfflineValue.Unknown */;\n  // current state would be updated each time rState or uState is changed\n  // it is a resolved value of rState and uState\n  var _currentState = calCurrentState();\n  var _evtNamespace = mergeEvtNamespace(createUniqueNamespace(\"OfflineListener\"), parentEvtNamespace);\n  try {\n    if (_enableEvents(getWindow())) {\n      _isListening = true;\n    }\n    if (_document) {\n      // Also attach to the document.body or document\n      var target = _document.body || _document;\n      if (target.ononline) {\n        if (_enableEvents(target)) {\n          _isListening = true;\n        }\n      }\n    }\n  } catch (e) {\n    // this makes react-native less angry\n    _isListening = false;\n  }\n  function _enableEvents(target) {\n    var enabled = false;\n    if (target) {\n      enabled = eventOn(target, \"online\", _setOnline, _evtNamespace);\n      if (enabled) {\n        eventOn(target, \"offline\", _setOffline, _evtNamespace);\n      }\n    }\n    return enabled;\n  }\n  function _isOnline() {\n    return _currentState;\n  }\n  function calCurrentState() {\n    if (uState === 2 /* eOfflineValue.Offline */ || rState === 2 /* eOfflineValue.Offline */) {\n      return false;\n    }\n    return true; // if both unknown, then we assume the network is good\n  }\n  function listnerNoticeCheck() {\n    // we were offline and are now online or we were online and now offline\n    var newState = calCurrentState();\n    if (_currentState !== newState) {\n      _currentState = newState; // use the resolved state to update\n      // send all the callbacks with the current state\n      arrForEach(listenerList, function (callback) {\n        var offlineState = {\n          isOnline: _currentState,\n          rState: rState,\n          uState: uState\n        };\n        try {\n          callback(offlineState);\n        } catch (e) {\n          // Do nothing, just making sure we run all of the callbacks\n        }\n      });\n    }\n  }\n  function setOnlineState(newState) {\n    uState = newState;\n    listnerNoticeCheck();\n  }\n  function _setOnline() {\n    rState = 1 /* eOfflineValue.Online */;\n    listnerNoticeCheck();\n  }\n  function _setOffline() {\n    rState = 2 /* eOfflineValue.Offline */;\n    listnerNoticeCheck();\n  }\n  function _unload() {\n    var win = getWindow();\n    if (win && _isListening) {\n      _disableEvents(win, _evtNamespace);\n      if (_document) {\n        // Also attach to the document.body or document\n        var target = _document.body || _document;\n        if (!isUndefined(target.ononline)) {\n          _disableEvents(target, _evtNamespace);\n        }\n      }\n      _isListening = false;\n    }\n  }\n  function addListener(callback) {\n    listenerList[_DYN_PUSH /* @min:%2epush */](callback);\n    // Define rm as an instance of IUnloadHook\n    return {\n      rm: function () {\n        var index = listenerList.indexOf(callback);\n        if (index > -1) {\n          return listenerList.splice(index, 1);\n        } else {\n          return;\n        }\n      }\n    };\n  }\n  return {\n    isOnline: _isOnline,\n    isListening: function () {\n      return _isListening;\n    },\n    unload: _unload,\n    addListener: addListener,\n    setOnlineState: setOnlineState\n  };\n}","map":{"version":3,"names":["arrForEach","createUniqueNamespace","eventOff","eventOn","getDocument","getNavigator","getWindow","isNullOrUndefined","isUndefined","mergeEvtNamespace","_DYN_PUSH","_disableEvents","target","evtNamespace","createOfflineListener","parentEvtNamespace","_document","_navigator","_isListening","listenerList","rState","onLine","uState","_currentState","calCurrentState","_evtNamespace","_enableEvents","body","ononline","e","enabled","_setOnline","_setOffline","_isOnline","listnerNoticeCheck","newState","callback","offlineState","isOnline","setOnlineState","_unload","win","addListener","rm","index","indexOf","splice","isListening","unload"],"sources":["/home/veeresh133/app/json-holder-api/react-az/node_modules/@microsoft/applicationinsights-common/dist-es5/Offline.js"],"sourcesContent":["import { arrForEach, createUniqueNamespace, eventOff, eventOn, getDocument, getNavigator, getWindow, isNullOrUndefined, isUndefined, mergeEvtNamespace } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_PUSH } from \"./__DynamicConstants\";\r\nfunction _disableEvents(target, evtNamespace) {\r\n    eventOff(target, null, null, evtNamespace);\r\n}\r\n/**\r\n * Create a new OfflineListener instance to monitor browser online / offline events\r\n * @param parentEvtNamespace - The parent event namespace to append to any specific events for this instance\r\n */\r\nexport function createOfflineListener(parentEvtNamespace) {\r\n    var _document = getDocument();\r\n    var _navigator = getNavigator(); // Gets the window.navigator or workerNavigator depending on the global\r\n    var _isListening = false;\r\n    var listenerList = [];\r\n    // Set the initial state\r\n    // rState is changed by the browser, both via events and when we check the navigator.onLine property\r\n    var rState = 1 /* eOfflineValue.Online */;\r\n    if (_navigator && !isNullOrUndefined(_navigator.onLine) && !_navigator.onLine) { // navigator.onLine is undefined in react-native\r\n        rState = 2 /* eOfflineValue.Offline */;\r\n    }\r\n    // ustate is changed by the user calling setOnlineState\r\n    var uState = 0 /* eOfflineValue.Unknown */;\r\n    // current state would be updated each time rState or uState is changed\r\n    // it is a resolved value of rState and uState\r\n    var _currentState = calCurrentState();\r\n    var _evtNamespace = mergeEvtNamespace(createUniqueNamespace(\"OfflineListener\"), parentEvtNamespace);\r\n    try {\r\n        if (_enableEvents(getWindow())) {\r\n            _isListening = true;\r\n        }\r\n        if (_document) {\r\n            // Also attach to the document.body or document\r\n            var target = _document.body || _document;\r\n            if (target.ononline) {\r\n                if (_enableEvents(target)) {\r\n                    _isListening = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        // this makes react-native less angry\r\n        _isListening = false;\r\n    }\r\n    function _enableEvents(target) {\r\n        var enabled = false;\r\n        if (target) {\r\n            enabled = eventOn(target, \"online\", _setOnline, _evtNamespace);\r\n            if (enabled) {\r\n                eventOn(target, \"offline\", _setOffline, _evtNamespace);\r\n            }\r\n        }\r\n        return enabled;\r\n    }\r\n    function _isOnline() {\r\n        return _currentState;\r\n    }\r\n    function calCurrentState() {\r\n        if (uState === 2 /* eOfflineValue.Offline */ || rState === 2 /* eOfflineValue.Offline */) {\r\n            return false;\r\n        }\r\n        return true; // if both unknown, then we assume the network is good\r\n    }\r\n    function listnerNoticeCheck() {\r\n        // we were offline and are now online or we were online and now offline\r\n        var newState = calCurrentState();\r\n        if (_currentState !== newState) {\r\n            _currentState = newState; // use the resolved state to update\r\n            // send all the callbacks with the current state\r\n            arrForEach(listenerList, function (callback) {\r\n                var offlineState = {\r\n                    isOnline: _currentState,\r\n                    rState: rState,\r\n                    uState: uState\r\n                };\r\n                try {\r\n                    callback(offlineState);\r\n                }\r\n                catch (e) {\r\n                    // Do nothing, just making sure we run all of the callbacks\r\n                }\r\n            });\r\n        }\r\n    }\r\n    function setOnlineState(newState) {\r\n        uState = newState;\r\n        listnerNoticeCheck();\r\n    }\r\n    function _setOnline() {\r\n        rState = 1 /* eOfflineValue.Online */;\r\n        listnerNoticeCheck();\r\n    }\r\n    function _setOffline() {\r\n        rState = 2 /* eOfflineValue.Offline */;\r\n        listnerNoticeCheck();\r\n    }\r\n    function _unload() {\r\n        var win = getWindow();\r\n        if (win && _isListening) {\r\n            _disableEvents(win, _evtNamespace);\r\n            if (_document) {\r\n                // Also attach to the document.body or document\r\n                var target = _document.body || _document;\r\n                if (!isUndefined(target.ononline)) {\r\n                    _disableEvents(target, _evtNamespace);\r\n                }\r\n            }\r\n            _isListening = false;\r\n        }\r\n    }\r\n    function addListener(callback) {\r\n        listenerList[_DYN_PUSH /* @min:%2epush */](callback);\r\n        // Define rm as an instance of IUnloadHook\r\n        return {\r\n            rm: function () {\r\n                var index = listenerList.indexOf(callback);\r\n                if (index > -1) {\r\n                    return listenerList.splice(index, 1);\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n    }\r\n    return {\r\n        isOnline: _isOnline,\r\n        isListening: function () { return _isListening; },\r\n        unload: _unload,\r\n        addListener: addListener,\r\n        setOnlineState: setOnlineState\r\n    };\r\n}\r\n//# sourceMappingURL=Offline.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}