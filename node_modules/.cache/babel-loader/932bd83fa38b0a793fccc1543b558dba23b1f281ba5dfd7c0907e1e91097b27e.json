{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Web Analytics, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { dateTimeUtilsDuration } from \"@microsoft/applicationinsights-common\";\nimport { _throwInternal, arrForEach, dumpObj, getDocument, getExceptionName, getLocation, isNullOrUndefined } from \"@microsoft/applicationinsights-core-js\";\nimport { getPerformance, isUndefined, isWebWorker, scheduleTimeout } from \"@nevware21/ts-utils\";\nimport { _DYN_DURATION, _DYN_GET_ENTRIES_BY_TYPE, _DYN_GET_PERFORMANCE_TIMI15, _DYN_HREF, _DYN_IS_PERFORMANCE_TIMIN14, _DYN_IS_PERFORMANCE_TIMIN17, _DYN_LENGTH, _DYN_NAVIGATION_START, _DYN_POPULATE_PAGE_VIEW_P4, _DYN_PROPERTIES, _DYN_SEND_PAGE_VIEW_INTER2, _DYN_SEND_PAGE_VIEW_PERFO3, _DYN_SHOULD_COLLECT_DURAT16, _DYN_START_TIME, _DYN_TRACK_PAGE_VIEW } from \"../../__DynamicConstants\";\n/**\r\n * Class encapsulates sending page views and page view performance telemetry.\r\n */\nvar PageViewManager = /** @class */function () {\n  function PageViewManager(appInsights, overridePageViewDuration, core, pageViewPerformanceManager) {\n    dynamicProto(PageViewManager, this, function (_self) {\n      var queueTimer = null;\n      var itemQueue = [];\n      var pageViewPerformanceSent = false;\n      var firstPageViewSent = false;\n      var _logger;\n      if (core) {\n        _logger = core.logger;\n      }\n      function _flushChannels(isAsync) {\n        if (core) {\n          core.flush(isAsync, function () {\n            // Event flushed, callback added to prevent promise creation\n          });\n        }\n      }\n      function _startTimer() {\n        if (!queueTimer) {\n          queueTimer = scheduleTimeout(function () {\n            queueTimer = null;\n            var allItems = itemQueue.slice(0);\n            var doFlush = false;\n            itemQueue = [];\n            arrForEach(allItems, function (item) {\n              if (!item()) {\n                // Not processed so rescheduled\n                itemQueue.push(item);\n              } else {\n                doFlush = true;\n              }\n            });\n            if (itemQueue[_DYN_LENGTH /* @min:%2elength */] > 0) {\n              _startTimer();\n            }\n            if (doFlush) {\n              // We process at least one item so flush the queue\n              _flushChannels(true);\n            }\n          }, 100);\n        }\n      }\n      function _addQueue(cb) {\n        itemQueue.push(cb);\n        _startTimer();\n      }\n      _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (pageView, customProperties) {\n        var name = pageView.name;\n        if (isNullOrUndefined(name) || typeof name !== \"string\") {\n          var doc = getDocument();\n          name = pageView.name = doc && doc.title || \"\";\n        }\n        var uri = pageView.uri;\n        if (isNullOrUndefined(uri) || typeof uri !== \"string\") {\n          var location_1 = getLocation();\n          uri = pageView.uri = location_1 && location_1[_DYN_HREF /* @min:%2ehref */] || \"\";\n        }\n        if (!firstPageViewSent) {\n          var perf = getPerformance();\n          // Access the performance timing object\n          var navigationEntries = perf && perf[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */] && perf[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */](\"navigation\");\n          // Edge Case the navigation Entries may return an empty array and the timeOrigin is not supported on IE\n          if (navigationEntries && navigationEntries[0] && !isUndefined(perf.timeOrigin)) {\n            // Get the value of loadEventStart\n            var loadEventStart = navigationEntries[0].loadEventStart;\n            pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(perf.timeOrigin + loadEventStart);\n          } else {\n            // calculate the start time manually\n            var duration_1 = (customProperties || pageView[_DYN_PROPERTIES /* @min:%2eproperties */] || {})[_DYN_DURATION /* @min:%2eduration */] || 0;\n            pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(new Date().getTime() - duration_1);\n          }\n          firstPageViewSent = true;\n        }\n        // case 1a. if performance timing is not supported by the browser, send the page view telemetry with the duration provided by the user. If the user\n        // do not provide the duration, set duration to undefined\n        // Also this is case 4\n        if (!pageViewPerformanceManager[_DYN_IS_PERFORMANCE_TIMIN14 /* @min:%2eisPerformanceTimingSupported */]()) {\n          appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\n          _flushChannels(true);\n          if (!isWebWorker()) {\n            // no navigation timing (IE 8, iOS Safari 8.4, Opera Mini 8 - see http://caniuse.com/#feat=nav-timing)\n            _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 25 /* _eInternalMessageId.NavigationTimingNotSupported */, \"trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.\");\n          }\n          return;\n        }\n        var pageViewSent = false;\n        var customDuration;\n        // if the performance timing is supported by the browser, calculate the custom duration\n        var start = pageViewPerformanceManager[_DYN_GET_PERFORMANCE_TIMI15 /* @min:%2egetPerformanceTiming */]()[_DYN_NAVIGATION_START /* @min:%2enavigationStart */];\n        if (start > 0) {\n          customDuration = dateTimeUtilsDuration(start, +new Date());\n          if (!pageViewPerformanceManager[_DYN_SHOULD_COLLECT_DURAT16 /* @min:%2eshouldCollectDuration */](customDuration)) {\n            customDuration = undefined;\n          }\n        }\n        // if the user has provided duration, send a page view telemetry with the provided duration. Otherwise, if\n        // overridePageViewDuration is set to true, send a page view telemetry with the custom duration calculated earlier\n        var duration;\n        if (!isNullOrUndefined(customProperties) && !isNullOrUndefined(customProperties[_DYN_DURATION /* @min:%2eduration */])) {\n          duration = customProperties[_DYN_DURATION /* @min:%2eduration */];\n        }\n        if (overridePageViewDuration || !isNaN(duration)) {\n          if (isNaN(duration)) {\n            // case 3\n            if (!customProperties) {\n              customProperties = {};\n            }\n            customProperties[_DYN_DURATION /* @min:%2eduration */] = customDuration;\n          }\n          // case 2\n          appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\n          _flushChannels(true);\n          pageViewSent = true;\n        }\n        // now try to send the page view performance telemetry\n        var maxDurationLimit = 60000;\n        if (!customProperties) {\n          customProperties = {};\n        }\n        // Queue the event for processing\n        _addQueue(function () {\n          var processed = false;\n          try {\n            if (pageViewPerformanceManager[_DYN_IS_PERFORMANCE_TIMIN17 /* @min:%2eisPerformanceTimingDataReady */]()) {\n              processed = true;\n              var pageViewPerformance = {\n                name: name,\n                uri: uri\n              };\n              pageViewPerformanceManager[_DYN_POPULATE_PAGE_VIEW_P4 /* @min:%2epopulatePageViewPerformanceEvent */](pageViewPerformance);\n              if (!pageViewPerformance.isValid && !pageViewSent) {\n                // If navigation timing gives invalid numbers, then go back to \"override page view duration\" mode.\n                // That's the best value we can get that makes sense.\n                customProperties[_DYN_DURATION /* @min:%2eduration */] = customDuration;\n                appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\n              } else {\n                if (!pageViewSent) {\n                  customProperties[_DYN_DURATION /* @min:%2eduration */] = pageViewPerformance.durationMs;\n                  appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\n                }\n                if (!pageViewPerformanceSent) {\n                  appInsights[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */](pageViewPerformance, customProperties);\n                  pageViewPerformanceSent = true;\n                }\n              }\n            } else if (start > 0 && dateTimeUtilsDuration(start, +new Date()) > maxDurationLimit) {\n              // if performance timings are not ready but we exceeded the maximum duration limit, just log a page view telemetry\n              // with the maximum duration limit. Otherwise, keep waiting until performance timings are ready\n              processed = true;\n              if (!pageViewSent) {\n                customProperties[_DYN_DURATION /* @min:%2eduration */] = maxDurationLimit;\n                appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\n              }\n            }\n          } catch (e) {\n            _throwInternal(_logger, 1 /* eLoggingSeverity.CRITICAL */, 38 /* _eInternalMessageId.TrackPVFailedCalc */, \"trackPageView failed on page load calculation: \" + getExceptionName(e), {\n              exception: dumpObj(e)\n            });\n          }\n          return processed;\n        });\n      };\n      _self.teardown = function (unloadCtx, unloadState) {\n        if (queueTimer) {\n          queueTimer.cancel();\n          queueTimer = null;\n          var allItems = itemQueue.slice(0);\n          var doFlush_1 = false;\n          itemQueue = [];\n          arrForEach(allItems, function (item) {\n            if (item()) {\n              doFlush_1 = true;\n            }\n          });\n        }\n      };\n    });\n  }\n  // Removed Stub for PageViewManager.prototype.trackPageView.\n  // Removed Stub for PageViewManager.prototype.teardown.\n  // This is a workaround for an IE bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  PageViewManager.__ieDyn = 1;\n  return PageViewManager;\n}();\nexport { PageViewManager };","map":{"version":3,"names":["dynamicProto","dateTimeUtilsDuration","_throwInternal","arrForEach","dumpObj","getDocument","getExceptionName","getLocation","isNullOrUndefined","getPerformance","isUndefined","isWebWorker","scheduleTimeout","_DYN_DURATION","_DYN_GET_ENTRIES_BY_TYPE","_DYN_GET_PERFORMANCE_TIMI15","_DYN_HREF","_DYN_IS_PERFORMANCE_TIMIN14","_DYN_IS_PERFORMANCE_TIMIN17","_DYN_LENGTH","_DYN_NAVIGATION_START","_DYN_POPULATE_PAGE_VIEW_P4","_DYN_PROPERTIES","_DYN_SEND_PAGE_VIEW_INTER2","_DYN_SEND_PAGE_VIEW_PERFO3","_DYN_SHOULD_COLLECT_DURAT16","_DYN_START_TIME","_DYN_TRACK_PAGE_VIEW","PageViewManager","appInsights","overridePageViewDuration","core","pageViewPerformanceManager","_self","queueTimer","itemQueue","pageViewPerformanceSent","firstPageViewSent","_logger","logger","_flushChannels","isAsync","flush","_startTimer","allItems","slice","doFlush","item","push","_addQueue","cb","pageView","customProperties","name","doc","title","uri","location_1","perf","navigationEntries","timeOrigin","loadEventStart","Date","duration_1","getTime","pageViewSent","customDuration","start","undefined","duration","isNaN","maxDurationLimit","processed","pageViewPerformance","isValid","durationMs","e","exception","teardown","unloadCtx","unloadState","cancel","doFlush_1"],"sources":["/home/veeresh133/app/react-az/node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Telemetry/PageViewManager.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { dateTimeUtilsDuration } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, arrForEach, dumpObj, getDocument, getExceptionName, getLocation, isNullOrUndefined } from \"@microsoft/applicationinsights-core-js\";\r\nimport { getPerformance, isUndefined, isWebWorker, scheduleTimeout } from \"@nevware21/ts-utils\";\r\nimport { _DYN_DURATION, _DYN_GET_ENTRIES_BY_TYPE, _DYN_GET_PERFORMANCE_TIMI15, _DYN_HREF, _DYN_IS_PERFORMANCE_TIMIN14, _DYN_IS_PERFORMANCE_TIMIN17, _DYN_LENGTH, _DYN_NAVIGATION_START, _DYN_POPULATE_PAGE_VIEW_P4, _DYN_PROPERTIES, _DYN_SEND_PAGE_VIEW_INTER2, _DYN_SEND_PAGE_VIEW_PERFO3, _DYN_SHOULD_COLLECT_DURAT16, _DYN_START_TIME, _DYN_TRACK_PAGE_VIEW } from \"../../__DynamicConstants\";\r\n/**\r\n * Class encapsulates sending page views and page view performance telemetry.\r\n */\r\nvar PageViewManager = /** @class */ (function () {\r\n    function PageViewManager(appInsights, overridePageViewDuration, core, pageViewPerformanceManager) {\r\n        dynamicProto(PageViewManager, this, function (_self) {\r\n            var queueTimer = null;\r\n            var itemQueue = [];\r\n            var pageViewPerformanceSent = false;\r\n            var firstPageViewSent = false;\r\n            var _logger;\r\n            if (core) {\r\n                _logger = core.logger;\r\n            }\r\n            function _flushChannels(isAsync) {\r\n                if (core) {\r\n                    core.flush(isAsync, function () {\r\n                        // Event flushed, callback added to prevent promise creation\r\n                    });\r\n                }\r\n            }\r\n            function _startTimer() {\r\n                if (!queueTimer) {\r\n                    queueTimer = scheduleTimeout((function () {\r\n                        queueTimer = null;\r\n                        var allItems = itemQueue.slice(0);\r\n                        var doFlush = false;\r\n                        itemQueue = [];\r\n                        arrForEach(allItems, function (item) {\r\n                            if (!item()) {\r\n                                // Not processed so rescheduled\r\n                                itemQueue.push(item);\r\n                            }\r\n                            else {\r\n                                doFlush = true;\r\n                            }\r\n                        });\r\n                        if (itemQueue[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                            _startTimer();\r\n                        }\r\n                        if (doFlush) {\r\n                            // We process at least one item so flush the queue\r\n                            _flushChannels(true);\r\n                        }\r\n                    }), 100);\r\n                }\r\n            }\r\n            function _addQueue(cb) {\r\n                itemQueue.push(cb);\r\n                _startTimer();\r\n            }\r\n            _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (pageView, customProperties) {\r\n                var name = pageView.name;\r\n                if (isNullOrUndefined(name) || typeof name !== \"string\") {\r\n                    var doc = getDocument();\r\n                    name = pageView.name = doc && doc.title || \"\";\r\n                }\r\n                var uri = pageView.uri;\r\n                if (isNullOrUndefined(uri) || typeof uri !== \"string\") {\r\n                    var location_1 = getLocation();\r\n                    uri = pageView.uri = location_1 && location_1[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                }\r\n                if (!firstPageViewSent) {\r\n                    var perf = getPerformance();\r\n                    // Access the performance timing object\r\n                    var navigationEntries = (perf && perf[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */] && perf[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */](\"navigation\"));\r\n                    // Edge Case the navigation Entries may return an empty array and the timeOrigin is not supported on IE\r\n                    if (navigationEntries && navigationEntries[0] && !isUndefined(perf.timeOrigin)) {\r\n                        // Get the value of loadEventStart\r\n                        var loadEventStart = navigationEntries[0].loadEventStart;\r\n                        pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(perf.timeOrigin + loadEventStart);\r\n                    }\r\n                    else {\r\n                        // calculate the start time manually\r\n                        var duration_1 = ((customProperties || pageView[_DYN_PROPERTIES /* @min:%2eproperties */] || {})[_DYN_DURATION /* @min:%2eduration */] || 0);\r\n                        pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(new Date().getTime() - duration_1);\r\n                    }\r\n                    firstPageViewSent = true;\r\n                }\r\n                // case 1a. if performance timing is not supported by the browser, send the page view telemetry with the duration provided by the user. If the user\r\n                // do not provide the duration, set duration to undefined\r\n                // Also this is case 4\r\n                if (!pageViewPerformanceManager[_DYN_IS_PERFORMANCE_TIMIN14 /* @min:%2eisPerformanceTimingSupported */]()) {\r\n                    appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                    _flushChannels(true);\r\n                    if (!isWebWorker()) {\r\n                        // no navigation timing (IE 8, iOS Safari 8.4, Opera Mini 8 - see http://caniuse.com/#feat=nav-timing)\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 25 /* _eInternalMessageId.NavigationTimingNotSupported */, \"trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.\");\r\n                    }\r\n                    return;\r\n                }\r\n                var pageViewSent = false;\r\n                var customDuration;\r\n                // if the performance timing is supported by the browser, calculate the custom duration\r\n                var start = pageViewPerformanceManager[_DYN_GET_PERFORMANCE_TIMI15 /* @min:%2egetPerformanceTiming */]()[_DYN_NAVIGATION_START /* @min:%2enavigationStart */];\r\n                if (start > 0) {\r\n                    customDuration = dateTimeUtilsDuration(start, +new Date);\r\n                    if (!pageViewPerformanceManager[_DYN_SHOULD_COLLECT_DURAT16 /* @min:%2eshouldCollectDuration */](customDuration)) {\r\n                        customDuration = undefined;\r\n                    }\r\n                }\r\n                // if the user has provided duration, send a page view telemetry with the provided duration. Otherwise, if\r\n                // overridePageViewDuration is set to true, send a page view telemetry with the custom duration calculated earlier\r\n                var duration;\r\n                if (!isNullOrUndefined(customProperties) &&\r\n                    !isNullOrUndefined(customProperties[_DYN_DURATION /* @min:%2eduration */])) {\r\n                    duration = customProperties[_DYN_DURATION /* @min:%2eduration */];\r\n                }\r\n                if (overridePageViewDuration || !isNaN(duration)) {\r\n                    if (isNaN(duration)) {\r\n                        // case 3\r\n                        if (!customProperties) {\r\n                            customProperties = {};\r\n                        }\r\n                        customProperties[_DYN_DURATION /* @min:%2eduration */] = customDuration;\r\n                    }\r\n                    // case 2\r\n                    appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                    _flushChannels(true);\r\n                    pageViewSent = true;\r\n                }\r\n                // now try to send the page view performance telemetry\r\n                var maxDurationLimit = 60000;\r\n                if (!customProperties) {\r\n                    customProperties = {};\r\n                }\r\n                // Queue the event for processing\r\n                _addQueue(function () {\r\n                    var processed = false;\r\n                    try {\r\n                        if (pageViewPerformanceManager[_DYN_IS_PERFORMANCE_TIMIN17 /* @min:%2eisPerformanceTimingDataReady */]()) {\r\n                            processed = true;\r\n                            var pageViewPerformance = {\r\n                                name: name,\r\n                                uri: uri\r\n                            };\r\n                            pageViewPerformanceManager[_DYN_POPULATE_PAGE_VIEW_P4 /* @min:%2epopulatePageViewPerformanceEvent */](pageViewPerformance);\r\n                            if (!pageViewPerformance.isValid && !pageViewSent) {\r\n                                // If navigation timing gives invalid numbers, then go back to \"override page view duration\" mode.\r\n                                // That's the best value we can get that makes sense.\r\n                                customProperties[_DYN_DURATION /* @min:%2eduration */] = customDuration;\r\n                                appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                            }\r\n                            else {\r\n                                if (!pageViewSent) {\r\n                                    customProperties[_DYN_DURATION /* @min:%2eduration */] = pageViewPerformance.durationMs;\r\n                                    appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                                }\r\n                                if (!pageViewPerformanceSent) {\r\n                                    appInsights[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */](pageViewPerformance, customProperties);\r\n                                    pageViewPerformanceSent = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (start > 0 && dateTimeUtilsDuration(start, +new Date) > maxDurationLimit) {\r\n                            // if performance timings are not ready but we exceeded the maximum duration limit, just log a page view telemetry\r\n                            // with the maximum duration limit. Otherwise, keep waiting until performance timings are ready\r\n                            processed = true;\r\n                            if (!pageViewSent) {\r\n                                customProperties[_DYN_DURATION /* @min:%2eduration */] = maxDurationLimit;\r\n                                appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(_logger, 1 /* eLoggingSeverity.CRITICAL */, 38 /* _eInternalMessageId.TrackPVFailedCalc */, \"trackPageView failed on page load calculation: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                    }\r\n                    return processed;\r\n                });\r\n            };\r\n            _self.teardown = function (unloadCtx, unloadState) {\r\n                if (queueTimer) {\r\n                    queueTimer.cancel();\r\n                    queueTimer = null;\r\n                    var allItems = itemQueue.slice(0);\r\n                    var doFlush_1 = false;\r\n                    itemQueue = [];\r\n                    arrForEach(allItems, function (item) {\r\n                        if (item()) {\r\n                            doFlush_1 = true;\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Currently supported cases:\r\n     * 1) (default case) track page view called with default parameters, overridePageViewDuration = false. Page view is sent with page view performance when navigation timing data is available.\r\n     *    a. If navigation timing is not supported then page view is sent right away with undefined duration. Page view performance is not sent.\r\n     * 2) overridePageViewDuration = true, custom duration provided. Custom duration is used, page view sends right away.\r\n     * 3) overridePageViewDuration = true, custom duration NOT provided. Page view is sent right away, duration is time spent from page load till now (or undefined if navigation timing is not supported).\r\n     * 4) overridePageViewDuration = false, custom duration is provided. Page view is sent right away with custom duration.\r\n     *\r\n     * In all cases page view performance is sent once (only for the 1st call of trackPageView), or not sent if navigation timing is not supported.\r\n     */\r\n    PageViewManager.prototype.trackPageView = function (pageView, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    PageViewManager.prototype.teardown = function (unloadCtx, unloadState) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return PageViewManager;\r\n}());\r\nexport { PageViewManager };\r\n//# sourceMappingURL=PageViewManager.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}