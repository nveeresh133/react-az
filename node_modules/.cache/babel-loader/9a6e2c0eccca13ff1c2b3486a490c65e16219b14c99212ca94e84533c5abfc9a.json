{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Dependencies Plugin, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { Extensions, dataSanitizeUrl, dateTimeUtilsDuration, msToTimeSpan, urlGetAbsoluteUrl, urlGetCompleteUrl } from \"@microsoft/applicationinsights-common\";\nimport { arrForEach, isNullOrUndefined, isNumber, isString, normalizeJsName, objForEachKey, objKeys } from \"@microsoft/applicationinsights-core-js\";\nimport { STR_DURATION, STR_PROPERTIES } from \"./InternalConstants\";\nimport { _DYN_ABORTED, _DYN_ABORT_DONE, _DYN_AJAX_TOTAL_DURATION, _DYN_CORRELATION_CONTEXT, _DYN_ERROR_STATUS_TEXT, _DYN_EVENT_TRACE_CTX, _DYN_GET_ABSOLUTE_URL, _DYN_GET_PART_APROPS, _DYN_GET_TRACE_FLAGS, _DYN_GET_TRACE_ID, _DYN_HEADER_MAP, _DYN_LENGTH, _DYN_METHOD, _DYN_NAME, _DYN_OPEN_DONE, _DYN_PERF_MARK, _DYN_PERF_TIMING, _DYN_REQUEST_HEADERS, _DYN_REQUEST_SENT_TIME, _DYN_REQUEST_URL, _DYN_RESPONSE, _DYN_RESPONSE_FINISHED_TI14, _DYN_SEND_DONE, _DYN_SPAN_ID, _DYN_SPAN_ID1, _DYN_START_TIME, _DYN_STATE_CHANGE_ATTACHE13, _DYN_STATUS, _DYN_STATUS_TEXT, _DYN_TRACE_FLAGS, _DYN_TRACE_ID, _DYN_TRACE_ID0, _DYN__CREATE_TRACK_ITEM } from \"./__DynamicConstants\";\n/** @ignore */\nfunction _calcPerfDuration(resourceEntry, start, end) {\n  var result = 0;\n  var from = resourceEntry[start];\n  var to = resourceEntry[end];\n  if (from && to) {\n    result = dateTimeUtilsDuration(from, to);\n  }\n  return result;\n}\n/** @ignore */\nfunction _setPerfDuration(props, name, resourceEntry, start, end) {\n  var result = 0;\n  var value = _calcPerfDuration(resourceEntry, start, end);\n  if (value) {\n    result = _setPerfValue(props, name, msToTimeSpan(value));\n  }\n  return result;\n}\n/** @ignore */\nfunction _setPerfValue(props, name, value) {\n  var strPerf = \"ajaxPerf\";\n  var result = 0;\n  if (props && name && value) {\n    var perfData = props[strPerf] = props[strPerf] || {};\n    perfData[name] = value;\n    result = 1;\n  }\n  return result;\n}\n/** @ignore */\nfunction _populatePerfData(ajaxData, dependency) {\n  /*\r\n  * https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API/Using_the_Resource_Timing_API\r\n  *  | -startTime\r\n  *  | -redirectStart\r\n  *  |            | -redirectEnd\r\n  *  |            | | -fetchStart\r\n  *  |            | |   | -domainLookupStart\r\n  *  |            | |   |                |- domainLookupEnd\r\n  *  |            | |   |                | | -connectStart\r\n  *  |            | |   |                | |  | -secureConnectionStart\r\n  *  |            | |   |                | |  |        | -connectEnd\r\n  *  |            | |   |                | |  |        | | -requestStart\r\n  *  |            | |   |                | |  |        | |           | | -responseStart\r\n  *  |            | |   |                | |  |        | |           | |            | | -responseEnd\r\n  *  +------------+-+---+----------------+-+--+--------+-+-----------+-+------------+-+\r\n  *  |--redirect--| |---|--domainLookup--| |--connect--| |--request--| |--response--| |\r\n  *  |-------------------networkConnect----------------|\r\n  *  |                                                   |---------sentRequest--------|\r\n  *  |------------------------------------perfTotal-----------------------------------|\r\n  */\n  var resourceEntry = ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */];\n  var props = dependency[STR_PROPERTIES /* @min:%2eproperties */] || {};\n  var propsSet = 0;\n  var strName = \"name\";\n  var strStart = \"Start\";\n  var strEnd = \"End\";\n  var strDomainLookup = \"domainLookup\";\n  var strConnect = \"connect\";\n  var strRedirect = \"redirect\";\n  var strRequest = \"request\";\n  var strResponse = \"response\";\n  var strStartTime = \"startTime\";\n  var strDomainLookupStart = strDomainLookup + strStart;\n  var strDomainLookupEnd = strDomainLookup + strEnd;\n  var strConnectStart = strConnect + strStart;\n  var strConnectEnd = strConnect + strEnd;\n  var strRequestStart = strRequest + strStart;\n  var strRequestEnd = strRequest + strEnd;\n  var strResponseStart = strResponse + strStart;\n  var strResponseEnd = strResponse + strEnd;\n  var strRedirectStart = strRedirect + strStart;\n  var strRedirectEnd = strRedirect = strEnd;\n  var strTransferSize = \"transferSize\";\n  var strEncodedBodySize = \"encodedBodySize\";\n  var strDecodedBodySize = \"decodedBodySize\";\n  var strServerTiming = \"serverTiming\";\n  if (resourceEntry) {\n    // redirect\n    propsSet |= _setPerfDuration(props, strRedirect, resourceEntry, strRedirectStart, strRedirectEnd);\n    // domainLookup\n    propsSet |= _setPerfDuration(props, strDomainLookup, resourceEntry, strDomainLookupStart, strDomainLookupEnd);\n    // connect\n    propsSet |= _setPerfDuration(props, strConnect, resourceEntry, strConnectStart, strConnectEnd);\n    // request\n    propsSet |= _setPerfDuration(props, strRequest, resourceEntry, strRequestStart, strRequestEnd);\n    // response\n    propsSet |= _setPerfDuration(props, strResponse, resourceEntry, strResponseStart, strResponseEnd);\n    // Network connection time\n    propsSet |= _setPerfDuration(props, \"networkConnect\", resourceEntry, strStartTime, strConnectEnd);\n    // Sent Request\n    propsSet |= _setPerfDuration(props, \"sentRequest\", resourceEntry, strRequestStart, strResponseEnd);\n    // PerfTotal / Duration\n    var duration = resourceEntry[STR_DURATION /* @min:%2eduration */];\n    if (!duration) {\n      duration = _calcPerfDuration(resourceEntry, strStartTime, strResponseEnd) || 0;\n    }\n    propsSet |= _setPerfValue(props, STR_DURATION, duration);\n    propsSet |= _setPerfValue(props, \"perfTotal\", duration);\n    var serverTiming = resourceEntry[strServerTiming];\n    if (serverTiming) {\n      var server_1 = {};\n      arrForEach(serverTiming, function (value, idx) {\n        var name = normalizeJsName(value[strName] || \"\" + idx);\n        var newValue = server_1[name] || {};\n        objForEachKey(value, function (key, val) {\n          if (key !== strName && isString(val) || isNumber(val)) {\n            if (newValue[key]) {\n              val = newValue[key] + \";\" + val;\n            }\n            if (val || !isString(val)) {\n              // Only set the value if it has a value and it's not an empty string\n              newValue[key] = val;\n            }\n          }\n        });\n        server_1[name] = newValue;\n      });\n      propsSet |= _setPerfValue(props, strServerTiming, server_1);\n    }\n    propsSet |= _setPerfValue(props, strTransferSize, resourceEntry[strTransferSize]);\n    propsSet |= _setPerfValue(props, strEncodedBodySize, resourceEntry[strEncodedBodySize]);\n    propsSet |= _setPerfValue(props, strDecodedBodySize, resourceEntry[strDecodedBodySize]);\n  } else {\n    if (ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */]) {\n      propsSet |= _setPerfValue(props, \"missing\", ajaxData.perfAttempts);\n    }\n  }\n  if (propsSet) {\n    dependency[STR_PROPERTIES /* @min:%2eproperties */] = props;\n  }\n}\nvar XHRMonitoringState = /** @class */function () {\n  function XHRMonitoringState() {\n    var self = this;\n    self[_DYN_OPEN_DONE /* @min:%2eopenDone */] = false;\n    self.setRequestHeaderDone = false;\n    self[_DYN_SEND_DONE /* @min:%2esendDone */] = false;\n    self[_DYN_ABORT_DONE /* @min:%2eabortDone */] = false;\n    // <summary>True, if onreadyStateChangeCallback function attached to xhr, otherwise false</summary>\n    self[_DYN_STATE_CHANGE_ATTACHE13 /* @min:%2estateChangeAttached */] = false;\n  }\n  return XHRMonitoringState;\n}();\nexport { XHRMonitoringState };\nvar ajaxRecord = /** @class */function () {\n  function ajaxRecord(traceId, spanId, logger, traceCtx) {\n    var _a;\n    var self = this;\n    var _logger = logger;\n    var strResponseText = \"responseText\";\n    // Assigning the initial/default values within the constructor to avoid typescript from creating a bunch of\n    // this.XXXX = null\n    self[_DYN_PERF_MARK /* @min:%2eperfMark */] = null;\n    self.completed = false;\n    self.requestHeadersSize = null;\n    self[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = null;\n    self.responseReceivingDuration = null;\n    self.callbackDuration = null;\n    self[_DYN_AJAX_TOTAL_DURATION /* @min:%2eajaxTotalDuration */] = null;\n    self[_DYN_ABORTED /* @min:%2eaborted */] = 0;\n    self.pageUrl = null;\n    self[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = null;\n    self.requestSize = 0;\n    self[_DYN_METHOD /* @min:%2emethod */] = null;\n    self[_DYN_STATUS /* @min:%2estatus */] = null;\n    self[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = null;\n    self.responseStartedTime = null;\n    self[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */] = null;\n    self.callbackFinishedTime = null;\n    self.endTime = null;\n    self.xhrMonitoringState = new XHRMonitoringState();\n    self.clientFailure = 0;\n    self[_DYN_TRACE_ID /* @min:%2etraceID */] = traceId;\n    self[_DYN_SPAN_ID /* @min:%2espanID */] = spanId;\n    self[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = traceCtx === null || traceCtx === void 0 ? void 0 : traceCtx.getTraceFlags();\n    if (traceCtx) {\n      self[_DYN_EVENT_TRACE_CTX /* @min:%2eeventTraceCtx */] = (_a = {}, _a[_DYN_TRACE_ID0 /* @min:traceId */] = traceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */](), _a[_DYN_SPAN_ID1 /* @min:spanId */] = traceCtx.getSpanId(), _a[_DYN_TRACE_FLAGS /* @min:traceFlags */] = traceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */](), _a);\n    } else {\n      self[_DYN_EVENT_TRACE_CTX /* @min:%2eeventTraceCtx */] = null;\n    }\n    dynamicProto(ajaxRecord, self, function (self) {\n      self.getAbsoluteUrl = function () {\n        return self[_DYN_REQUEST_URL /* @min:%2erequestUrl */] ? urlGetAbsoluteUrl(self[_DYN_REQUEST_URL /* @min:%2erequestUrl */]) : null;\n      };\n      self.getPathName = function () {\n        return self[_DYN_REQUEST_URL /* @min:%2erequestUrl */] ? dataSanitizeUrl(_logger, urlGetCompleteUrl(self[_DYN_METHOD /* @min:%2emethod */], self[_DYN_REQUEST_URL /* @min:%2erequestUrl */])) : null;\n      };\n      self[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */] = function (ajaxType, enableRequestHeaderTracking, getResponse) {\n        var _a;\n        // round to 3 decimal points\n        self.ajaxTotalDuration = Math.round(dateTimeUtilsDuration(self.requestSentTime, self.responseFinishedTime) * 1000) / 1000;\n        if (self[_DYN_AJAX_TOTAL_DURATION /* @min:%2eajaxTotalDuration */] < 0) {\n          return null;\n        }\n        var dependency = (_a = {\n          id: \"|\" + self[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + self[_DYN_SPAN_ID /* @min:%2espanID */],\n          target: self[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */]()\n        }, _a[_DYN_NAME /* @min:name */] = self.getPathName(), _a.type = ajaxType, _a[_DYN_START_TIME /* @min:startTime */] = null, _a.duration = self[_DYN_AJAX_TOTAL_DURATION /* @min:%2eajaxTotalDuration */], _a.success = +self[_DYN_STATUS /* @min:%2estatus */] >= 200 && +self[_DYN_STATUS /* @min:%2estatus */] < 400, _a.responseCode = +self[_DYN_STATUS /* @min:%2estatus */], _a[STR_PROPERTIES] = {\n          HttpMethod: self[_DYN_METHOD /* @min:%2emethod */]\n        }, _a);\n        var props = dependency[STR_PROPERTIES];\n        if (self[_DYN_ABORTED /* @min:%2eaborted */]) {\n          props[_DYN_ABORTED /* @min:%2eaborted */] = true;\n        }\n        if (self[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */]) {\n          // Set the correct dependency start time\n          dependency[_DYN_START_TIME /* @min:%2estartTime */] = new Date();\n          dependency[_DYN_START_TIME /* @min:%2estartTime */].setTime(self[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */]);\n        }\n        // Add Ajax perf details if available\n        _populatePerfData(self, dependency);\n        if (enableRequestHeaderTracking) {\n          if (objKeys(self.requestHeaders)[_DYN_LENGTH /* @min:%2elength */] > 0) {\n            props[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = self[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */];\n          }\n        }\n        if (getResponse) {\n          var response = getResponse();\n          if (response) {\n            // enrich dependency target with correlation context from the server\n            var correlationContext = response[_DYN_CORRELATION_CONTEXT /* @min:%2ecorrelationContext */];\n            if (correlationContext) {\n              dependency.correlationContext = /* dependency.target + \" | \" + */correlationContext;\n            }\n            if (response[_DYN_HEADER_MAP /* @min:%2eheaderMap */]) {\n              if (objKeys(response.headerMap)[_DYN_LENGTH /* @min:%2elength */] > 0) {\n                props.responseHeaders = response[_DYN_HEADER_MAP /* @min:%2eheaderMap */];\n              }\n            }\n            if (self[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */]) {\n              if (self[_DYN_STATUS /* @min:%2estatus */] >= 400) {\n                var responseType = response.type;\n                if (responseType === \"\" || responseType === \"text\") {\n                  props.responseText = response.responseText ? response[_DYN_STATUS_TEXT /* @min:%2estatusText */] + \" - \" + response[strResponseText] : response[_DYN_STATUS_TEXT /* @min:%2estatusText */];\n                }\n                if (responseType === \"json\") {\n                  props.responseText = response.response ? response[_DYN_STATUS_TEXT /* @min:%2estatusText */] + \" - \" + JSON.stringify(response[_DYN_RESPONSE /* @min:%2eresponse */]) : response[_DYN_STATUS_TEXT /* @min:%2estatusText */];\n                }\n              } else if (self[_DYN_STATUS /* @min:%2estatus */] === 0) {\n                props.responseText = response[_DYN_STATUS_TEXT /* @min:%2estatusText */] || \"\";\n              }\n            }\n          }\n        }\n        return dependency;\n      };\n      self[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */] = function () {\n        var _a;\n        var partA = null;\n        var traceCtx = self[_DYN_EVENT_TRACE_CTX /* @min:%2eeventTraceCtx */];\n        if (traceCtx && (traceCtx[_DYN_TRACE_ID0 /* @min:%2etraceId */] || traceCtx[_DYN_SPAN_ID1 /* @min:%2espanId */])) {\n          partA = {};\n          var traceExt = partA[Extensions.TraceExt] = (_a = {}, _a[_DYN_TRACE_ID /* @min:traceID */] = traceCtx[_DYN_TRACE_ID0 /* @min:%2etraceId */], _a.parentID = traceCtx[_DYN_SPAN_ID1 /* @min:%2espanId */], _a);\n          if (!isNullOrUndefined(traceCtx[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */])) {\n            traceExt[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = traceCtx[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\n          }\n        }\n        return partA;\n      };\n    });\n  }\n  // Removed Stub for ajaxRecord.prototype.getAbsoluteUrl.\n  // Removed Stub for ajaxRecord.prototype.getPathName.\n  // Removed Stub for ajaxRecord.prototype.CreateTrackItem.\n  // Removed Stub for ajaxRecord.prototype.getPartAProps.\n  // This is a workaround for an IE bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  ajaxRecord.__ieDyn = 1;\n  return ajaxRecord;\n}();\nexport { ajaxRecord };","map":{"version":3,"names":["dynamicProto","Extensions","dataSanitizeUrl","dateTimeUtilsDuration","msToTimeSpan","urlGetAbsoluteUrl","urlGetCompleteUrl","arrForEach","isNullOrUndefined","isNumber","isString","normalizeJsName","objForEachKey","objKeys","STR_DURATION","STR_PROPERTIES","_DYN_ABORTED","_DYN_ABORT_DONE","_DYN_AJAX_TOTAL_DURATION","_DYN_CORRELATION_CONTEXT","_DYN_ERROR_STATUS_TEXT","_DYN_EVENT_TRACE_CTX","_DYN_GET_ABSOLUTE_URL","_DYN_GET_PART_APROPS","_DYN_GET_TRACE_FLAGS","_DYN_GET_TRACE_ID","_DYN_HEADER_MAP","_DYN_LENGTH","_DYN_METHOD","_DYN_NAME","_DYN_OPEN_DONE","_DYN_PERF_MARK","_DYN_PERF_TIMING","_DYN_REQUEST_HEADERS","_DYN_REQUEST_SENT_TIME","_DYN_REQUEST_URL","_DYN_RESPONSE","_DYN_RESPONSE_FINISHED_TI14","_DYN_SEND_DONE","_DYN_SPAN_ID","_DYN_SPAN_ID1","_DYN_START_TIME","_DYN_STATE_CHANGE_ATTACHE13","_DYN_STATUS","_DYN_STATUS_TEXT","_DYN_TRACE_FLAGS","_DYN_TRACE_ID","_DYN_TRACE_ID0","_DYN__CREATE_TRACK_ITEM","_calcPerfDuration","resourceEntry","start","end","result","from","to","_setPerfDuration","props","name","value","_setPerfValue","strPerf","perfData","_populatePerfData","ajaxData","dependency","propsSet","strName","strStart","strEnd","strDomainLookup","strConnect","strRedirect","strRequest","strResponse","strStartTime","strDomainLookupStart","strDomainLookupEnd","strConnectStart","strConnectEnd","strRequestStart","strRequestEnd","strResponseStart","strResponseEnd","strRedirectStart","strRedirectEnd","strTransferSize","strEncodedBodySize","strDecodedBodySize","strServerTiming","duration","serverTiming","server_1","idx","newValue","key","val","perfAttempts","XHRMonitoringState","self","setRequestHeaderDone","ajaxRecord","traceId","spanId","logger","traceCtx","_a","_logger","strResponseText","completed","requestHeadersSize","responseReceivingDuration","callbackDuration","pageUrl","requestSize","responseStartedTime","callbackFinishedTime","endTime","xhrMonitoringState","clientFailure","getTraceFlags","getSpanId","getAbsoluteUrl","getPathName","ajaxType","enableRequestHeaderTracking","getResponse","ajaxTotalDuration","Math","round","requestSentTime","responseFinishedTime","id","target","type","success","responseCode","HttpMethod","Date","setTime","requestHeaders","response","correlationContext","headerMap","responseHeaders","responseType","responseText","JSON","stringify","partA","traceExt","TraceExt","parentID"],"sources":["/home/veeresh133/app/react-az/node_modules/@microsoft/applicationinsights-dependencies-js/dist-es5/ajaxRecord.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { Extensions, dataSanitizeUrl, dateTimeUtilsDuration, msToTimeSpan, urlGetAbsoluteUrl, urlGetCompleteUrl } from \"@microsoft/applicationinsights-common\";\r\nimport { arrForEach, isNullOrUndefined, isNumber, isString, normalizeJsName, objForEachKey, objKeys } from \"@microsoft/applicationinsights-core-js\";\r\nimport { STR_DURATION, STR_PROPERTIES } from \"./InternalConstants\";\r\nimport { _DYN_ABORTED, _DYN_ABORT_DONE, _DYN_AJAX_TOTAL_DURATION, _DYN_CORRELATION_CONTEXT, _DYN_ERROR_STATUS_TEXT, _DYN_EVENT_TRACE_CTX, _DYN_GET_ABSOLUTE_URL, _DYN_GET_PART_APROPS, _DYN_GET_TRACE_FLAGS, _DYN_GET_TRACE_ID, _DYN_HEADER_MAP, _DYN_LENGTH, _DYN_METHOD, _DYN_NAME, _DYN_OPEN_DONE, _DYN_PERF_MARK, _DYN_PERF_TIMING, _DYN_REQUEST_HEADERS, _DYN_REQUEST_SENT_TIME, _DYN_REQUEST_URL, _DYN_RESPONSE, _DYN_RESPONSE_FINISHED_TI14, _DYN_SEND_DONE, _DYN_SPAN_ID, _DYN_SPAN_ID1, _DYN_START_TIME, _DYN_STATE_CHANGE_ATTACHE13, _DYN_STATUS, _DYN_STATUS_TEXT, _DYN_TRACE_FLAGS, _DYN_TRACE_ID, _DYN_TRACE_ID0, _DYN__CREATE_TRACK_ITEM } from \"./__DynamicConstants\";\r\n/** @ignore */\r\nfunction _calcPerfDuration(resourceEntry, start, end) {\r\n    var result = 0;\r\n    var from = resourceEntry[start];\r\n    var to = resourceEntry[end];\r\n    if (from && to) {\r\n        result = dateTimeUtilsDuration(from, to);\r\n    }\r\n    return result;\r\n}\r\n/** @ignore */\r\nfunction _setPerfDuration(props, name, resourceEntry, start, end) {\r\n    var result = 0;\r\n    var value = _calcPerfDuration(resourceEntry, start, end);\r\n    if (value) {\r\n        result = _setPerfValue(props, name, msToTimeSpan(value));\r\n    }\r\n    return result;\r\n}\r\n/** @ignore */\r\nfunction _setPerfValue(props, name, value) {\r\n    var strPerf = \"ajaxPerf\";\r\n    var result = 0;\r\n    if (props && name && value) {\r\n        var perfData = props[strPerf] = (props[strPerf] || {});\r\n        perfData[name] = value;\r\n        result = 1;\r\n    }\r\n    return result;\r\n}\r\n/** @ignore */\r\nfunction _populatePerfData(ajaxData, dependency) {\r\n    /*\r\n    * https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API/Using_the_Resource_Timing_API\r\n    *  | -startTime\r\n    *  | -redirectStart\r\n    *  |            | -redirectEnd\r\n    *  |            | | -fetchStart\r\n    *  |            | |   | -domainLookupStart\r\n    *  |            | |   |                |- domainLookupEnd\r\n    *  |            | |   |                | | -connectStart\r\n    *  |            | |   |                | |  | -secureConnectionStart\r\n    *  |            | |   |                | |  |        | -connectEnd\r\n    *  |            | |   |                | |  |        | | -requestStart\r\n    *  |            | |   |                | |  |        | |           | | -responseStart\r\n    *  |            | |   |                | |  |        | |           | |            | | -responseEnd\r\n    *  +------------+-+---+----------------+-+--+--------+-+-----------+-+------------+-+\r\n    *  |--redirect--| |---|--domainLookup--| |--connect--| |--request--| |--response--| |\r\n    *  |-------------------networkConnect----------------|\r\n    *  |                                                   |---------sentRequest--------|\r\n    *  |------------------------------------perfTotal-----------------------------------|\r\n    */\r\n    var resourceEntry = ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */];\r\n    var props = dependency[STR_PROPERTIES /* @min:%2eproperties */] || {};\r\n    var propsSet = 0;\r\n    var strName = \"name\";\r\n    var strStart = \"Start\";\r\n    var strEnd = \"End\";\r\n    var strDomainLookup = \"domainLookup\";\r\n    var strConnect = \"connect\";\r\n    var strRedirect = \"redirect\";\r\n    var strRequest = \"request\";\r\n    var strResponse = \"response\";\r\n    var strStartTime = \"startTime\";\r\n    var strDomainLookupStart = strDomainLookup + strStart;\r\n    var strDomainLookupEnd = strDomainLookup + strEnd;\r\n    var strConnectStart = strConnect + strStart;\r\n    var strConnectEnd = strConnect + strEnd;\r\n    var strRequestStart = strRequest + strStart;\r\n    var strRequestEnd = strRequest + strEnd;\r\n    var strResponseStart = strResponse + strStart;\r\n    var strResponseEnd = strResponse + strEnd;\r\n    var strRedirectStart = strRedirect + strStart;\r\n    var strRedirectEnd = strRedirect = strEnd;\r\n    var strTransferSize = \"transferSize\";\r\n    var strEncodedBodySize = \"encodedBodySize\";\r\n    var strDecodedBodySize = \"decodedBodySize\";\r\n    var strServerTiming = \"serverTiming\";\r\n    if (resourceEntry) {\r\n        // redirect\r\n        propsSet |= _setPerfDuration(props, strRedirect, resourceEntry, strRedirectStart, strRedirectEnd);\r\n        // domainLookup\r\n        propsSet |= _setPerfDuration(props, strDomainLookup, resourceEntry, strDomainLookupStart, strDomainLookupEnd);\r\n        // connect\r\n        propsSet |= _setPerfDuration(props, strConnect, resourceEntry, strConnectStart, strConnectEnd);\r\n        // request\r\n        propsSet |= _setPerfDuration(props, strRequest, resourceEntry, strRequestStart, strRequestEnd);\r\n        // response\r\n        propsSet |= _setPerfDuration(props, strResponse, resourceEntry, strResponseStart, strResponseEnd);\r\n        // Network connection time\r\n        propsSet |= _setPerfDuration(props, \"networkConnect\", resourceEntry, strStartTime, strConnectEnd);\r\n        // Sent Request\r\n        propsSet |= _setPerfDuration(props, \"sentRequest\", resourceEntry, strRequestStart, strResponseEnd);\r\n        // PerfTotal / Duration\r\n        var duration = resourceEntry[STR_DURATION /* @min:%2eduration */];\r\n        if (!duration) {\r\n            duration = _calcPerfDuration(resourceEntry, strStartTime, strResponseEnd) || 0;\r\n        }\r\n        propsSet |= _setPerfValue(props, STR_DURATION, duration);\r\n        propsSet |= _setPerfValue(props, \"perfTotal\", duration);\r\n        var serverTiming = resourceEntry[strServerTiming];\r\n        if (serverTiming) {\r\n            var server_1 = {};\r\n            arrForEach(serverTiming, function (value, idx) {\r\n                var name = normalizeJsName(value[strName] || \"\" + idx);\r\n                var newValue = server_1[name] || {};\r\n                objForEachKey(value, function (key, val) {\r\n                    if (key !== strName && isString(val) || isNumber(val)) {\r\n                        if (newValue[key]) {\r\n                            val = newValue[key] + \";\" + val;\r\n                        }\r\n                        if (val || !isString(val)) {\r\n                            // Only set the value if it has a value and it's not an empty string\r\n                            newValue[key] = val;\r\n                        }\r\n                    }\r\n                });\r\n                server_1[name] = newValue;\r\n            });\r\n            propsSet |= _setPerfValue(props, strServerTiming, server_1);\r\n        }\r\n        propsSet |= _setPerfValue(props, strTransferSize, resourceEntry[strTransferSize]);\r\n        propsSet |= _setPerfValue(props, strEncodedBodySize, resourceEntry[strEncodedBodySize]);\r\n        propsSet |= _setPerfValue(props, strDecodedBodySize, resourceEntry[strDecodedBodySize]);\r\n    }\r\n    else {\r\n        if (ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */]) {\r\n            propsSet |= _setPerfValue(props, \"missing\", ajaxData.perfAttempts);\r\n        }\r\n    }\r\n    if (propsSet) {\r\n        dependency[STR_PROPERTIES /* @min:%2eproperties */] = props;\r\n    }\r\n}\r\nvar XHRMonitoringState = /** @class */ (function () {\r\n    function XHRMonitoringState() {\r\n        var self = this;\r\n        self[_DYN_OPEN_DONE /* @min:%2eopenDone */] = false;\r\n        self.setRequestHeaderDone = false;\r\n        self[_DYN_SEND_DONE /* @min:%2esendDone */] = false;\r\n        self[_DYN_ABORT_DONE /* @min:%2eabortDone */] = false;\r\n        // <summary>True, if onreadyStateChangeCallback function attached to xhr, otherwise false</summary>\r\n        self[_DYN_STATE_CHANGE_ATTACHE13 /* @min:%2estateChangeAttached */] = false;\r\n    }\r\n    return XHRMonitoringState;\r\n}());\r\nexport { XHRMonitoringState };\r\nvar ajaxRecord = /** @class */ (function () {\r\n    function ajaxRecord(traceId, spanId, logger, traceCtx) {\r\n        var _a;\r\n        var self = this;\r\n        var _logger = logger;\r\n        var strResponseText = \"responseText\";\r\n        // Assigning the initial/default values within the constructor to avoid typescript from creating a bunch of\r\n        // this.XXXX = null\r\n        self[_DYN_PERF_MARK /* @min:%2eperfMark */] = null;\r\n        self.completed = false;\r\n        self.requestHeadersSize = null;\r\n        self[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = null;\r\n        self.responseReceivingDuration = null;\r\n        self.callbackDuration = null;\r\n        self[_DYN_AJAX_TOTAL_DURATION /* @min:%2eajaxTotalDuration */] = null;\r\n        self[_DYN_ABORTED /* @min:%2eaborted */] = 0;\r\n        self.pageUrl = null;\r\n        self[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = null;\r\n        self.requestSize = 0;\r\n        self[_DYN_METHOD /* @min:%2emethod */] = null;\r\n        self[_DYN_STATUS /* @min:%2estatus */] = null;\r\n        self[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = null;\r\n        self.responseStartedTime = null;\r\n        self[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */] = null;\r\n        self.callbackFinishedTime = null;\r\n        self.endTime = null;\r\n        self.xhrMonitoringState = new XHRMonitoringState();\r\n        self.clientFailure = 0;\r\n        self[_DYN_TRACE_ID /* @min:%2etraceID */] = traceId;\r\n        self[_DYN_SPAN_ID /* @min:%2espanID */] = spanId;\r\n        self[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = traceCtx === null || traceCtx === void 0 ? void 0 : traceCtx.getTraceFlags();\r\n        if (traceCtx) {\r\n            self[_DYN_EVENT_TRACE_CTX /* @min:%2eeventTraceCtx */] = (_a = {},\r\n                _a[_DYN_TRACE_ID0 /* @min:traceId */] = traceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */](),\r\n                _a[_DYN_SPAN_ID1 /* @min:spanId */] = traceCtx.getSpanId(),\r\n                _a[_DYN_TRACE_FLAGS /* @min:traceFlags */] = traceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */](),\r\n                _a);\r\n        }\r\n        else {\r\n            self[_DYN_EVENT_TRACE_CTX /* @min:%2eeventTraceCtx */] = null;\r\n        }\r\n        dynamicProto(ajaxRecord, self, function (self) {\r\n            self.getAbsoluteUrl = function () {\r\n                return self[_DYN_REQUEST_URL /* @min:%2erequestUrl */] ? urlGetAbsoluteUrl(self[_DYN_REQUEST_URL /* @min:%2erequestUrl */]) : null;\r\n            };\r\n            self.getPathName = function () {\r\n                return self[_DYN_REQUEST_URL /* @min:%2erequestUrl */] ? dataSanitizeUrl(_logger, urlGetCompleteUrl(self[_DYN_METHOD /* @min:%2emethod */], self[_DYN_REQUEST_URL /* @min:%2erequestUrl */])) : null;\r\n            };\r\n            self[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */] = function (ajaxType, enableRequestHeaderTracking, getResponse) {\r\n                var _a;\r\n                // round to 3 decimal points\r\n                self.ajaxTotalDuration = Math.round(dateTimeUtilsDuration(self.requestSentTime, self.responseFinishedTime) * 1000) / 1000;\r\n                if (self[_DYN_AJAX_TOTAL_DURATION /* @min:%2eajaxTotalDuration */] < 0) {\r\n                    return null;\r\n                }\r\n                var dependency = (_a = {\r\n                        id: \"|\" + self[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + self[_DYN_SPAN_ID /* @min:%2espanID */],\r\n                        target: self[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */]()\r\n                    },\r\n                    _a[_DYN_NAME /* @min:name */] = self.getPathName(),\r\n                    _a.type = ajaxType,\r\n                    _a[_DYN_START_TIME /* @min:startTime */] = null,\r\n                    _a.duration = self[_DYN_AJAX_TOTAL_DURATION /* @min:%2eajaxTotalDuration */],\r\n                    _a.success = (+(self[_DYN_STATUS /* @min:%2estatus */])) >= 200 && (+(self[_DYN_STATUS /* @min:%2estatus */])) < 400,\r\n                    _a.responseCode = (+(self[_DYN_STATUS /* @min:%2estatus */])),\r\n                    _a[STR_PROPERTIES] = { HttpMethod: self[_DYN_METHOD /* @min:%2emethod */] },\r\n                    _a);\r\n                var props = dependency[STR_PROPERTIES];\r\n                if (self[_DYN_ABORTED /* @min:%2eaborted */]) {\r\n                    props[_DYN_ABORTED /* @min:%2eaborted */] = true;\r\n                }\r\n                if (self[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */]) {\r\n                    // Set the correct dependency start time\r\n                    dependency[_DYN_START_TIME /* @min:%2estartTime */] = new Date();\r\n                    dependency[_DYN_START_TIME /* @min:%2estartTime */].setTime(self[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */]);\r\n                }\r\n                // Add Ajax perf details if available\r\n                _populatePerfData(self, dependency);\r\n                if (enableRequestHeaderTracking) {\r\n                    if (objKeys(self.requestHeaders)[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                        props[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = self[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */];\r\n                    }\r\n                }\r\n                if (getResponse) {\r\n                    var response = getResponse();\r\n                    if (response) {\r\n                        // enrich dependency target with correlation context from the server\r\n                        var correlationContext = response[_DYN_CORRELATION_CONTEXT /* @min:%2ecorrelationContext */];\r\n                        if (correlationContext) {\r\n                            dependency.correlationContext = /* dependency.target + \" | \" + */ correlationContext;\r\n                        }\r\n                        if (response[_DYN_HEADER_MAP /* @min:%2eheaderMap */]) {\r\n                            if (objKeys(response.headerMap)[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                                props.responseHeaders = response[_DYN_HEADER_MAP /* @min:%2eheaderMap */];\r\n                            }\r\n                        }\r\n                        if (self[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */]) {\r\n                            if (self[_DYN_STATUS /* @min:%2estatus */] >= 400) {\r\n                                var responseType = response.type;\r\n                                if (responseType === \"\" || responseType === \"text\") {\r\n                                    props.responseText = response.responseText ? response[_DYN_STATUS_TEXT /* @min:%2estatusText */] + \" - \" + response[strResponseText] : response[_DYN_STATUS_TEXT /* @min:%2estatusText */];\r\n                                }\r\n                                if (responseType === \"json\") {\r\n                                    props.responseText = response.response ? response[_DYN_STATUS_TEXT /* @min:%2estatusText */] + \" - \" + JSON.stringify(response[_DYN_RESPONSE /* @min:%2eresponse */]) : response[_DYN_STATUS_TEXT /* @min:%2estatusText */];\r\n                                }\r\n                            }\r\n                            else if (self[_DYN_STATUS /* @min:%2estatus */] === 0) {\r\n                                props.responseText = response[_DYN_STATUS_TEXT /* @min:%2estatusText */] || \"\";\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return dependency;\r\n            };\r\n            self[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */] = function () {\r\n                var _a;\r\n                var partA = null;\r\n                var traceCtx = self[_DYN_EVENT_TRACE_CTX /* @min:%2eeventTraceCtx */];\r\n                if (traceCtx && (traceCtx[_DYN_TRACE_ID0 /* @min:%2etraceId */] || traceCtx[_DYN_SPAN_ID1 /* @min:%2espanId */])) {\r\n                    partA = {};\r\n                    var traceExt = partA[Extensions.TraceExt] = (_a = {},\r\n                        _a[_DYN_TRACE_ID /* @min:traceID */] = traceCtx[_DYN_TRACE_ID0 /* @min:%2etraceId */],\r\n                        _a.parentID = traceCtx[_DYN_SPAN_ID1 /* @min:%2espanId */],\r\n                        _a);\r\n                    if (!isNullOrUndefined(traceCtx[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */])) {\r\n                        traceExt[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = traceCtx[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n                    }\r\n                }\r\n                return partA;\r\n            };\r\n        });\r\n    }\r\n    ajaxRecord.prototype.getAbsoluteUrl = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    ajaxRecord.prototype.getPathName = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    ajaxRecord.prototype.CreateTrackItem = function (ajaxType, enableRequestHeaderTracking, getResponse) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    ajaxRecord.prototype.getPartAProps = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return ajaxRecord;\r\n}());\r\nexport { ajaxRecord };\r\n//# sourceMappingURL=ajaxRecord.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}