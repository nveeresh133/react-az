{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Common, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nimport { _throwInternal, arrIndexOf, isNotNullOrUndefined, isNullOrUndefined, onConfigChange, randomValue, safeGetLogger, strTrim } from \"@microsoft/applicationinsights-core-js\";\nimport { arrForEach, objForEachKey } from \"@nevware21/ts-utils\";\nimport { utlCanUseLocalStorage, utlGetLocalStorage, utlSetLocalStorage } from \"./StorageHelperFuncs\";\nimport { _DYN_COUNT, _DYN_DATE, _DYN_DAYS_OF_MONTH, _DYN_DISABLED, _DYN_GET_UTCDATE, _DYN_INTERVAL, _DYN_LENGTH, _DYN_MESSAGE, _DYN_PRE_TRIGGER_DATE, _DYN_PUSH, _DYN_STRINGIFY } from \"./__DynamicConstants\";\nvar THROTTLE_STORAGE_PREFIX = \"appInsightsThrottle\";\nvar ThrottleMgr = /** @class */function () {\n  function ThrottleMgr(core, namePrefix) {\n    var _self = this;\n    var _canUseLocalStorage;\n    var _logger;\n    var _config;\n    var _localStorageObj;\n    var _isTriggered; //_isTriggered is to make sure that we only trigger throttle once a day\n    var _namePrefix;\n    var _queue;\n    var _isReady = false;\n    var _isSpecificDaysGiven = false;\n    _initConfig();\n    // Special internal method to allow the unit tests and DebugPlugin to hook embedded objects\n    _self[\"_getDbgPlgTargets\"] = function () {\n      return [_queue];\n    };\n    _self.getConfig = function () {\n      return _config;\n    };\n    /**\r\n     * Check if it is the correct day to send message.\r\n     * If _isTriggered is true, even if canThrottle returns true, message will not be sent,\r\n     * because we only allow triggering sendMessage() once a day.\r\n     * @returns if the current date is the valid date to send message\r\n     */\n    _self.canThrottle = function (msgId) {\n      var localObj = _getLocalStorageObjByKey(msgId);\n      var cfg = _getCfgByKey(msgId);\n      return _canThrottle(cfg, _canUseLocalStorage, localObj);\n    };\n    /**\r\n     * Check if throttle is triggered on current day(UTC)\r\n     * if canThrottle returns false, isTriggered will return false\r\n     * @returns if throttle is triggered on current day(UTC)\r\n     */\n    _self.isTriggered = function (msgId) {\n      return _isTrigger(msgId);\n    };\n    /**\r\n     * Before isReady set to true, all message will be stored in queue.\r\n     * Message will only be sent out after isReady set to true.\r\n     * Initial and default value: false\r\n     * @returns isReady state\r\n     */\n    _self.isReady = function () {\n      return _isReady;\n    };\n    /**\r\n     * Flush all message with given message key in queue with isReady state set to true.\r\n     * @returns if message queue is flushed\r\n     */\n    _self.flush = function (msgId) {\n      try {\n        var queue = _getQueueByKey(msgId);\n        if (queue && queue[_DYN_LENGTH /* @min:%2elength */] > 0) {\n          var items = queue.slice(0);\n          _queue[msgId] = [];\n          arrForEach(items, function (item) {\n            _flushMessage(item.msgID, item[_DYN_MESSAGE /* @min:%2emessage */], item.severity, false);\n          });\n          return true;\n        }\n      } catch (err) {\n        // eslint-disable-next-line no-empty\n      }\n      return false;\n    };\n    /**\r\n     * Flush all message in queue with isReady state set to true.\r\n     * @returns if message queue is flushed\r\n     */\n    _self.flushAll = function () {\n      try {\n        if (_queue) {\n          var result_1 = true;\n          objForEachKey(_queue, function (key) {\n            var isFlushed = _self.flush(parseInt(key));\n            result_1 = result_1 && isFlushed;\n          });\n          return result_1;\n        }\n      } catch (err) {\n        // eslint-disable-next-line no-empty\n      }\n      return false;\n    };\n    /**\r\n     * Set isReady State\r\n     * if isReady set to true, message queue will be flushed automatically.\r\n     * @param isReady isReady State\r\n     * @pa\r\n     * @returns if message queue is flushed\r\n     */\n    _self.onReadyState = function (isReady, flushAll) {\n      if (flushAll === void 0) {\n        flushAll = true;\n      }\n      _isReady = isNullOrUndefined(isReady) ? true : isReady;\n      if (_isReady && flushAll) {\n        return _self.flushAll();\n      }\n      return null;\n    };\n    _self.sendMessage = function (msgID, message, severity) {\n      return _flushMessage(msgID, message, severity, true);\n    };\n    function _flushMessage(msgID, message, severity, saveUnsentMsg) {\n      if (_isReady) {\n        var isSampledIn = _canSampledIn(msgID);\n        if (!isSampledIn) {\n          return;\n        }\n        var cfg = _getCfgByKey(msgID);\n        var localStorageObj = _getLocalStorageObjByKey(msgID);\n        var canThrottle = _canThrottle(cfg, _canUseLocalStorage, localStorageObj);\n        var throttled = false;\n        var number = 0;\n        var isTriggered = _isTrigger(msgID);\n        try {\n          if (canThrottle && !isTriggered) {\n            number = Math.min(cfg.limit.maxSendNumber, localStorageObj[_DYN_COUNT /* @min:%2ecount */] + 1);\n            localStorageObj[_DYN_COUNT /* @min:%2ecount */] = 0;\n            throttled = true;\n            _isTriggered[msgID] = true;\n            localStorageObj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */] = new Date();\n          } else {\n            _isTriggered[msgID] = canThrottle;\n            localStorageObj[_DYN_COUNT /* @min:%2ecount */] += 1;\n          }\n          var localStorageName = _getLocalStorageName(msgID);\n          _resetLocalStorage(_logger, localStorageName, localStorageObj);\n          for (var i = 0; i < number; i++) {\n            _sendMessage(msgID, _logger, message, severity);\n          }\n        } catch (e) {\n          // eslint-disable-next-line no-empty\n        }\n        return {\n          isThrottled: throttled,\n          throttleNum: number\n        };\n      } else {\n        if (!!saveUnsentMsg) {\n          var queue = _getQueueByKey(msgID);\n          queue[_DYN_PUSH /* @min:%2epush */]({\n            msgID: msgID,\n            message: message,\n            severity: severity\n          });\n        }\n      }\n      return null;\n    }\n    function _initConfig() {\n      _logger = safeGetLogger(core);\n      _isTriggered = {};\n      _localStorageObj = {};\n      _queue = {};\n      _config = {};\n      _setCfgByKey(109 /* _eInternalMessageId.DefaultThrottleMsgKey */);\n      _namePrefix = isNotNullOrUndefined(namePrefix) ? namePrefix : \"\";\n      core.addUnloadHook(onConfigChange(core.config, function (details) {\n        var coreConfig = details.cfg;\n        _canUseLocalStorage = utlCanUseLocalStorage();\n        var configMgr = coreConfig.throttleMgrCfg || {};\n        objForEachKey(configMgr, function (key, cfg) {\n          _setCfgByKey(parseInt(key), cfg);\n        });\n      }));\n    }\n    function _getCfgByKey(msgID) {\n      return _config[msgID] || _config[109 /* _eInternalMessageId.DefaultThrottleMsgKey */];\n    }\n    function _setCfgByKey(msgID, config) {\n      var _a, _b;\n      try {\n        var cfg = config || {};\n        var curCfg = {};\n        curCfg[_DYN_DISABLED /* @min:%2edisabled */] = !!cfg[_DYN_DISABLED /* @min:%2edisabled */];\n        var configInterval = cfg[_DYN_INTERVAL /* @min:%2einterval */] || {};\n        _isSpecificDaysGiven = (configInterval === null || configInterval === void 0 ? void 0 : configInterval.daysOfMonth) && (configInterval === null || configInterval === void 0 ? void 0 : configInterval.daysOfMonth[_DYN_LENGTH /* @min:%2elength */]) > 0;\n        curCfg[_DYN_INTERVAL /* @min:%2einterval */] = _getIntervalConfig(configInterval);\n        var limit = {\n          samplingRate: ((_a = cfg.limit) === null || _a === void 0 ? void 0 : _a.samplingRate) || 100,\n          // dafault: every time sent only 1 event\n          maxSendNumber: ((_b = cfg.limit) === null || _b === void 0 ? void 0 : _b.maxSendNumber) || 1\n        };\n        curCfg.limit = limit;\n        _config[msgID] = curCfg;\n      } catch (e) {\n        // eslint-disable-next-line no-empty\n      }\n    }\n    function _getIntervalConfig(interval) {\n      interval = interval || {};\n      var monthInterval = interval === null || interval === void 0 ? void 0 : interval.monthInterval;\n      var dayInterval = interval === null || interval === void 0 ? void 0 : interval.dayInterval;\n      // default: send data every 3 month each year\n      if (isNullOrUndefined(monthInterval) && isNullOrUndefined(dayInterval)) {\n        interval.monthInterval = 3;\n        if (!_isSpecificDaysGiven) {\n          // default: send data on 28th\n          interval[_DYN_DAYS_OF_MONTH /* @min:%2edaysOfMonth */] = [28];\n          _isSpecificDaysGiven = true;\n        }\n      }\n      interval = {\n        // dafault: sent every three months\n        monthInterval: interval === null || interval === void 0 ? void 0 : interval.monthInterval,\n        dayInterval: interval === null || interval === void 0 ? void 0 : interval.dayInterval,\n        daysOfMonth: interval === null || interval === void 0 ? void 0 : interval.daysOfMonth\n      };\n      return interval;\n    }\n    function _canThrottle(config, canUseLocalStorage, localStorageObj) {\n      if (config && !config[_DYN_DISABLED /* @min:%2edisabled */] && canUseLocalStorage && isNotNullOrUndefined(localStorageObj)) {\n        var curDate = _getThrottleDate();\n        var date = localStorageObj[_DYN_DATE /* @min:%2edate */];\n        var interval = config[_DYN_INTERVAL /* @min:%2einterval */];\n        var monthCheck = 1;\n        if (interval === null || interval === void 0 ? void 0 : interval.monthInterval) {\n          var monthExpand = (curDate.getUTCFullYear() - date.getUTCFullYear()) * 12 + curDate.getUTCMonth() - date.getUTCMonth();\n          monthCheck = _checkInterval(interval.monthInterval, 0, monthExpand);\n        }\n        var dayCheck = 1;\n        if (_isSpecificDaysGiven) {\n          dayCheck = arrIndexOf(interval[_DYN_DAYS_OF_MONTH /* @min:%2edaysOfMonth */], curDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]());\n        } else if (interval === null || interval === void 0 ? void 0 : interval.dayInterval) {\n          var daySpan = Math.floor((curDate.getTime() - date.getTime()) / 86400000);\n          dayCheck = _checkInterval(interval.dayInterval, 0, daySpan);\n        }\n        return monthCheck >= 0 && dayCheck >= 0;\n      }\n      return false;\n    }\n    function _getLocalStorageName(msgKey, prefix) {\n      var fix = isNotNullOrUndefined(prefix) ? prefix : \"\";\n      if (msgKey) {\n        return THROTTLE_STORAGE_PREFIX + fix + \"-\" + msgKey;\n      }\n      return null;\n    }\n    // returns if throttle is triggered on current Date\n    function _isTriggeredOnCurDate(preTriggerDate) {\n      try {\n        if (preTriggerDate) {\n          var curDate = new Date();\n          return preTriggerDate.getUTCFullYear() === curDate.getUTCFullYear() && preTriggerDate.getUTCMonth() === curDate.getUTCMonth() && preTriggerDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]() === curDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]();\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-empty\n      }\n      return false;\n    }\n    // transfer local storage string value to object that identifies start date, current count and preTriggerDate\n    function _getLocalStorageObj(value, logger, storageName) {\n      try {\n        var storageObj = {\n          date: _getThrottleDate(),\n          count: 0\n        };\n        if (value) {\n          var obj = JSON.parse(value);\n          var curObj = {\n            date: _getThrottleDate(obj[_DYN_DATE /* @min:%2edate */]) || storageObj[_DYN_DATE /* @min:%2edate */],\n            count: obj[_DYN_COUNT /* @min:%2ecount */] || storageObj[_DYN_COUNT /* @min:%2ecount */],\n            preTriggerDate: obj.preTriggerDate ? _getThrottleDate(obj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */]) : undefined\n          };\n          return curObj;\n        } else {\n          _resetLocalStorage(logger, storageName, storageObj);\n          return storageObj;\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-empty\n      }\n      return null;\n    }\n    // if datestr is not defined, current date will be returned\n    function _getThrottleDate(dateStr) {\n      // if new Date() can't be created through the provided dateStr, null will be returned.\n      try {\n        if (dateStr) {\n          var date = new Date(dateStr);\n          //make sure it is a valid Date Object\n          if (!isNaN(date.getDate())) {\n            return date;\n          }\n        } else {\n          return new Date();\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-empty\n      }\n      return null;\n    }\n    function _resetLocalStorage(logger, storageName, obj) {\n      try {\n        return utlSetLocalStorage(logger, storageName, strTrim(JSON[_DYN_STRINGIFY /* @min:%2estringify */](obj)));\n      } catch (e) {\n        // eslint-disable-next-line no-empty\n      }\n      return false;\n    }\n    function _checkInterval(interval, start, current) {\n      if (interval <= 0) {\n        return 1;\n      }\n      // count from start year\n      return current >= start && (current - start) % interval == 0 ? Math.floor((current - start) / interval) + 1 : -1;\n    }\n    function _sendMessage(msgID, logger, message, severity) {\n      _throwInternal(logger, severity || 1 /* eLoggingSeverity.CRITICAL */, msgID, message);\n    }\n    // NOTE: config.limit.samplingRate is set to 4 decimal places,\n    // so config.limit.samplingRate = 1 means 0.0001%\n    function _canSampledIn(msgID) {\n      try {\n        var cfg = _getCfgByKey(msgID);\n        return randomValue(1000000) <= cfg.limit.samplingRate;\n      } catch (e) {\n        // eslint-disable-next-line no-empty\n      }\n      return false;\n    }\n    function _getLocalStorageObjByKey(key) {\n      try {\n        var curObj = _localStorageObj[key];\n        if (!curObj) {\n          var localStorageName = _getLocalStorageName(key, _namePrefix);\n          curObj = _getLocalStorageObj(utlGetLocalStorage(_logger, localStorageName), _logger, localStorageName);\n          _localStorageObj[key] = curObj;\n        }\n        return _localStorageObj[key];\n      } catch (e) {\n        // eslint-disable-next-line no-empty\n      }\n      return null;\n    }\n    function _isTrigger(key) {\n      var isTrigger = _isTriggered[key];\n      if (isNullOrUndefined(isTrigger)) {\n        isTrigger = false;\n        var localStorageObj = _getLocalStorageObjByKey(key);\n        if (localStorageObj) {\n          isTrigger = _isTriggeredOnCurDate(localStorageObj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */]);\n        }\n        _isTriggered[key] = isTrigger;\n      }\n      return _isTriggered[key];\n    }\n    function _getQueueByKey(key) {\n      _queue = _queue || {};\n      if (isNullOrUndefined(_queue[key])) {\n        _queue[key] = [];\n      }\n      return _queue[key];\n    }\n  }\n  return ThrottleMgr;\n}();\nexport { ThrottleMgr };","map":{"version":3,"names":["_throwInternal","arrIndexOf","isNotNullOrUndefined","isNullOrUndefined","onConfigChange","randomValue","safeGetLogger","strTrim","arrForEach","objForEachKey","utlCanUseLocalStorage","utlGetLocalStorage","utlSetLocalStorage","_DYN_COUNT","_DYN_DATE","_DYN_DAYS_OF_MONTH","_DYN_DISABLED","_DYN_GET_UTCDATE","_DYN_INTERVAL","_DYN_LENGTH","_DYN_MESSAGE","_DYN_PRE_TRIGGER_DATE","_DYN_PUSH","_DYN_STRINGIFY","THROTTLE_STORAGE_PREFIX","ThrottleMgr","core","namePrefix","_self","_canUseLocalStorage","_logger","_config","_localStorageObj","_isTriggered","_namePrefix","_queue","_isReady","_isSpecificDaysGiven","_initConfig","getConfig","canThrottle","msgId","localObj","_getLocalStorageObjByKey","cfg","_getCfgByKey","_canThrottle","isTriggered","_isTrigger","isReady","flush","queue","_getQueueByKey","items","slice","item","_flushMessage","msgID","severity","err","flushAll","result_1","key","isFlushed","parseInt","onReadyState","sendMessage","message","saveUnsentMsg","isSampledIn","_canSampledIn","localStorageObj","throttled","number","Math","min","limit","maxSendNumber","Date","localStorageName","_getLocalStorageName","_resetLocalStorage","i","_sendMessage","e","isThrottled","throttleNum","_setCfgByKey","addUnloadHook","config","details","coreConfig","configMgr","throttleMgrCfg","_a","_b","curCfg","configInterval","daysOfMonth","_getIntervalConfig","samplingRate","interval","monthInterval","dayInterval","canUseLocalStorage","curDate","_getThrottleDate","date","monthCheck","monthExpand","getUTCFullYear","getUTCMonth","_checkInterval","dayCheck","daySpan","floor","getTime","msgKey","prefix","fix","_isTriggeredOnCurDate","preTriggerDate","_getLocalStorageObj","value","logger","storageName","storageObj","count","obj","JSON","parse","curObj","undefined","dateStr","isNaN","getDate","start","current","isTrigger"],"sources":["/home/veeresh133/app/api-call/react-az/node_modules/@microsoft/applicationinsights-common/dist-es5/ThrottleMgr.js"],"sourcesContent":["import { _throwInternal, arrIndexOf, isNotNullOrUndefined, isNullOrUndefined, onConfigChange, randomValue, safeGetLogger, strTrim } from \"@microsoft/applicationinsights-core-js\";\r\nimport { arrForEach, objForEachKey } from \"@nevware21/ts-utils\";\r\nimport { utlCanUseLocalStorage, utlGetLocalStorage, utlSetLocalStorage } from \"./StorageHelperFuncs\";\r\nimport { _DYN_COUNT, _DYN_DATE, _DYN_DAYS_OF_MONTH, _DYN_DISABLED, _DYN_GET_UTCDATE, _DYN_INTERVAL, _DYN_LENGTH, _DYN_MESSAGE, _DYN_PRE_TRIGGER_DATE, _DYN_PUSH, _DYN_STRINGIFY } from \"./__DynamicConstants\";\r\nvar THROTTLE_STORAGE_PREFIX = \"appInsightsThrottle\";\r\nvar ThrottleMgr = /** @class */ (function () {\r\n    function ThrottleMgr(core, namePrefix) {\r\n        var _self = this;\r\n        var _canUseLocalStorage;\r\n        var _logger;\r\n        var _config;\r\n        var _localStorageObj;\r\n        var _isTriggered; //_isTriggered is to make sure that we only trigger throttle once a day\r\n        var _namePrefix;\r\n        var _queue;\r\n        var _isReady = false;\r\n        var _isSpecificDaysGiven = false;\r\n        _initConfig();\r\n        // Special internal method to allow the unit tests and DebugPlugin to hook embedded objects\r\n        _self[\"_getDbgPlgTargets\"] = function () {\r\n            return [_queue];\r\n        };\r\n        _self.getConfig = function () {\r\n            return _config;\r\n        };\r\n        /**\r\n         * Check if it is the correct day to send message.\r\n         * If _isTriggered is true, even if canThrottle returns true, message will not be sent,\r\n         * because we only allow triggering sendMessage() once a day.\r\n         * @returns if the current date is the valid date to send message\r\n         */\r\n        _self.canThrottle = function (msgId) {\r\n            var localObj = _getLocalStorageObjByKey(msgId);\r\n            var cfg = _getCfgByKey(msgId);\r\n            return _canThrottle(cfg, _canUseLocalStorage, localObj);\r\n        };\r\n        /**\r\n         * Check if throttle is triggered on current day(UTC)\r\n         * if canThrottle returns false, isTriggered will return false\r\n         * @returns if throttle is triggered on current day(UTC)\r\n         */\r\n        _self.isTriggered = function (msgId) {\r\n            return _isTrigger(msgId);\r\n        };\r\n        /**\r\n         * Before isReady set to true, all message will be stored in queue.\r\n         * Message will only be sent out after isReady set to true.\r\n         * Initial and default value: false\r\n         * @returns isReady state\r\n         */\r\n        _self.isReady = function () {\r\n            return _isReady;\r\n        };\r\n        /**\r\n         * Flush all message with given message key in queue with isReady state set to true.\r\n         * @returns if message queue is flushed\r\n         */\r\n        _self.flush = function (msgId) {\r\n            try {\r\n                var queue = _getQueueByKey(msgId);\r\n                if (queue && queue[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    var items = queue.slice(0);\r\n                    _queue[msgId] = [];\r\n                    arrForEach(items, function (item) {\r\n                        _flushMessage(item.msgID, item[_DYN_MESSAGE /* @min:%2emessage */], item.severity, false);\r\n                    });\r\n                    return true;\r\n                }\r\n            }\r\n            catch (err) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return false;\r\n        };\r\n        /**\r\n         * Flush all message in queue with isReady state set to true.\r\n         * @returns if message queue is flushed\r\n         */\r\n        _self.flushAll = function () {\r\n            try {\r\n                if (_queue) {\r\n                    var result_1 = true;\r\n                    objForEachKey(_queue, function (key) {\r\n                        var isFlushed = _self.flush(parseInt(key));\r\n                        result_1 = result_1 && isFlushed;\r\n                    });\r\n                    return result_1;\r\n                }\r\n            }\r\n            catch (err) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return false;\r\n        };\r\n        /**\r\n         * Set isReady State\r\n         * if isReady set to true, message queue will be flushed automatically.\r\n         * @param isReady isReady State\r\n         * @pa\r\n         * @returns if message queue is flushed\r\n         */\r\n        _self.onReadyState = function (isReady, flushAll) {\r\n            if (flushAll === void 0) { flushAll = true; }\r\n            _isReady = isNullOrUndefined(isReady) ? true : isReady;\r\n            if (_isReady && flushAll) {\r\n                return _self.flushAll();\r\n            }\r\n            return null;\r\n        };\r\n        _self.sendMessage = function (msgID, message, severity) {\r\n            return _flushMessage(msgID, message, severity, true);\r\n        };\r\n        function _flushMessage(msgID, message, severity, saveUnsentMsg) {\r\n            if (_isReady) {\r\n                var isSampledIn = _canSampledIn(msgID);\r\n                if (!isSampledIn) {\r\n                    return;\r\n                }\r\n                var cfg = _getCfgByKey(msgID);\r\n                var localStorageObj = _getLocalStorageObjByKey(msgID);\r\n                var canThrottle = _canThrottle(cfg, _canUseLocalStorage, localStorageObj);\r\n                var throttled = false;\r\n                var number = 0;\r\n                var isTriggered = _isTrigger(msgID);\r\n                try {\r\n                    if (canThrottle && !isTriggered) {\r\n                        number = Math.min(cfg.limit.maxSendNumber, localStorageObj[_DYN_COUNT /* @min:%2ecount */] + 1);\r\n                        localStorageObj[_DYN_COUNT /* @min:%2ecount */] = 0;\r\n                        throttled = true;\r\n                        _isTriggered[msgID] = true;\r\n                        localStorageObj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */] = new Date();\r\n                    }\r\n                    else {\r\n                        _isTriggered[msgID] = canThrottle;\r\n                        localStorageObj[_DYN_COUNT /* @min:%2ecount */] += 1;\r\n                    }\r\n                    var localStorageName = _getLocalStorageName(msgID);\r\n                    _resetLocalStorage(_logger, localStorageName, localStorageObj);\r\n                    for (var i = 0; i < number; i++) {\r\n                        _sendMessage(msgID, _logger, message, severity);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return {\r\n                    isThrottled: throttled,\r\n                    throttleNum: number\r\n                };\r\n            }\r\n            else {\r\n                if (!!saveUnsentMsg) {\r\n                    var queue = _getQueueByKey(msgID);\r\n                    queue[_DYN_PUSH /* @min:%2epush */]({\r\n                        msgID: msgID,\r\n                        message: message,\r\n                        severity: severity\r\n                    });\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        function _initConfig() {\r\n            _logger = safeGetLogger(core);\r\n            _isTriggered = {};\r\n            _localStorageObj = {};\r\n            _queue = {};\r\n            _config = {};\r\n            _setCfgByKey(109 /* _eInternalMessageId.DefaultThrottleMsgKey */);\r\n            _namePrefix = isNotNullOrUndefined(namePrefix) ? namePrefix : \"\";\r\n            core.addUnloadHook(onConfigChange(core.config, function (details) {\r\n                var coreConfig = details.cfg;\r\n                _canUseLocalStorage = utlCanUseLocalStorage();\r\n                var configMgr = coreConfig.throttleMgrCfg || {};\r\n                objForEachKey(configMgr, function (key, cfg) {\r\n                    _setCfgByKey(parseInt(key), cfg);\r\n                });\r\n            }));\r\n        }\r\n        function _getCfgByKey(msgID) {\r\n            return _config[msgID] || _config[109 /* _eInternalMessageId.DefaultThrottleMsgKey */];\r\n        }\r\n        function _setCfgByKey(msgID, config) {\r\n            var _a, _b;\r\n            try {\r\n                var cfg = config || {};\r\n                var curCfg = {};\r\n                curCfg[_DYN_DISABLED /* @min:%2edisabled */] = !!cfg[_DYN_DISABLED /* @min:%2edisabled */];\r\n                var configInterval = cfg[_DYN_INTERVAL /* @min:%2einterval */] || {};\r\n                _isSpecificDaysGiven = (configInterval === null || configInterval === void 0 ? void 0 : configInterval.daysOfMonth) && (configInterval === null || configInterval === void 0 ? void 0 : configInterval.daysOfMonth[_DYN_LENGTH /* @min:%2elength */]) > 0;\r\n                curCfg[_DYN_INTERVAL /* @min:%2einterval */] = _getIntervalConfig(configInterval);\r\n                var limit = {\r\n                    samplingRate: ((_a = cfg.limit) === null || _a === void 0 ? void 0 : _a.samplingRate) || 100,\r\n                    // dafault: every time sent only 1 event\r\n                    maxSendNumber: ((_b = cfg.limit) === null || _b === void 0 ? void 0 : _b.maxSendNumber) || 1\r\n                };\r\n                curCfg.limit = limit;\r\n                _config[msgID] = curCfg;\r\n            }\r\n            catch (e) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n        }\r\n        function _getIntervalConfig(interval) {\r\n            interval = interval || {};\r\n            var monthInterval = interval === null || interval === void 0 ? void 0 : interval.monthInterval;\r\n            var dayInterval = interval === null || interval === void 0 ? void 0 : interval.dayInterval;\r\n            // default: send data every 3 month each year\r\n            if (isNullOrUndefined(monthInterval) && isNullOrUndefined(dayInterval)) {\r\n                interval.monthInterval = 3;\r\n                if (!_isSpecificDaysGiven) {\r\n                    // default: send data on 28th\r\n                    interval[_DYN_DAYS_OF_MONTH /* @min:%2edaysOfMonth */] = [28];\r\n                    _isSpecificDaysGiven = true;\r\n                }\r\n            }\r\n            interval = {\r\n                // dafault: sent every three months\r\n                monthInterval: interval === null || interval === void 0 ? void 0 : interval.monthInterval,\r\n                dayInterval: interval === null || interval === void 0 ? void 0 : interval.dayInterval,\r\n                daysOfMonth: interval === null || interval === void 0 ? void 0 : interval.daysOfMonth\r\n            };\r\n            return interval;\r\n        }\r\n        function _canThrottle(config, canUseLocalStorage, localStorageObj) {\r\n            if (config && !config[_DYN_DISABLED /* @min:%2edisabled */] && canUseLocalStorage && isNotNullOrUndefined(localStorageObj)) {\r\n                var curDate = _getThrottleDate();\r\n                var date = localStorageObj[_DYN_DATE /* @min:%2edate */];\r\n                var interval = config[_DYN_INTERVAL /* @min:%2einterval */];\r\n                var monthCheck = 1;\r\n                if (interval === null || interval === void 0 ? void 0 : interval.monthInterval) {\r\n                    var monthExpand = (curDate.getUTCFullYear() - date.getUTCFullYear()) * 12 + curDate.getUTCMonth() - date.getUTCMonth();\r\n                    monthCheck = _checkInterval(interval.monthInterval, 0, monthExpand);\r\n                }\r\n                var dayCheck = 1;\r\n                if (_isSpecificDaysGiven) {\r\n                    dayCheck = arrIndexOf(interval[_DYN_DAYS_OF_MONTH /* @min:%2edaysOfMonth */], curDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]());\r\n                }\r\n                else if (interval === null || interval === void 0 ? void 0 : interval.dayInterval) {\r\n                    var daySpan = Math.floor((curDate.getTime() - date.getTime()) / 86400000);\r\n                    dayCheck = _checkInterval(interval.dayInterval, 0, daySpan);\r\n                }\r\n                return monthCheck >= 0 && dayCheck >= 0;\r\n            }\r\n            return false;\r\n        }\r\n        function _getLocalStorageName(msgKey, prefix) {\r\n            var fix = isNotNullOrUndefined(prefix) ? prefix : \"\";\r\n            if (msgKey) {\r\n                return THROTTLE_STORAGE_PREFIX + fix + \"-\" + msgKey;\r\n            }\r\n            return null;\r\n        }\r\n        // returns if throttle is triggered on current Date\r\n        function _isTriggeredOnCurDate(preTriggerDate) {\r\n            try {\r\n                if (preTriggerDate) {\r\n                    var curDate = new Date();\r\n                    return preTriggerDate.getUTCFullYear() === curDate.getUTCFullYear() &&\r\n                        preTriggerDate.getUTCMonth() === curDate.getUTCMonth() &&\r\n                        preTriggerDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]() === curDate[_DYN_GET_UTCDATE /* @min:%2egetUTCDate */]();\r\n                }\r\n            }\r\n            catch (e) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return false;\r\n        }\r\n        // transfer local storage string value to object that identifies start date, current count and preTriggerDate\r\n        function _getLocalStorageObj(value, logger, storageName) {\r\n            try {\r\n                var storageObj = {\r\n                    date: _getThrottleDate(),\r\n                    count: 0\r\n                };\r\n                if (value) {\r\n                    var obj = JSON.parse(value);\r\n                    var curObj = {\r\n                        date: _getThrottleDate(obj[_DYN_DATE /* @min:%2edate */]) || storageObj[_DYN_DATE /* @min:%2edate */],\r\n                        count: obj[_DYN_COUNT /* @min:%2ecount */] || storageObj[_DYN_COUNT /* @min:%2ecount */],\r\n                        preTriggerDate: obj.preTriggerDate ? _getThrottleDate(obj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */]) : undefined\r\n                    };\r\n                    return curObj;\r\n                }\r\n                else {\r\n                    _resetLocalStorage(logger, storageName, storageObj);\r\n                    return storageObj;\r\n                }\r\n            }\r\n            catch (e) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return null;\r\n        }\r\n        // if datestr is not defined, current date will be returned\r\n        function _getThrottleDate(dateStr) {\r\n            // if new Date() can't be created through the provided dateStr, null will be returned.\r\n            try {\r\n                if (dateStr) {\r\n                    var date = new Date(dateStr);\r\n                    //make sure it is a valid Date Object\r\n                    if (!isNaN(date.getDate())) {\r\n                        return date;\r\n                    }\r\n                }\r\n                else {\r\n                    return new Date();\r\n                }\r\n            }\r\n            catch (e) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return null;\r\n        }\r\n        function _resetLocalStorage(logger, storageName, obj) {\r\n            try {\r\n                return utlSetLocalStorage(logger, storageName, strTrim(JSON[_DYN_STRINGIFY /* @min:%2estringify */](obj)));\r\n            }\r\n            catch (e) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return false;\r\n        }\r\n        function _checkInterval(interval, start, current) {\r\n            if (interval <= 0) {\r\n                return 1;\r\n            }\r\n            // count from start year\r\n            return (current >= start) && (current - start) % interval == 0 ? Math.floor((current - start) / interval) + 1 : -1;\r\n        }\r\n        function _sendMessage(msgID, logger, message, severity) {\r\n            _throwInternal(logger, severity || 1 /* eLoggingSeverity.CRITICAL */, msgID, message);\r\n        }\r\n        // NOTE: config.limit.samplingRate is set to 4 decimal places,\r\n        // so config.limit.samplingRate = 1 means 0.0001%\r\n        function _canSampledIn(msgID) {\r\n            try {\r\n                var cfg = _getCfgByKey(msgID);\r\n                return randomValue(1000000) <= cfg.limit.samplingRate;\r\n            }\r\n            catch (e) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return false;\r\n        }\r\n        function _getLocalStorageObjByKey(key) {\r\n            try {\r\n                var curObj = _localStorageObj[key];\r\n                if (!curObj) {\r\n                    var localStorageName = _getLocalStorageName(key, _namePrefix);\r\n                    curObj = _getLocalStorageObj(utlGetLocalStorage(_logger, localStorageName), _logger, localStorageName);\r\n                    _localStorageObj[key] = curObj;\r\n                }\r\n                return _localStorageObj[key];\r\n            }\r\n            catch (e) {\r\n                // eslint-disable-next-line no-empty\r\n            }\r\n            return null;\r\n        }\r\n        function _isTrigger(key) {\r\n            var isTrigger = _isTriggered[key];\r\n            if (isNullOrUndefined(isTrigger)) {\r\n                isTrigger = false;\r\n                var localStorageObj = _getLocalStorageObjByKey(key);\r\n                if (localStorageObj) {\r\n                    isTrigger = _isTriggeredOnCurDate(localStorageObj[_DYN_PRE_TRIGGER_DATE /* @min:%2epreTriggerDate */]);\r\n                }\r\n                _isTriggered[key] = isTrigger;\r\n            }\r\n            return _isTriggered[key];\r\n        }\r\n        function _getQueueByKey(key) {\r\n            _queue = _queue || {};\r\n            if (isNullOrUndefined(_queue[key])) {\r\n                _queue[key] = [];\r\n            }\r\n            return _queue[key];\r\n        }\r\n    }\r\n    return ThrottleMgr;\r\n}());\r\nexport { ThrottleMgr };\r\n//# sourceMappingURL=ThrottleMgr.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}