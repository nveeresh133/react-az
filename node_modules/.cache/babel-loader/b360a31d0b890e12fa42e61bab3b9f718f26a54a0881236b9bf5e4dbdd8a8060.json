{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\nvar _a, _b;\nimport { arrForEach, arrIndexOf, dumpObj, getDocument, getLazy, getNavigator, isArray, isFunction, isNullOrUndefined, isString, isTruthy, isUndefined, objForEachKey, strEndsWith, strIndexOf, strLeft, strSubstring, strTrim, utcNow } from \"@nevware21/ts-utils\";\nimport { cfgDfMerge } from \"../Config/ConfigDefaultHelpers\";\nimport { createDynamicConfig, onConfigChange } from \"../Config/DynamicConfig\";\nimport { _DYN_ENABLED, _DYN_LENGTH, _DYN_LOGGER, _DYN_PROTOCOL, _DYN_SET_DF, _DYN_SPLIT, _DYN_UNLOAD, _DYN_USER_AGENT } from \"../__DynamicConstants\";\nimport { _throwInternal } from \"./DiagnosticLogger\";\nimport { getLocation, isIE } from \"./EnvUtils\";\nimport { getExceptionName, isNotNullOrUndefined, setValue, strContains } from \"./HelperFuncs\";\nimport { STR_DOMAIN, STR_EMPTY, STR_PATH, UNDEFINED_VALUE } from \"./InternalConstants\";\nvar strToGMTString = \"toGMTString\";\nvar strToUTCString = \"toUTCString\";\nvar strCookie = \"cookie\";\nvar strExpires = \"expires\";\nvar strIsCookieUseDisabled = \"isCookieUseDisabled\";\nvar strDisableCookiesUsage = \"disableCookiesUsage\";\nvar strConfigCookieMgr = \"_ckMgr\";\nvar _supportsCookies = null;\nvar _allowUaSameSite = null;\nvar _parsedCookieValue = null;\nvar _doc;\nvar _cookieCache = {};\nvar _globalCookieConfig = {};\n// // `isCookieUseDisabled` is deprecated, so explicitly casting as a key of IConfiguration to avoid typing error\n// // when both isCookieUseDisabled and disableCookiesUsage are used disableCookiesUsage will take precedent, which is\n// // why its listed first\n/**\r\n * Set the supported dynamic config values as undefined (or an empty object) so that\r\n * any listeners will be informed of any changes.\r\n * Explicitly NOT including the deprecated `isCookieUseDisabled` as we don't want to support\r\n * the v1 deprecated field as dynamic for updates\r\n */\nvar rootDefaultConfig = (_a = {\n  cookieCfg: cfgDfMerge((_b = {}, _b[STR_DOMAIN] = {\n    fb: \"cookieDomain\",\n    dfVal: isNotNullOrUndefined\n  }, _b.path = {\n    fb: \"cookiePath\",\n    dfVal: isNotNullOrUndefined\n  }, _b.enabled = UNDEFINED_VALUE, _b.ignoreCookies = UNDEFINED_VALUE, _b.blockedCookies = UNDEFINED_VALUE, _b)),\n  cookieDomain: UNDEFINED_VALUE,\n  cookiePath: UNDEFINED_VALUE\n}, _a[strDisableCookiesUsage] = UNDEFINED_VALUE, _a);\nfunction _getDoc() {\n  !_doc && (_doc = getLazy(function () {\n    return getDocument();\n  }));\n}\n/**\r\n * @ignore\r\n * DO NOT USE or export from the module, this is exposed as public to support backward compatibility of previous static utility methods only.\r\n * If you want to manager cookies either use the ICookieMgr available from the core instance via getCookieMgr() or create\r\n * your own instance of the CookieMgr and use that.\r\n * Using this directly for enabling / disabling cookie handling will not only affect your usage but EVERY user of cookies.\r\n * Example, if you are using a shared component that is also using Application Insights you will affect their cookie handling.\r\n * @param logger - The DiagnosticLogger to use for reporting errors.\r\n */\nfunction _gblCookieMgr(config, logger) {\n  // Stash the global instance against the BaseCookieMgr class\n  var inst = createCookieMgr[strConfigCookieMgr] || _globalCookieConfig[strConfigCookieMgr];\n  if (!inst) {\n    // Note: not using the getSetValue() helper as that would require always creating a temporary cookieMgr\n    // that ultimately is never used\n    inst = createCookieMgr[strConfigCookieMgr] = createCookieMgr(config, logger);\n    _globalCookieConfig[strConfigCookieMgr] = inst;\n  }\n  return inst;\n}\nfunction _isMgrEnabled(cookieMgr) {\n  if (cookieMgr) {\n    return cookieMgr.isEnabled();\n  }\n  return true;\n}\nfunction _isIgnoredCookie(cookieMgrCfg, name) {\n  if (name && cookieMgrCfg && isArray(cookieMgrCfg.ignoreCookies)) {\n    return arrIndexOf(cookieMgrCfg.ignoreCookies, name) !== -1;\n  }\n  return false;\n}\nfunction _isBlockedCookie(cookieMgrCfg, name) {\n  if (name && cookieMgrCfg && isArray(cookieMgrCfg.blockedCookies)) {\n    if (arrIndexOf(cookieMgrCfg.blockedCookies, name) !== -1) {\n      return true;\n    }\n  }\n  return _isIgnoredCookie(cookieMgrCfg, name);\n}\nfunction _isCfgEnabled(rootConfig, cookieMgrConfig) {\n  var isCfgEnabled = cookieMgrConfig[_DYN_ENABLED /* @min:%2eenabled */];\n  if (isNullOrUndefined(isCfgEnabled)) {\n    // Set the enabled from the provided setting or the legacy root values\n    var cookieEnabled = void 0;\n    // This field is deprecated and dynamic updates will not be fully supported\n    if (!isUndefined(rootConfig[strIsCookieUseDisabled])) {\n      cookieEnabled = !rootConfig[strIsCookieUseDisabled];\n    }\n    // If this value is defined it takes precedent over the above\n    if (!isUndefined(rootConfig[strDisableCookiesUsage])) {\n      cookieEnabled = !rootConfig[strDisableCookiesUsage];\n    }\n    // Not setting the cookieMgrConfig.enabled as that will update (set) the global dynamic config\n    // So future \"updates\" then may not be as expected\n    isCfgEnabled = cookieEnabled;\n  }\n  return isCfgEnabled;\n}\n/**\r\n * Helper to return the ICookieMgr from the core (if not null/undefined) or a default implementation\r\n * associated with the configuration or a legacy default.\r\n * @param core\r\n * @param config\r\n * @returns\r\n */\nexport function safeGetCookieMgr(core, config) {\n  var cookieMgr;\n  if (core) {\n    // Always returns an instance\n    cookieMgr = core.getCookieMgr();\n  } else if (config) {\n    var cookieCfg = config.cookieCfg;\n    if (cookieCfg && cookieCfg[strConfigCookieMgr]) {\n      cookieMgr = cookieCfg[strConfigCookieMgr];\n    } else {\n      cookieMgr = createCookieMgr(config);\n    }\n  }\n  if (!cookieMgr) {\n    // Get or initialize the default global (legacy) cookie manager if we couldn't find one\n    cookieMgr = _gblCookieMgr(config, (core || {})[_DYN_LOGGER /* @min:%2elogger */]);\n  }\n  return cookieMgr;\n}\nexport function createCookieMgr(rootConfig, logger) {\n  var _a;\n  var cookieMgrConfig;\n  var _path;\n  var _domain;\n  var unloadHandler;\n  // Explicitly checking against false, so that setting to undefined will === true\n  var _enabled;\n  var _getCookieFn;\n  var _setCookieFn;\n  var _delCookieFn;\n  // Make sure the root config is dynamic as it may be the global config\n  rootConfig = createDynamicConfig(rootConfig || _globalCookieConfig, null, logger).cfg;\n  // Will get recalled if the referenced configuration is changed\n  unloadHandler = onConfigChange(rootConfig, function (details) {\n    // Make sure the root config has all of the the defaults to the root config to ensure they are dynamic\n    details[_DYN_SET_DF /* @min:%2esetDf */](details.cfg, rootDefaultConfig);\n    // Create and apply the defaults to the cookieCfg element\n    cookieMgrConfig = details.ref(details.cfg, \"cookieCfg\"); // details.setDf(details.cfg.cookieCfg, defaultConfig);\n    _path = cookieMgrConfig[STR_PATH /* @min:%2epath */] || \"/\";\n    _domain = cookieMgrConfig[STR_DOMAIN /* @min:%2edomain */];\n    // Explicitly checking against false, so that setting to undefined will === true\n    _enabled = _isCfgEnabled(rootConfig, cookieMgrConfig) !== false;\n    _getCookieFn = cookieMgrConfig.getCookie || _getCookieValue;\n    _setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;\n    _delCookieFn = cookieMgrConfig.delCookie || _setCookieValue;\n  }, logger);\n  var cookieMgr = (_a = {\n    isEnabled: function () {\n      var enabled = _isCfgEnabled(rootConfig, cookieMgrConfig) !== false && _enabled && areCookiesSupported(logger);\n      // Using an indirect lookup for any global cookie manager to support tree shaking for SDK's\n      // that don't use the \"applicationinsights-core\" version of the default cookie function\n      var gblManager = _globalCookieConfig[strConfigCookieMgr];\n      if (enabled && gblManager && cookieMgr !== gblManager) {\n        // Make sure the GlobalCookie Manager instance (if not this instance) is also enabled.\n        // As the global (deprecated) functions may have been called (for backward compatibility)\n        enabled = _isMgrEnabled(gblManager);\n      }\n      return enabled;\n    },\n    setEnabled: function (value) {\n      // Explicitly checking against false, so that setting to undefined will === true\n      _enabled = value !== false;\n      cookieMgrConfig[_DYN_ENABLED /* @min:%2eenabled */] = value;\n    },\n    set: function (name, value, maxAgeSec, domain, path) {\n      var result = false;\n      if (_isMgrEnabled(cookieMgr) && !_isBlockedCookie(cookieMgrConfig, name)) {\n        var values = {};\n        var theValue = strTrim(value || STR_EMPTY);\n        var idx = strIndexOf(theValue, \";\");\n        if (idx !== -1) {\n          theValue = strTrim(strLeft(value, idx));\n          values = _extractParts(strSubstring(value, idx + 1));\n        }\n        // Only update domain if not already present (isUndefined) and the value is truthy (not null, undefined or empty string)\n        setValue(values, STR_DOMAIN, domain || _domain, isTruthy, isUndefined);\n        if (!isNullOrUndefined(maxAgeSec)) {\n          var _isIE = isIE();\n          if (isUndefined(values[strExpires])) {\n            var nowMs = utcNow();\n            // Only add expires if not already present\n            var expireMs = nowMs + maxAgeSec * 1000;\n            // Sanity check, if zero or -ve then ignore\n            if (expireMs > 0) {\n              var expiry = new Date();\n              expiry.setTime(expireMs);\n              setValue(values, strExpires, _formatDate(expiry, !_isIE ? strToUTCString : strToGMTString) || _formatDate(expiry, _isIE ? strToGMTString : strToUTCString) || STR_EMPTY, isTruthy);\n            }\n          }\n          if (!_isIE) {\n            // Only replace if not already present\n            setValue(values, \"max-age\", STR_EMPTY + maxAgeSec, null, isUndefined);\n          }\n        }\n        var location_1 = getLocation();\n        if (location_1 && location_1[_DYN_PROTOCOL /* @min:%2eprotocol */] === \"https:\") {\n          setValue(values, \"secure\", null, null, isUndefined);\n          // Only set same site if not also secure\n          if (_allowUaSameSite === null) {\n            _allowUaSameSite = !uaDisallowsSameSiteNone((getNavigator() || {})[_DYN_USER_AGENT /* @min:%2euserAgent */]);\n          }\n          if (_allowUaSameSite) {\n            setValue(values, \"SameSite\", \"None\", null, isUndefined);\n          }\n        }\n        setValue(values, STR_PATH, path || _path, null, isUndefined);\n        //let setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;\n        _setCookieFn(name, _formatCookieValue(theValue, values));\n        result = true;\n      }\n      return result;\n    },\n    get: function (name) {\n      var value = STR_EMPTY;\n      if (_isMgrEnabled(cookieMgr) && !_isIgnoredCookie(cookieMgrConfig, name)) {\n        value = _getCookieFn(name);\n      }\n      return value;\n    },\n    del: function (name, path) {\n      var result = false;\n      if (_isMgrEnabled(cookieMgr)) {\n        // Only remove the cookie if the manager and cookie support has not been disabled\n        result = cookieMgr.purge(name, path);\n      }\n      return result;\n    },\n    purge: function (name, path) {\n      var _a;\n      var result = false;\n      if (areCookiesSupported(logger)) {\n        // Setting the expiration date in the past immediately removes the cookie\n        var values = (_a = {}, _a[STR_PATH] = path ? path : \"/\", _a[strExpires] = \"Thu, 01 Jan 1970 00:00:01 GMT\", _a);\n        if (!isIE()) {\n          // Set max age to expire now\n          values[\"max-age\"] = \"0\";\n        }\n        // let delCookie = cookieMgrConfig.delCookie || _setCookieValue;\n        _delCookieFn(name, _formatCookieValue(STR_EMPTY, values));\n        result = true;\n      }\n      return result;\n    }\n  }, _a[_DYN_UNLOAD /* @min:unload */] = function (isAsync) {\n    unloadHandler && unloadHandler.rm();\n    unloadHandler = null;\n  }, _a);\n  // Associated this cookie manager with the config\n  cookieMgr[strConfigCookieMgr] = cookieMgr;\n  return cookieMgr;\n}\n/*\r\n* Helper method to tell if document.cookie object is supported by the runtime\r\n*/\nexport function areCookiesSupported(logger) {\n  if (_supportsCookies === null) {\n    _supportsCookies = false;\n    !_doc && _getDoc();\n    try {\n      var doc = _doc.v || {};\n      _supportsCookies = doc[strCookie] !== undefined;\n    } catch (e) {\n      _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 68 /* _eInternalMessageId.CannotAccessCookie */, \"Cannot access document.cookie - \" + getExceptionName(e), {\n        exception: dumpObj(e)\n      });\n    }\n  }\n  return _supportsCookies;\n}\nfunction _extractParts(theValue) {\n  var values = {};\n  if (theValue && theValue[_DYN_LENGTH /* @min:%2elength */]) {\n    var parts = strTrim(theValue)[_DYN_SPLIT /* @min:%2esplit */](\";\");\n    arrForEach(parts, function (thePart) {\n      thePart = strTrim(thePart || STR_EMPTY);\n      if (thePart) {\n        var idx = strIndexOf(thePart, \"=\");\n        if (idx === -1) {\n          values[thePart] = null;\n        } else {\n          values[strTrim(strLeft(thePart, idx))] = strTrim(strSubstring(thePart, idx + 1));\n        }\n      }\n    });\n  }\n  return values;\n}\nfunction _formatDate(theDate, func) {\n  if (isFunction(theDate[func])) {\n    return theDate[func]();\n  }\n  return null;\n}\nfunction _formatCookieValue(value, values) {\n  var cookieValue = value || STR_EMPTY;\n  objForEachKey(values, function (name, theValue) {\n    cookieValue += \"; \" + name + (!isNullOrUndefined(theValue) ? \"=\" + theValue : STR_EMPTY);\n  });\n  return cookieValue;\n}\nfunction _getCookieValue(name) {\n  var cookieValue = STR_EMPTY;\n  !_doc && _getDoc();\n  if (_doc.v) {\n    var theCookie = _doc.v[strCookie] || STR_EMPTY;\n    if (_parsedCookieValue !== theCookie) {\n      _cookieCache = _extractParts(theCookie);\n      _parsedCookieValue = theCookie;\n    }\n    cookieValue = strTrim(_cookieCache[name] || STR_EMPTY);\n  }\n  return cookieValue;\n}\nfunction _setCookieValue(name, cookieValue) {\n  !_doc && _getDoc();\n  if (_doc.v) {\n    _doc.v[strCookie] = name + \"=\" + cookieValue;\n  }\n}\nexport function uaDisallowsSameSiteNone(userAgent) {\n  if (!isString(userAgent)) {\n    return false;\n  }\n  // Cover all iOS based browsers here. This includes:\n  // - Safari on iOS 12 for iPhone, iPod Touch, iPad\n  // - WkWebview on iOS 12 for iPhone, iPod Touch, iPad\n  // - Chrome on iOS 12 for iPhone, iPod Touch, iPad\n  // All of which are broken by SameSite=None, because they use the iOS networking stack\n  if (strContains(userAgent, \"CPU iPhone OS 12\") || strContains(userAgent, \"iPad; CPU OS 12\")) {\n    return true;\n  }\n  // Cover Mac OS X based browsers that use the Mac OS networking stack. This includes:\n  // - Safari on Mac OS X\n  // This does not include:\n  // - Internal browser on Mac OS X\n  // - Chrome on Mac OS X\n  // - Chromium on Mac OS X\n  // Because they do not use the Mac OS networking stack.\n  if (strContains(userAgent, \"Macintosh; Intel Mac OS X 10_14\") && strContains(userAgent, \"Version/\") && strContains(userAgent, \"Safari\")) {\n    return true;\n  }\n  // Cover Mac OS X internal browsers that use the Mac OS networking stack. This includes:\n  // - Internal browser on Mac OS X\n  // This does not include:\n  // - Safari on Mac OS X\n  // - Chrome on Mac OS X\n  // - Chromium on Mac OS X\n  // Because they do not use the Mac OS networking stack.\n  if (strContains(userAgent, \"Macintosh; Intel Mac OS X 10_14\") && strEndsWith(userAgent, \"AppleWebKit/605.1.15 (KHTML, like Gecko)\")) {\n    return true;\n  }\n  // Cover Chrome 50-69, because some versions are broken by SameSite=None, and none in this range require it.\n  // Note: this covers some pre-Chromium Edge versions, but pre-Chromim Edge does not require SameSite=None, so this is fine.\n  // Note: this regex applies to Windows, Mac OS X, and Linux, deliberately.\n  if (strContains(userAgent, \"Chrome/5\") || strContains(userAgent, \"Chrome/6\")) {\n    return true;\n  }\n  // Unreal Engine runs Chromium 59, but does not advertise as Chrome until 4.23. Treat versions of Unreal\n  // that don't specify their Chrome version as lacking support for SameSite=None.\n  if (strContains(userAgent, \"UnrealEngine\") && !strContains(userAgent, \"Chrome\")) {\n    return true;\n  }\n  // UCBrowser < 12.13.2 ignores Set-Cookie headers with SameSite=None\n  // NB: this rule isn't complete - you need regex to make a complete rule.\n  // See: https://www.chromium.org/updates/same-site/incompatible-clients\n  if (strContains(userAgent, \"UCBrowser/12\") || strContains(userAgent, \"UCBrowser/11\")) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["_a","_b","arrForEach","arrIndexOf","dumpObj","getDocument","getLazy","getNavigator","isArray","isFunction","isNullOrUndefined","isString","isTruthy","isUndefined","objForEachKey","strEndsWith","strIndexOf","strLeft","strSubstring","strTrim","utcNow","cfgDfMerge","createDynamicConfig","onConfigChange","_DYN_ENABLED","_DYN_LENGTH","_DYN_LOGGER","_DYN_PROTOCOL","_DYN_SET_DF","_DYN_SPLIT","_DYN_UNLOAD","_DYN_USER_AGENT","_throwInternal","getLocation","isIE","getExceptionName","isNotNullOrUndefined","setValue","strContains","STR_DOMAIN","STR_EMPTY","STR_PATH","UNDEFINED_VALUE","strToGMTString","strToUTCString","strCookie","strExpires","strIsCookieUseDisabled","strDisableCookiesUsage","strConfigCookieMgr","_supportsCookies","_allowUaSameSite","_parsedCookieValue","_doc","_cookieCache","_globalCookieConfig","rootDefaultConfig","cookieCfg","fb","dfVal","path","enabled","ignoreCookies","blockedCookies","cookieDomain","cookiePath","_getDoc","_gblCookieMgr","config","logger","inst","createCookieMgr","_isMgrEnabled","cookieMgr","isEnabled","_isIgnoredCookie","cookieMgrCfg","name","_isBlockedCookie","_isCfgEnabled","rootConfig","cookieMgrConfig","isCfgEnabled","cookieEnabled","safeGetCookieMgr","core","getCookieMgr","_path","_domain","unloadHandler","_enabled","_getCookieFn","_setCookieFn","_delCookieFn","cfg","details","ref","getCookie","_getCookieValue","setCookie","_setCookieValue","delCookie","areCookiesSupported","gblManager","setEnabled","value","set","maxAgeSec","domain","result","values","theValue","idx","_extractParts","_isIE","nowMs","expireMs","expiry","Date","setTime","_formatDate","location_1","uaDisallowsSameSiteNone","_formatCookieValue","get","del","purge","isAsync","rm","doc","v","undefined","e","exception","parts","thePart","theDate","func","cookieValue","theCookie","userAgent"],"sources":["/home/veeresh133/app/json-holder-api/react-az/node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/CookieMgr.js"],"sourcesContent":["var _a, _b;\r\nimport { arrForEach, arrIndexOf, dumpObj, getDocument, getLazy, getNavigator, isArray, isFunction, isNullOrUndefined, isString, isTruthy, isUndefined, objForEachKey, strEndsWith, strIndexOf, strLeft, strSubstring, strTrim, utcNow } from \"@nevware21/ts-utils\";\r\nimport { cfgDfMerge } from \"../Config/ConfigDefaultHelpers\";\r\nimport { createDynamicConfig, onConfigChange } from \"../Config/DynamicConfig\";\r\nimport { _DYN_ENABLED, _DYN_LENGTH, _DYN_LOGGER, _DYN_PROTOCOL, _DYN_SET_DF, _DYN_SPLIT, _DYN_UNLOAD, _DYN_USER_AGENT } from \"../__DynamicConstants\";\r\nimport { _throwInternal } from \"./DiagnosticLogger\";\r\nimport { getLocation, isIE } from \"./EnvUtils\";\r\nimport { getExceptionName, isNotNullOrUndefined, setValue, strContains } from \"./HelperFuncs\";\r\nimport { STR_DOMAIN, STR_EMPTY, STR_PATH, UNDEFINED_VALUE } from \"./InternalConstants\";\r\nvar strToGMTString = \"toGMTString\";\r\nvar strToUTCString = \"toUTCString\";\r\nvar strCookie = \"cookie\";\r\nvar strExpires = \"expires\";\r\nvar strIsCookieUseDisabled = \"isCookieUseDisabled\";\r\nvar strDisableCookiesUsage = \"disableCookiesUsage\";\r\nvar strConfigCookieMgr = \"_ckMgr\";\r\nvar _supportsCookies = null;\r\nvar _allowUaSameSite = null;\r\nvar _parsedCookieValue = null;\r\nvar _doc;\r\nvar _cookieCache = {};\r\nvar _globalCookieConfig = {};\r\n// // `isCookieUseDisabled` is deprecated, so explicitly casting as a key of IConfiguration to avoid typing error\r\n// // when both isCookieUseDisabled and disableCookiesUsage are used disableCookiesUsage will take precedent, which is\r\n// // why its listed first\r\n/**\r\n * Set the supported dynamic config values as undefined (or an empty object) so that\r\n * any listeners will be informed of any changes.\r\n * Explicitly NOT including the deprecated `isCookieUseDisabled` as we don't want to support\r\n * the v1 deprecated field as dynamic for updates\r\n */\r\nvar rootDefaultConfig = (_a = {\r\n        cookieCfg: cfgDfMerge((_b = {},\r\n            _b[STR_DOMAIN] = { fb: \"cookieDomain\", dfVal: isNotNullOrUndefined },\r\n            _b.path = { fb: \"cookiePath\", dfVal: isNotNullOrUndefined },\r\n            _b.enabled = UNDEFINED_VALUE,\r\n            _b.ignoreCookies = UNDEFINED_VALUE,\r\n            _b.blockedCookies = UNDEFINED_VALUE,\r\n            _b)),\r\n        cookieDomain: UNDEFINED_VALUE,\r\n        cookiePath: UNDEFINED_VALUE\r\n    },\r\n    _a[strDisableCookiesUsage] = UNDEFINED_VALUE,\r\n    _a);\r\nfunction _getDoc() {\r\n    !_doc && (_doc = getLazy(function () { return getDocument(); }));\r\n}\r\n/**\r\n * @ignore\r\n * DO NOT USE or export from the module, this is exposed as public to support backward compatibility of previous static utility methods only.\r\n * If you want to manager cookies either use the ICookieMgr available from the core instance via getCookieMgr() or create\r\n * your own instance of the CookieMgr and use that.\r\n * Using this directly for enabling / disabling cookie handling will not only affect your usage but EVERY user of cookies.\r\n * Example, if you are using a shared component that is also using Application Insights you will affect their cookie handling.\r\n * @param logger - The DiagnosticLogger to use for reporting errors.\r\n */\r\nfunction _gblCookieMgr(config, logger) {\r\n    // Stash the global instance against the BaseCookieMgr class\r\n    var inst = createCookieMgr[strConfigCookieMgr] || _globalCookieConfig[strConfigCookieMgr];\r\n    if (!inst) {\r\n        // Note: not using the getSetValue() helper as that would require always creating a temporary cookieMgr\r\n        // that ultimately is never used\r\n        inst = createCookieMgr[strConfigCookieMgr] = createCookieMgr(config, logger);\r\n        _globalCookieConfig[strConfigCookieMgr] = inst;\r\n    }\r\n    return inst;\r\n}\r\nfunction _isMgrEnabled(cookieMgr) {\r\n    if (cookieMgr) {\r\n        return cookieMgr.isEnabled();\r\n    }\r\n    return true;\r\n}\r\nfunction _isIgnoredCookie(cookieMgrCfg, name) {\r\n    if (name && cookieMgrCfg && isArray(cookieMgrCfg.ignoreCookies)) {\r\n        return arrIndexOf(cookieMgrCfg.ignoreCookies, name) !== -1;\r\n    }\r\n    return false;\r\n}\r\nfunction _isBlockedCookie(cookieMgrCfg, name) {\r\n    if (name && cookieMgrCfg && isArray(cookieMgrCfg.blockedCookies)) {\r\n        if (arrIndexOf(cookieMgrCfg.blockedCookies, name) !== -1) {\r\n            return true;\r\n        }\r\n    }\r\n    return _isIgnoredCookie(cookieMgrCfg, name);\r\n}\r\nfunction _isCfgEnabled(rootConfig, cookieMgrConfig) {\r\n    var isCfgEnabled = cookieMgrConfig[_DYN_ENABLED /* @min:%2eenabled */];\r\n    if (isNullOrUndefined(isCfgEnabled)) {\r\n        // Set the enabled from the provided setting or the legacy root values\r\n        var cookieEnabled = void 0;\r\n        // This field is deprecated and dynamic updates will not be fully supported\r\n        if (!isUndefined(rootConfig[strIsCookieUseDisabled])) {\r\n            cookieEnabled = !rootConfig[strIsCookieUseDisabled];\r\n        }\r\n        // If this value is defined it takes precedent over the above\r\n        if (!isUndefined(rootConfig[strDisableCookiesUsage])) {\r\n            cookieEnabled = !rootConfig[strDisableCookiesUsage];\r\n        }\r\n        // Not setting the cookieMgrConfig.enabled as that will update (set) the global dynamic config\r\n        // So future \"updates\" then may not be as expected\r\n        isCfgEnabled = cookieEnabled;\r\n    }\r\n    return isCfgEnabled;\r\n}\r\n/**\r\n * Helper to return the ICookieMgr from the core (if not null/undefined) or a default implementation\r\n * associated with the configuration or a legacy default.\r\n * @param core\r\n * @param config\r\n * @returns\r\n */\r\nexport function safeGetCookieMgr(core, config) {\r\n    var cookieMgr;\r\n    if (core) {\r\n        // Always returns an instance\r\n        cookieMgr = core.getCookieMgr();\r\n    }\r\n    else if (config) {\r\n        var cookieCfg = config.cookieCfg;\r\n        if (cookieCfg && cookieCfg[strConfigCookieMgr]) {\r\n            cookieMgr = cookieCfg[strConfigCookieMgr];\r\n        }\r\n        else {\r\n            cookieMgr = createCookieMgr(config);\r\n        }\r\n    }\r\n    if (!cookieMgr) {\r\n        // Get or initialize the default global (legacy) cookie manager if we couldn't find one\r\n        cookieMgr = _gblCookieMgr(config, (core || {})[_DYN_LOGGER /* @min:%2elogger */]);\r\n    }\r\n    return cookieMgr;\r\n}\r\nexport function createCookieMgr(rootConfig, logger) {\r\n    var _a;\r\n    var cookieMgrConfig;\r\n    var _path;\r\n    var _domain;\r\n    var unloadHandler;\r\n    // Explicitly checking against false, so that setting to undefined will === true\r\n    var _enabled;\r\n    var _getCookieFn;\r\n    var _setCookieFn;\r\n    var _delCookieFn;\r\n    // Make sure the root config is dynamic as it may be the global config\r\n    rootConfig = createDynamicConfig(rootConfig || _globalCookieConfig, null, logger).cfg;\r\n    // Will get recalled if the referenced configuration is changed\r\n    unloadHandler = onConfigChange(rootConfig, function (details) {\r\n        // Make sure the root config has all of the the defaults to the root config to ensure they are dynamic\r\n        details[_DYN_SET_DF /* @min:%2esetDf */](details.cfg, rootDefaultConfig);\r\n        // Create and apply the defaults to the cookieCfg element\r\n        cookieMgrConfig = details.ref(details.cfg, \"cookieCfg\"); // details.setDf(details.cfg.cookieCfg, defaultConfig);\r\n        _path = cookieMgrConfig[STR_PATH /* @min:%2epath */] || \"/\";\r\n        _domain = cookieMgrConfig[STR_DOMAIN /* @min:%2edomain */];\r\n        // Explicitly checking against false, so that setting to undefined will === true\r\n        _enabled = _isCfgEnabled(rootConfig, cookieMgrConfig) !== false;\r\n        _getCookieFn = cookieMgrConfig.getCookie || _getCookieValue;\r\n        _setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;\r\n        _delCookieFn = cookieMgrConfig.delCookie || _setCookieValue;\r\n    }, logger);\r\n    var cookieMgr = (_a = {\r\n            isEnabled: function () {\r\n                var enabled = _isCfgEnabled(rootConfig, cookieMgrConfig) !== false && _enabled && areCookiesSupported(logger);\r\n                // Using an indirect lookup for any global cookie manager to support tree shaking for SDK's\r\n                // that don't use the \"applicationinsights-core\" version of the default cookie function\r\n                var gblManager = _globalCookieConfig[strConfigCookieMgr];\r\n                if (enabled && gblManager && cookieMgr !== gblManager) {\r\n                    // Make sure the GlobalCookie Manager instance (if not this instance) is also enabled.\r\n                    // As the global (deprecated) functions may have been called (for backward compatibility)\r\n                    enabled = _isMgrEnabled(gblManager);\r\n                }\r\n                return enabled;\r\n            },\r\n            setEnabled: function (value) {\r\n                // Explicitly checking against false, so that setting to undefined will === true\r\n                _enabled = value !== false;\r\n                cookieMgrConfig[_DYN_ENABLED /* @min:%2eenabled */] = value;\r\n            },\r\n            set: function (name, value, maxAgeSec, domain, path) {\r\n                var result = false;\r\n                if (_isMgrEnabled(cookieMgr) && !_isBlockedCookie(cookieMgrConfig, name)) {\r\n                    var values = {};\r\n                    var theValue = strTrim(value || STR_EMPTY);\r\n                    var idx = strIndexOf(theValue, \";\");\r\n                    if (idx !== -1) {\r\n                        theValue = strTrim(strLeft(value, idx));\r\n                        values = _extractParts(strSubstring(value, idx + 1));\r\n                    }\r\n                    // Only update domain if not already present (isUndefined) and the value is truthy (not null, undefined or empty string)\r\n                    setValue(values, STR_DOMAIN, domain || _domain, isTruthy, isUndefined);\r\n                    if (!isNullOrUndefined(maxAgeSec)) {\r\n                        var _isIE = isIE();\r\n                        if (isUndefined(values[strExpires])) {\r\n                            var nowMs = utcNow();\r\n                            // Only add expires if not already present\r\n                            var expireMs = nowMs + (maxAgeSec * 1000);\r\n                            // Sanity check, if zero or -ve then ignore\r\n                            if (expireMs > 0) {\r\n                                var expiry = new Date();\r\n                                expiry.setTime(expireMs);\r\n                                setValue(values, strExpires, _formatDate(expiry, !_isIE ? strToUTCString : strToGMTString) || _formatDate(expiry, _isIE ? strToGMTString : strToUTCString) || STR_EMPTY, isTruthy);\r\n                            }\r\n                        }\r\n                        if (!_isIE) {\r\n                            // Only replace if not already present\r\n                            setValue(values, \"max-age\", STR_EMPTY + maxAgeSec, null, isUndefined);\r\n                        }\r\n                    }\r\n                    var location_1 = getLocation();\r\n                    if (location_1 && location_1[_DYN_PROTOCOL /* @min:%2eprotocol */] === \"https:\") {\r\n                        setValue(values, \"secure\", null, null, isUndefined);\r\n                        // Only set same site if not also secure\r\n                        if (_allowUaSameSite === null) {\r\n                            _allowUaSameSite = !uaDisallowsSameSiteNone((getNavigator() || {})[_DYN_USER_AGENT /* @min:%2euserAgent */]);\r\n                        }\r\n                        if (_allowUaSameSite) {\r\n                            setValue(values, \"SameSite\", \"None\", null, isUndefined);\r\n                        }\r\n                    }\r\n                    setValue(values, STR_PATH, path || _path, null, isUndefined);\r\n                    //let setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;\r\n                    _setCookieFn(name, _formatCookieValue(theValue, values));\r\n                    result = true;\r\n                }\r\n                return result;\r\n            },\r\n            get: function (name) {\r\n                var value = STR_EMPTY;\r\n                if (_isMgrEnabled(cookieMgr) && !_isIgnoredCookie(cookieMgrConfig, name)) {\r\n                    value = _getCookieFn(name);\r\n                }\r\n                return value;\r\n            },\r\n            del: function (name, path) {\r\n                var result = false;\r\n                if (_isMgrEnabled(cookieMgr)) {\r\n                    // Only remove the cookie if the manager and cookie support has not been disabled\r\n                    result = cookieMgr.purge(name, path);\r\n                }\r\n                return result;\r\n            },\r\n            purge: function (name, path) {\r\n                var _a;\r\n                var result = false;\r\n                if (areCookiesSupported(logger)) {\r\n                    // Setting the expiration date in the past immediately removes the cookie\r\n                    var values = (_a = {},\r\n                        _a[STR_PATH] = path ? path : \"/\",\r\n                        _a[strExpires] = \"Thu, 01 Jan 1970 00:00:01 GMT\",\r\n                        _a);\r\n                    if (!isIE()) {\r\n                        // Set max age to expire now\r\n                        values[\"max-age\"] = \"0\";\r\n                    }\r\n                    // let delCookie = cookieMgrConfig.delCookie || _setCookieValue;\r\n                    _delCookieFn(name, _formatCookieValue(STR_EMPTY, values));\r\n                    result = true;\r\n                }\r\n                return result;\r\n            }\r\n        },\r\n        _a[_DYN_UNLOAD /* @min:unload */] = function (isAsync) {\r\n            unloadHandler && unloadHandler.rm();\r\n            unloadHandler = null;\r\n        },\r\n        _a);\r\n    // Associated this cookie manager with the config\r\n    cookieMgr[strConfigCookieMgr] = cookieMgr;\r\n    return cookieMgr;\r\n}\r\n/*\r\n* Helper method to tell if document.cookie object is supported by the runtime\r\n*/\r\nexport function areCookiesSupported(logger) {\r\n    if (_supportsCookies === null) {\r\n        _supportsCookies = false;\r\n        !_doc && _getDoc();\r\n        try {\r\n            var doc = _doc.v || {};\r\n            _supportsCookies = doc[strCookie] !== undefined;\r\n        }\r\n        catch (e) {\r\n            _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 68 /* _eInternalMessageId.CannotAccessCookie */, \"Cannot access document.cookie - \" + getExceptionName(e), { exception: dumpObj(e) });\r\n        }\r\n    }\r\n    return _supportsCookies;\r\n}\r\nfunction _extractParts(theValue) {\r\n    var values = {};\r\n    if (theValue && theValue[_DYN_LENGTH /* @min:%2elength */]) {\r\n        var parts = strTrim(theValue)[_DYN_SPLIT /* @min:%2esplit */](\";\");\r\n        arrForEach(parts, function (thePart) {\r\n            thePart = strTrim(thePart || STR_EMPTY);\r\n            if (thePart) {\r\n                var idx = strIndexOf(thePart, \"=\");\r\n                if (idx === -1) {\r\n                    values[thePart] = null;\r\n                }\r\n                else {\r\n                    values[strTrim(strLeft(thePart, idx))] = strTrim(strSubstring(thePart, idx + 1));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return values;\r\n}\r\nfunction _formatDate(theDate, func) {\r\n    if (isFunction(theDate[func])) {\r\n        return theDate[func]();\r\n    }\r\n    return null;\r\n}\r\nfunction _formatCookieValue(value, values) {\r\n    var cookieValue = value || STR_EMPTY;\r\n    objForEachKey(values, function (name, theValue) {\r\n        cookieValue += \"; \" + name + (!isNullOrUndefined(theValue) ? \"=\" + theValue : STR_EMPTY);\r\n    });\r\n    return cookieValue;\r\n}\r\nfunction _getCookieValue(name) {\r\n    var cookieValue = STR_EMPTY;\r\n    !_doc && _getDoc();\r\n    if (_doc.v) {\r\n        var theCookie = _doc.v[strCookie] || STR_EMPTY;\r\n        if (_parsedCookieValue !== theCookie) {\r\n            _cookieCache = _extractParts(theCookie);\r\n            _parsedCookieValue = theCookie;\r\n        }\r\n        cookieValue = strTrim(_cookieCache[name] || STR_EMPTY);\r\n    }\r\n    return cookieValue;\r\n}\r\nfunction _setCookieValue(name, cookieValue) {\r\n    !_doc && _getDoc();\r\n    if (_doc.v) {\r\n        _doc.v[strCookie] = name + \"=\" + cookieValue;\r\n    }\r\n}\r\nexport function uaDisallowsSameSiteNone(userAgent) {\r\n    if (!isString(userAgent)) {\r\n        return false;\r\n    }\r\n    // Cover all iOS based browsers here. This includes:\r\n    // - Safari on iOS 12 for iPhone, iPod Touch, iPad\r\n    // - WkWebview on iOS 12 for iPhone, iPod Touch, iPad\r\n    // - Chrome on iOS 12 for iPhone, iPod Touch, iPad\r\n    // All of which are broken by SameSite=None, because they use the iOS networking stack\r\n    if (strContains(userAgent, \"CPU iPhone OS 12\") || strContains(userAgent, \"iPad; CPU OS 12\")) {\r\n        return true;\r\n    }\r\n    // Cover Mac OS X based browsers that use the Mac OS networking stack. This includes:\r\n    // - Safari on Mac OS X\r\n    // This does not include:\r\n    // - Internal browser on Mac OS X\r\n    // - Chrome on Mac OS X\r\n    // - Chromium on Mac OS X\r\n    // Because they do not use the Mac OS networking stack.\r\n    if (strContains(userAgent, \"Macintosh; Intel Mac OS X 10_14\") && strContains(userAgent, \"Version/\") && strContains(userAgent, \"Safari\")) {\r\n        return true;\r\n    }\r\n    // Cover Mac OS X internal browsers that use the Mac OS networking stack. This includes:\r\n    // - Internal browser on Mac OS X\r\n    // This does not include:\r\n    // - Safari on Mac OS X\r\n    // - Chrome on Mac OS X\r\n    // - Chromium on Mac OS X\r\n    // Because they do not use the Mac OS networking stack.\r\n    if (strContains(userAgent, \"Macintosh; Intel Mac OS X 10_14\") && strEndsWith(userAgent, \"AppleWebKit/605.1.15 (KHTML, like Gecko)\")) {\r\n        return true;\r\n    }\r\n    // Cover Chrome 50-69, because some versions are broken by SameSite=None, and none in this range require it.\r\n    // Note: this covers some pre-Chromium Edge versions, but pre-Chromim Edge does not require SameSite=None, so this is fine.\r\n    // Note: this regex applies to Windows, Mac OS X, and Linux, deliberately.\r\n    if (strContains(userAgent, \"Chrome/5\") || strContains(userAgent, \"Chrome/6\")) {\r\n        return true;\r\n    }\r\n    // Unreal Engine runs Chromium 59, but does not advertise as Chrome until 4.23. Treat versions of Unreal\r\n    // that don't specify their Chrome version as lacking support for SameSite=None.\r\n    if (strContains(userAgent, \"UnrealEngine\") && !strContains(userAgent, \"Chrome\")) {\r\n        return true;\r\n    }\r\n    // UCBrowser < 12.13.2 ignores Set-Cookie headers with SameSite=None\r\n    // NB: this rule isn't complete - you need regex to make a complete rule.\r\n    // See: https://www.chromium.org/updates/same-site/incompatible-clients\r\n    if (strContains(userAgent, \"UCBrowser/12\") || strContains(userAgent, \"UCBrowser/11\")) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=CookieMgr.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}