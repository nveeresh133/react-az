{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Click Analytics, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n/**\r\n* @copyright Microsoft 2020\r\n*/\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { createUniqueNamespace, eventOff, eventOn, getDocument, getWindow, isNullOrUndefined, mergeEvtNamespace } from \"@microsoft/applicationinsights-core-js\";\nimport { ActionType } from \"../Enums\";\nimport { _DYN_ACTION_TYPE, _DYN_CAPTURE_PAGE_ACTION, _DYN_CLICK_COORDINATE_X, _DYN_CLICK_COORDINATE_Y, _DYN_CUSTOM_DATA_PREFIX, _DYN_DATA_TAGS, _DYN_INDEX_OF, _DYN_PARENT_NODE, _DYN_TAG_NAME, _DYN_TO_UPPER_CASE, _DYN__CONFIG, _DYN__DO_UNLOAD } from \"../__DynamicConstants\";\nimport { isElementDnt, isKeyboardEnter, isKeyboardSpace, isLeftClick, isMiddleClick, isRightClick } from \"../common/Utils\";\nvar clickCaptureInputTypes = {\n  BUTTON: true,\n  CHECKBOX: true,\n  RADIO: true,\n  RESET: true,\n  SUBMIT: true\n};\nvar AutoCaptureHandler = /** @class */function () {\n  /**\r\n   * @param analyticsPlugin - WebAnalytics plugin\r\n   * @param traceLogger - Trace logger to log to console.\r\n   */\n  function AutoCaptureHandler(_analyticsPlugin, _config, _pageAction, _traceLogger) {\n    this._analyticsPlugin = _analyticsPlugin;\n    this._config = _config;\n    this._pageAction = _pageAction;\n    this._traceLogger = _traceLogger;\n    var _evtNamespace = mergeEvtNamespace(createUniqueNamespace(\"AutoCaptureHandler\"), _analyticsPlugin._evtNamespace);\n    dynamicProto(AutoCaptureHandler, this, function (_self) {\n      _self.click = function () {\n        var win = getWindow();\n        var doc = getDocument();\n        if (win) {\n          // IE9 onwards addEventListener is available, 'click' event captures mouse click. mousedown works on other browsers\n          var event_1 = navigator.appVersion[_DYN_INDEX_OF /* @min:%2eindexOf */](\"MSIE\") !== -1 ? \"click\" : \"mousedown\";\n          eventOn(win, event_1, _processClick, _evtNamespace);\n          eventOn(win, \"keyup\", _processClick, _evtNamespace);\n        } else if (doc) {\n          // IE8 and below doesn't have addEventListener so it will use attachEvent\n          // attaching to window does not work in IE8\n          eventOn(doc, \"click\", _processClick, _evtNamespace);\n          eventOn(doc, \"keyup\", _processClick, _evtNamespace);\n        }\n      };\n      _self[_DYN__DO_UNLOAD /* @min:%2e_doUnload */] = function (unloadCtx, unloadState, asyncCallback) {\n        eventOff(getWindow(), null, null, _evtNamespace);\n        eventOff(getDocument(), null, null, _evtNamespace);\n      };\n      function _capturePageAction(element, overrideValues, customProperties, isRightClick) {\n        var donotTrackTag = _self._config.dataTags[_DYN_CUSTOM_DATA_PREFIX /* @min:%2ecustomDataPrefix */] + _self[_DYN__CONFIG /* @min:%2e_config */][_DYN_DATA_TAGS /* @min:%2edataTags */].dntDataTag;\n        if (!isElementDnt(element, donotTrackTag)) {\n          _self._pageAction[_DYN_CAPTURE_PAGE_ACTION /* @min:%2ecapturePageAction */](element, overrideValues, customProperties, isRightClick);\n        }\n      }\n      // Process click event\n      function _processClick(clickEvent) {\n        var _a;\n        var clickCaptureElements = {\n          A: true,\n          BUTTON: true,\n          AREA: true,\n          INPUT: true\n        };\n        var win = getWindow();\n        if (isNullOrUndefined(clickEvent) && win) {\n          clickEvent = win.event; // IE 8 does not pass the event\n        }\n        if (clickEvent) {\n          var element = clickEvent.srcElement || clickEvent.target;\n          // populate overrideValues\n          var overrideValues = (_a = {}, _a[_DYN_CLICK_COORDINATE_X /* @min:clickCoordinateX */] = clickEvent.pageX, _a[_DYN_CLICK_COORDINATE_Y /* @min:clickCoordinateY */] = clickEvent.pageY, _a);\n          var isRightClickObj = isRightClick(clickEvent);\n          if (isRightClickObj) {\n            overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKRIGHT;\n          } else if (isLeftClick(clickEvent)) {\n            overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKLEFT;\n          } else if (isKeyboardEnter(clickEvent)) {\n            overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.KEYBOARDENTER;\n          } else if (isKeyboardSpace(clickEvent)) {\n            overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.KEYBOARDSPACE;\n          } else if (isMiddleClick(clickEvent)) {\n            overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKMIDDLE;\n          } else {\n            return;\n          }\n          while (element && element[_DYN_TAG_NAME /* @min:%2etagName */]) {\n            // control property will be available for <label> elements with 'for' attribute, only use it when is a\n            // valid JSLL capture element to avoid infinite loops\n            if (element.control && clickCaptureElements[element.control[_DYN_TAG_NAME /* @min:%2etagName */][_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]()]) {\n              element = element.control;\n            }\n            var tagNameUpperCased = element[_DYN_TAG_NAME /* @min:%2etagName */][_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]();\n            if (!clickCaptureElements[tagNameUpperCased]) {\n              element = element.parentElement || element[_DYN_PARENT_NODE /* @min:%2eparentNode */];\n              continue;\n            } else {\n              // Check allowed INPUT types\n              var sendEvent = tagNameUpperCased === \"INPUT\" ? clickCaptureInputTypes[element.type[_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]()] : true;\n              if (sendEvent) {\n                _capturePageAction(element, overrideValues, {}, isRightClickObj);\n              }\n              break;\n            }\n          }\n        }\n      }\n    });\n  }\n  // handle automatic event firing on user click\n  // Removed Stub for AutoCaptureHandler.prototype.click.\n  // Removed Stub for AutoCaptureHandler.prototype._doUnload.\n  // This is a workaround for an IE bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  AutoCaptureHandler.__ieDyn = 1;\n  return AutoCaptureHandler;\n}();\nexport { AutoCaptureHandler };","map":{"version":3,"names":["dynamicProto","createUniqueNamespace","eventOff","eventOn","getDocument","getWindow","isNullOrUndefined","mergeEvtNamespace","ActionType","_DYN_ACTION_TYPE","_DYN_CAPTURE_PAGE_ACTION","_DYN_CLICK_COORDINATE_X","_DYN_CLICK_COORDINATE_Y","_DYN_CUSTOM_DATA_PREFIX","_DYN_DATA_TAGS","_DYN_INDEX_OF","_DYN_PARENT_NODE","_DYN_TAG_NAME","_DYN_TO_UPPER_CASE","_DYN__CONFIG","_DYN__DO_UNLOAD","isElementDnt","isKeyboardEnter","isKeyboardSpace","isLeftClick","isMiddleClick","isRightClick","clickCaptureInputTypes","BUTTON","CHECKBOX","RADIO","RESET","SUBMIT","AutoCaptureHandler","_analyticsPlugin","_config","_pageAction","_traceLogger","_evtNamespace","_self","click","win","doc","event_1","navigator","appVersion","_processClick","unloadCtx","unloadState","asyncCallback","_capturePageAction","element","overrideValues","customProperties","donotTrackTag","dataTags","dntDataTag","clickEvent","_a","clickCaptureElements","A","AREA","INPUT","event","srcElement","target","pageX","pageY","isRightClickObj","CLICKRIGHT","CLICKLEFT","KEYBOARDENTER","KEYBOARDSPACE","CLICKMIDDLE","control","tagNameUpperCased","parentElement","sendEvent","type"],"sources":["/home/veeresh133/app/json-holder-api/react-az/node_modules/@microsoft/applicationinsights-clickanalytics-js/dist-es5/handlers/AutoCaptureHandler.js"],"sourcesContent":["/**\r\n* @copyright Microsoft 2020\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { createUniqueNamespace, eventOff, eventOn, getDocument, getWindow, isNullOrUndefined, mergeEvtNamespace } from \"@microsoft/applicationinsights-core-js\";\r\nimport { ActionType } from \"../Enums\";\r\nimport { _DYN_ACTION_TYPE, _DYN_CAPTURE_PAGE_ACTION, _DYN_CLICK_COORDINATE_X, _DYN_CLICK_COORDINATE_Y, _DYN_CUSTOM_DATA_PREFIX, _DYN_DATA_TAGS, _DYN_INDEX_OF, _DYN_PARENT_NODE, _DYN_TAG_NAME, _DYN_TO_UPPER_CASE, _DYN__CONFIG, _DYN__DO_UNLOAD } from \"../__DynamicConstants\";\r\nimport { isElementDnt, isKeyboardEnter, isKeyboardSpace, isLeftClick, isMiddleClick, isRightClick } from \"../common/Utils\";\r\nvar clickCaptureInputTypes = { BUTTON: true, CHECKBOX: true, RADIO: true, RESET: true, SUBMIT: true };\r\nvar AutoCaptureHandler = /** @class */ (function () {\r\n    /**\r\n     * @param analyticsPlugin - WebAnalytics plugin\r\n     * @param traceLogger - Trace logger to log to console.\r\n     */\r\n    function AutoCaptureHandler(_analyticsPlugin, _config, _pageAction, _traceLogger) {\r\n        this._analyticsPlugin = _analyticsPlugin;\r\n        this._config = _config;\r\n        this._pageAction = _pageAction;\r\n        this._traceLogger = _traceLogger;\r\n        var _evtNamespace = mergeEvtNamespace(createUniqueNamespace(\"AutoCaptureHandler\"), _analyticsPlugin._evtNamespace);\r\n        dynamicProto(AutoCaptureHandler, this, function (_self) {\r\n            _self.click = function () {\r\n                var win = getWindow();\r\n                var doc = getDocument();\r\n                if (win) {\r\n                    // IE9 onwards addEventListener is available, 'click' event captures mouse click. mousedown works on other browsers\r\n                    var event_1 = (navigator.appVersion[_DYN_INDEX_OF /* @min:%2eindexOf */](\"MSIE\") !== -1) ? \"click\" : \"mousedown\";\r\n                    eventOn(win, event_1, _processClick, _evtNamespace);\r\n                    eventOn(win, \"keyup\", _processClick, _evtNamespace);\r\n                }\r\n                else if (doc) {\r\n                    // IE8 and below doesn't have addEventListener so it will use attachEvent\r\n                    // attaching to window does not work in IE8\r\n                    eventOn(doc, \"click\", _processClick, _evtNamespace);\r\n                    eventOn(doc, \"keyup\", _processClick, _evtNamespace);\r\n                }\r\n            };\r\n            _self[_DYN__DO_UNLOAD /* @min:%2e_doUnload */] = function (unloadCtx, unloadState, asyncCallback) {\r\n                eventOff(getWindow(), null, null, _evtNamespace);\r\n                eventOff(getDocument(), null, null, _evtNamespace);\r\n            };\r\n            function _capturePageAction(element, overrideValues, customProperties, isRightClick) {\r\n                var donotTrackTag = _self._config.dataTags[_DYN_CUSTOM_DATA_PREFIX /* @min:%2ecustomDataPrefix */] + _self[_DYN__CONFIG /* @min:%2e_config */][_DYN_DATA_TAGS /* @min:%2edataTags */].dntDataTag;\r\n                if (!isElementDnt(element, donotTrackTag)) {\r\n                    _self._pageAction[_DYN_CAPTURE_PAGE_ACTION /* @min:%2ecapturePageAction */](element, overrideValues, customProperties, isRightClick);\r\n                }\r\n            }\r\n            // Process click event\r\n            function _processClick(clickEvent) {\r\n                var _a;\r\n                var clickCaptureElements = { A: true, BUTTON: true, AREA: true, INPUT: true };\r\n                var win = getWindow();\r\n                if (isNullOrUndefined(clickEvent) && win) {\r\n                    clickEvent = win.event; // IE 8 does not pass the event\r\n                }\r\n                if (clickEvent) {\r\n                    var element = clickEvent.srcElement || clickEvent.target;\r\n                    // populate overrideValues\r\n                    var overrideValues = (_a = {},\r\n                        _a[_DYN_CLICK_COORDINATE_X /* @min:clickCoordinateX */] = clickEvent.pageX,\r\n                        _a[_DYN_CLICK_COORDINATE_Y /* @min:clickCoordinateY */] = clickEvent.pageY,\r\n                        _a);\r\n                    var isRightClickObj = isRightClick(clickEvent);\r\n                    if (isRightClickObj) {\r\n                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKRIGHT;\r\n                    }\r\n                    else if (isLeftClick(clickEvent)) {\r\n                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKLEFT;\r\n                    }\r\n                    else if (isKeyboardEnter(clickEvent)) {\r\n                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.KEYBOARDENTER;\r\n                    }\r\n                    else if (isKeyboardSpace(clickEvent)) {\r\n                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.KEYBOARDSPACE;\r\n                    }\r\n                    else if (isMiddleClick(clickEvent)) {\r\n                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKMIDDLE;\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                    while (element && element[_DYN_TAG_NAME /* @min:%2etagName */]) {\r\n                        // control property will be available for <label> elements with 'for' attribute, only use it when is a\r\n                        // valid JSLL capture element to avoid infinite loops\r\n                        if (element.control && clickCaptureElements[element.control[_DYN_TAG_NAME /* @min:%2etagName */][_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]()]) {\r\n                            element = element.control;\r\n                        }\r\n                        var tagNameUpperCased = element[_DYN_TAG_NAME /* @min:%2etagName */][_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]();\r\n                        if (!clickCaptureElements[tagNameUpperCased]) {\r\n                            element = element.parentElement || element[_DYN_PARENT_NODE /* @min:%2eparentNode */];\r\n                            continue;\r\n                        }\r\n                        else {\r\n                            // Check allowed INPUT types\r\n                            var sendEvent = tagNameUpperCased === \"INPUT\" ? clickCaptureInputTypes[element.type[_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]()] : true;\r\n                            if (sendEvent) {\r\n                                _capturePageAction(element, overrideValues, {}, isRightClickObj);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    // handle automatic event firing on user click\r\n    AutoCaptureHandler.prototype.click = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AutoCaptureHandler.prototype._doUnload = function (unloadCtx, unloadState, asyncCallback) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return AutoCaptureHandler;\r\n}());\r\nexport { AutoCaptureHandler };\r\n//# sourceMappingURL=AutoCaptureHandler.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}