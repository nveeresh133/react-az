{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { utcNow } from \"@nevware21/ts-utils\";\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\nimport { getCrypto, getMsCrypto, isIE } from \"./EnvUtils\";\nimport { STR_EMPTY } from \"./InternalConstants\";\nvar UInt32Mask = 0x100000000;\nvar MaxUInt32 = 0xffffffff;\nvar SEED1 = 123456789;\nvar SEED2 = 987654321;\n// MWC based Random generator (for IE)\nvar _mwcSeeded = false;\nvar _mwcW = SEED1;\nvar _mwcZ = SEED2;\n// Takes any integer\nfunction _mwcSeed(seedValue) {\n  if (seedValue < 0) {\n    // Make sure we end up with a positive number and not -ve one.\n    seedValue >>>= 0;\n  }\n  _mwcW = SEED1 + seedValue & MaxUInt32;\n  _mwcZ = SEED2 - seedValue & MaxUInt32;\n  _mwcSeeded = true;\n}\nfunction _autoSeedMwc() {\n  // Simple initialization using default Math.random() - So we inherit any entropy from the browser\n  // and bitwise XOR with the current milliseconds\n  try {\n    var now = utcNow() & 0x7fffffff;\n    _mwcSeed((Math.random() * UInt32Mask ^ now) + now);\n  } catch (e) {\n    // Don't crash if something goes wrong\n  }\n}\n/**\r\n * Generate a random value between 0 and maxValue, max value should be limited to a 32-bit maximum.\r\n * So maxValue(16) will produce a number from 0..16 (range of 17)\r\n * @param maxValue\r\n */\nexport function randomValue(maxValue) {\n  if (maxValue > 0) {\n    return Math.floor(random32() / MaxUInt32 * (maxValue + 1)) >>> 0;\n  }\n  return 0;\n}\n/**\r\n * generate a random 32-bit number (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), defaults un-unsigned.\r\n * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)\r\n */\nexport function random32(signed) {\n  var value = 0;\n  var c = getCrypto() || getMsCrypto();\n  if (c && c.getRandomValues) {\n    // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\n    value = c.getRandomValues(new Uint32Array(1))[0] & MaxUInt32;\n  }\n  if (value === 0 && isIE()) {\n    // For IE 6, 7, 8 (especially on XP) Math.random is not very random\n    if (!_mwcSeeded) {\n      // Set the seed for the Mwc algorithm\n      _autoSeedMwc();\n    }\n    // Don't use Math.random for IE\n    // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\n    value = mwcRandom32() & MaxUInt32;\n  }\n  if (value === 0) {\n    // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\n    value = Math.floor(UInt32Mask * Math.random() | 0);\n  }\n  if (!signed) {\n    // Make sure we end up with a positive number and not -ve one.\n    value >>>= 0;\n  }\n  return value;\n}\n/**\r\n * Seed the MWC random number generator with the specified seed or a random value\r\n * @param value - optional the number to used as the seed, if undefined, null or zero a random value will be chosen\r\n */\nexport function mwcRandomSeed(value) {\n  if (!value) {\n    _autoSeedMwc();\n  } else {\n    _mwcSeed(value);\n  }\n}\n/**\r\n * Generate a random 32-bit number between (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), using MWC (Multiply with carry)\r\n * instead of Math.random() defaults to un-signed.\r\n * Used as a replacement random generator for IE to avoid issues with older IE instances.\r\n * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)\r\n */\nexport function mwcRandom32(signed) {\n  _mwcZ = 36969 * (_mwcZ & 0xFFFF) + (_mwcZ >> 16) & MaxUInt32;\n  _mwcW = 18000 * (_mwcW & 0xFFFF) + (_mwcW >> 16) & MaxUInt32;\n  var value = (_mwcZ << 16) + (_mwcW & 0xFFFF) >>> 0 & MaxUInt32 | 0;\n  if (!signed) {\n    // Make sure we end up with a positive number and not -ve one.\n    value >>>= 0;\n  }\n  return value;\n}\n/**\r\n * Generate random base64 id string.\r\n * The default length is 22 which is 132-bits so almost the same as a GUID but as base64 (the previous default was 5)\r\n * @param maxLength - Optional value to specify the length of the id to be generated, defaults to 22\r\n */\nexport function newId(maxLength) {\n  if (maxLength === void 0) {\n    maxLength = 22;\n  }\n  var base64chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  // Start with an initial random number, consuming the value in reverse byte order\n  var number = random32() >>> 0; // Make sure it's a +ve number\n  var chars = 0;\n  var result = STR_EMPTY;\n  while (result[_DYN_LENGTH /* @min:%2elength */] < maxLength) {\n    chars++;\n    result += base64chars.charAt(number & 0x3F);\n    number >>>= 6; // Zero fill with right shift\n    if (chars === 5) {\n      // 5 base64 characters === 30 bits so we don't have enough bits for another base64 char\n      // So add on another 30 bits and make sure it's +ve\n      number = (random32() << 2 & 0xFFFFFFFF | number & 0x03) >>> 0;\n      chars = 0; // We need to reset the number every 5 chars (30 bits)\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["utcNow","_DYN_LENGTH","getCrypto","getMsCrypto","isIE","STR_EMPTY","UInt32Mask","MaxUInt32","SEED1","SEED2","_mwcSeeded","_mwcW","_mwcZ","_mwcSeed","seedValue","_autoSeedMwc","now","Math","random","e","randomValue","maxValue","floor","random32","signed","value","c","getRandomValues","Uint32Array","mwcRandom32","mwcRandomSeed","newId","maxLength","base64chars","number","chars","result","charAt"],"sources":["/home/veeresh133/app/my-app/node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/RandomHelper.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { utcNow } from \"@nevware21/ts-utils\";\r\nimport { _DYN_LENGTH } from \"../__DynamicConstants\";\r\nimport { getCrypto, getMsCrypto, isIE } from \"./EnvUtils\";\r\nimport { STR_EMPTY } from \"./InternalConstants\";\r\nvar UInt32Mask = 0x100000000;\r\nvar MaxUInt32 = 0xffffffff;\r\nvar SEED1 = 123456789;\r\nvar SEED2 = 987654321;\r\n// MWC based Random generator (for IE)\r\nvar _mwcSeeded = false;\r\nvar _mwcW = SEED1;\r\nvar _mwcZ = SEED2;\r\n// Takes any integer\r\nfunction _mwcSeed(seedValue) {\r\n    if (seedValue < 0) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        seedValue >>>= 0;\r\n    }\r\n    _mwcW = (SEED1 + seedValue) & MaxUInt32;\r\n    _mwcZ = (SEED2 - seedValue) & MaxUInt32;\r\n    _mwcSeeded = true;\r\n}\r\nfunction _autoSeedMwc() {\r\n    // Simple initialization using default Math.random() - So we inherit any entropy from the browser\r\n    // and bitwise XOR with the current milliseconds\r\n    try {\r\n        var now = utcNow() & 0x7fffffff;\r\n        _mwcSeed(((Math.random() * UInt32Mask) ^ now) + now);\r\n    }\r\n    catch (e) {\r\n        // Don't crash if something goes wrong\r\n    }\r\n}\r\n/**\r\n * Generate a random value between 0 and maxValue, max value should be limited to a 32-bit maximum.\r\n * So maxValue(16) will produce a number from 0..16 (range of 17)\r\n * @param maxValue\r\n */\r\nexport function randomValue(maxValue) {\r\n    if (maxValue > 0) {\r\n        return Math.floor((random32() / MaxUInt32) * (maxValue + 1)) >>> 0;\r\n    }\r\n    return 0;\r\n}\r\n/**\r\n * generate a random 32-bit number (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), defaults un-unsigned.\r\n * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)\r\n */\r\nexport function random32(signed) {\r\n    var value = 0;\r\n    var c = getCrypto() || getMsCrypto();\r\n    if (c && c.getRandomValues) {\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = c.getRandomValues(new Uint32Array(1))[0] & MaxUInt32;\r\n    }\r\n    if (value === 0 && isIE()) {\r\n        // For IE 6, 7, 8 (especially on XP) Math.random is not very random\r\n        if (!_mwcSeeded) {\r\n            // Set the seed for the Mwc algorithm\r\n            _autoSeedMwc();\r\n        }\r\n        // Don't use Math.random for IE\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = mwcRandom32() & MaxUInt32;\r\n    }\r\n    if (value === 0) {\r\n        // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)\r\n        value = Math.floor((UInt32Mask * Math.random()) | 0);\r\n    }\r\n    if (!signed) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        value >>>= 0;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Seed the MWC random number generator with the specified seed or a random value\r\n * @param value - optional the number to used as the seed, if undefined, null or zero a random value will be chosen\r\n */\r\nexport function mwcRandomSeed(value) {\r\n    if (!value) {\r\n        _autoSeedMwc();\r\n    }\r\n    else {\r\n        _mwcSeed(value);\r\n    }\r\n}\r\n/**\r\n * Generate a random 32-bit number between (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), using MWC (Multiply with carry)\r\n * instead of Math.random() defaults to un-signed.\r\n * Used as a replacement random generator for IE to avoid issues with older IE instances.\r\n * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)\r\n */\r\nexport function mwcRandom32(signed) {\r\n    _mwcZ = (36969 * (_mwcZ & 0xFFFF) + (_mwcZ >> 16)) & MaxUInt32;\r\n    _mwcW = (18000 * (_mwcW & 0xFFFF) + (_mwcW >> 16)) & MaxUInt32;\r\n    var value = (((_mwcZ << 16) + (_mwcW & 0xFFFF)) >>> 0) & MaxUInt32 | 0;\r\n    if (!signed) {\r\n        // Make sure we end up with a positive number and not -ve one.\r\n        value >>>= 0;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Generate random base64 id string.\r\n * The default length is 22 which is 132-bits so almost the same as a GUID but as base64 (the previous default was 5)\r\n * @param maxLength - Optional value to specify the length of the id to be generated, defaults to 22\r\n */\r\nexport function newId(maxLength) {\r\n    if (maxLength === void 0) { maxLength = 22; }\r\n    var base64chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n    // Start with an initial random number, consuming the value in reverse byte order\r\n    var number = random32() >>> 0; // Make sure it's a +ve number\r\n    var chars = 0;\r\n    var result = STR_EMPTY;\r\n    while (result[_DYN_LENGTH /* @min:%2elength */] < maxLength) {\r\n        chars++;\r\n        result += base64chars.charAt(number & 0x3F);\r\n        number >>>= 6; // Zero fill with right shift\r\n        if (chars === 5) {\r\n            // 5 base64 characters === 30 bits so we don't have enough bits for another base64 char\r\n            // So add on another 30 bits and make sure it's +ve\r\n            number = (((random32() << 2) & 0xFFFFFFFF) | (number & 0x03)) >>> 0;\r\n            chars = 0; // We need to reset the number every 5 chars (30 bits)\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=RandomHelper.js.map"],"mappings":";;;;;AAEA,SAAAA,MAAA;AACA,SAAAC,WAAA;AACA,SAAAC,SAAA,EAAAC,WAAA,EAAAC,IAAA;AACA,SAAAC,SAAA;AACA,IAAAC,UAAA;AACA,IAAAC,SAAA;AACA,IAAAC,KAAA;AACA,IAAAC,KAAA;AACA;AACA,IAAAC,UAAA;AACA,IAAAC,KAAA,GAAAH,KAAA;AACA,IAAAI,KAAA,GAAAH,KAAA;AACA;AACA,SAAAI,SAAAC,SAAA;EACA,IAAAA,SAAA;IACA;IACAA,SAAA;EACA;EACAH,KAAA,GAAAH,KAAA,GAAAM,SAAA,GAAAP,SAAA;EACAK,KAAA,GAAAH,KAAA,GAAAK,SAAA,GAAAP,SAAA;EACAG,UAAA;AACA;AACA,SAAAK,aAAA;EACA;EACA;EACA;IACA,IAAAC,GAAA,GAAAhB,MAAA;IACAa,QAAA,EAAAI,IAAA,CAAAC,MAAA,KAAAZ,UAAA,GAAAU,GAAA,IAAAA,GAAA;EACA,EACA,OAAAG,CAAA;IACA;EAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAC,YAAAC,QAAA;EACA,IAAAA,QAAA;IACA,OAAAJ,IAAA,CAAAK,KAAA,CAAAC,QAAA,KAAAhB,SAAA,IAAAc,QAAA;EACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAE,SAAAC,MAAA;EACA,IAAAC,KAAA;EACA,IAAAC,CAAA,GAAAxB,SAAA,MAAAC,WAAA;EACA,IAAAuB,CAAA,IAAAA,CAAA,CAAAC,eAAA;IACA;IACAF,KAAA,GAAAC,CAAA,CAAAC,eAAA,KAAAC,WAAA,UAAArB,SAAA;EACA;EACA,IAAAkB,KAAA,UAAArB,IAAA;IACA;IACA,KAAAM,UAAA;MACA;MACAK,YAAA;IACA;IACA;IACA;IACAU,KAAA,GAAAI,WAAA,KAAAtB,SAAA;EACA;EACA,IAAAkB,KAAA;IACA;IACAA,KAAA,GAAAR,IAAA,CAAAK,KAAA,CAAAhB,UAAA,GAAAW,IAAA,CAAAC,MAAA;EACA;EACA,KAAAM,MAAA;IACA;IACAC,KAAA;EACA;EACA,OAAAA,KAAA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAK,cAAAL,KAAA;EACA,KAAAA,KAAA;IACAV,YAAA;EACA,OACA;IACAF,QAAA,CAAAY,KAAA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAI,YAAAL,MAAA;EACAZ,KAAA,YAAAA,KAAA,cAAAA,KAAA,UAAAL,SAAA;EACAI,KAAA,YAAAA,KAAA,cAAAA,KAAA,UAAAJ,SAAA;EACA,IAAAkB,KAAA,IAAAb,KAAA,WAAAD,KAAA,mBAAAJ,SAAA;EACA,KAAAiB,MAAA;IACA;IACAC,KAAA;EACA;EACA,OAAAA,KAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAM,MAAAC,SAAA;EACA,IAAAA,SAAA;IAAAA,SAAA;EAAA;EACA,IAAAC,WAAA;EACA;EACA,IAAAC,MAAA,GAAAX,QAAA;EACA,IAAAY,KAAA;EACA,IAAAC,MAAA,GAAA/B,SAAA;EACA,OAAA+B,MAAA,CAAAnC,WAAA,yBAAA+B,SAAA;IACAG,KAAA;IACAC,MAAA,IAAAH,WAAA,CAAAI,MAAA,CAAAH,MAAA;IACAA,MAAA;IACA,IAAAC,KAAA;MACA;MACA;MACAD,MAAA,IAAAX,QAAA,uBAAAW,MAAA;MACAC,KAAA;IACA;EACA;EACA,OAAAC,MAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}