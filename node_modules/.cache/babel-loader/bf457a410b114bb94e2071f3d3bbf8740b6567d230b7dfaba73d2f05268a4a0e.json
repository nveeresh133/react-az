{"ast":null,"code":"var _jsxFileName = \"/home/veeresh133/app/test-error-react/react-az/src/App.js\";\nimport React from 'react';\nimport { withAITracking } from '@microsoft/applicationinsights-react-js';\nimport { ReactPlugin } from '@microsoft/applicationinsights-react-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      error: null,\n      loading: false,\n      buttonClicked: ''\n    };\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.handlePopState = this.handlePopState.bind(this);\n    this.fetchDataForPath = this.fetchDataForPath.bind(this);\n  }\n  componentDidMount() {\n    // Listen for changes in browser history (back/forward or manual URL entry)\n    window.addEventListener('popstate', this.handlePopState);\n\n    // Handle the initial URL when the page loads\n    this.fetchDataForPath();\n  }\n  componentWillUnmount() {\n    // Clean up the event listener\n    window.removeEventListener('popstate', this.handlePopState);\n  }\n  handlePopState() {\n    this.fetchDataForPath();\n  }\n  async fetchDataForPath() {\n    const validPaths = {\n      '/posts': {\n        operationName: 'GetPostsOperation',\n        endpoint: 'https://jsonplaceholder.typicode.com/posts',\n        urlPath: '/posts',\n        buttonClicked: 'GetPostsOperation'\n      },\n      '/users': {\n        operationName: 'GetUsersOperation',\n        endpoint: 'https://jsonplaceholder.typicode.com/users',\n        urlPath: '/users',\n        buttonClicked: 'GetUsersOperation'\n      }\n    };\n    const currentPath = window.location.pathname;\n    const route = validPaths[currentPath];\n    if (route) {\n      // Start tracking the operation\n      this.props.appInsights.startTrackEvent(route.operationName);\n      this.setState({\n        loading: true,\n        error: null,\n        buttonClicked: route.operationName\n      });\n      try {\n        const response = await fetch(route.endpoint);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        this.setState({\n          data,\n          error: null,\n          loading: false\n        });\n\n        // Stop tracking and log successful data fetch\n        this.props.appInsights.stopTrackEvent(route.operationName, {\n          status: 'success'\n        });\n      } catch (error) {\n        this.setState({\n          data: null,\n          error: error.message,\n          loading: false\n        });\n\n        // Stop tracking and log failed data fetch\n        this.props.appInsights.stopTrackEvent(route.operationName, {\n          status: 'failure',\n          error: error.message\n        });\n      }\n    } else {\n      // Show error message if the URL is invalid\n      this.setState({\n        error: `The page at ${currentPath} doesn't exist.`,\n        data: null,\n        loading: false,\n        buttonClicked: ''\n      });\n    }\n  }\n  async handleButtonClick(operationName, endpoint, urlPath) {\n    // Change the URL manually without reloading the page\n    window.history.pushState({}, '', urlPath);\n\n    // Fetch data based on the new path\n    await this.fetchDataForPath();\n  }\n  render() {\n    const {\n      data,\n      error,\n      loading,\n      buttonClicked\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hello, Welcome to the React World!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleButtonClick('GetPostsOperation', 'https://jsonplaceholder.typicode.com/posts', '/posts'),\n        disabled: loading,\n        children: loading && buttonClicked === 'GetPostsOperation' ? 'Loading...' : 'Fetch Posts'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleButtonClick('GetUsersOperation', 'https://jsonplaceholder.typicode.com/users', '/users'),\n        disabled: loading,\n        children: loading && buttonClicked === 'GetUsersOperation' ? 'Loading...' : 'Fetch Users'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'red'\n          },\n          children: [\"Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 31\n        }, this), data && /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(data, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default _c = withAITracking(ReactPlugin, App);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","withAITracking","ReactPlugin","jsxDEV","_jsxDEV","App","Component","constructor","props","state","data","error","loading","buttonClicked","handleButtonClick","bind","handlePopState","fetchDataForPath","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","validPaths","operationName","endpoint","urlPath","currentPath","location","pathname","route","appInsights","startTrackEvent","setState","response","fetch","ok","Error","json","stopTrackEvent","status","message","history","pushState","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","style","color","JSON","stringify","_c","$RefreshReg$"],"sources":["/home/veeresh133/app/test-error-react/react-az/src/App.js"],"sourcesContent":["import React from 'react';\nimport { withAITracking } from '@microsoft/applicationinsights-react-js';\nimport { ReactPlugin } from '@microsoft/applicationinsights-react-js';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: null,\n            error: null,\n            loading: false,\n            buttonClicked: '',\n        };\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n        this.handlePopState = this.handlePopState.bind(this);\n        this.fetchDataForPath = this.fetchDataForPath.bind(this);\n    }\n\n    componentDidMount() {\n        // Listen for changes in browser history (back/forward or manual URL entry)\n        window.addEventListener('popstate', this.handlePopState);\n       \n        // Handle the initial URL when the page loads\n        this.fetchDataForPath();\n    }\n\n    componentWillUnmount() {\n        // Clean up the event listener\n        window.removeEventListener('popstate', this.handlePopState);\n    }\n\n    handlePopState() {\n        this.fetchDataForPath();\n    }\n\n    async fetchDataForPath() {\n        const validPaths = {\n            '/posts': {\n                operationName: 'GetPostsOperation',\n                endpoint: 'https://jsonplaceholder.typicode.com/posts',\n                urlPath: '/posts',\n                buttonClicked: 'GetPostsOperation'\n            },\n            '/users': {\n                operationName: 'GetUsersOperation',\n                endpoint: 'https://jsonplaceholder.typicode.com/users',\n                urlPath: '/users',\n                buttonClicked: 'GetUsersOperation'\n            }\n        };\n\n        const currentPath = window.location.pathname;\n        const route = validPaths[currentPath];\n\n        if (route) {\n            // Start tracking the operation\n            this.props.appInsights.startTrackEvent(route.operationName);\n\n            this.setState({ loading: true, error: null, buttonClicked: route.operationName });\n\n            try {\n                const response = await fetch(route.endpoint);\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const data = await response.json();\n\n                this.setState({ data, error: null, loading: false });\n\n                // Stop tracking and log successful data fetch\n                this.props.appInsights.stopTrackEvent(route.operationName, { status: 'success' });\n            } catch (error) {\n                this.setState({ data: null, error: error.message, loading: false });\n\n                // Stop tracking and log failed data fetch\n                this.props.appInsights.stopTrackEvent(route.operationName, { status: 'failure', error: error.message });\n            }\n        } else {\n            // Show error message if the URL is invalid\n            this.setState({\n                error: `The page at ${currentPath} doesn't exist.`,\n                data: null,\n                loading: false,\n                buttonClicked: ''\n            });\n        }\n    }\n\n    async handleButtonClick(operationName, endpoint, urlPath) {\n        // Change the URL manually without reloading the page\n        window.history.pushState({}, '', urlPath);\n\n        // Fetch data based on the new path\n        await this.fetchDataForPath();\n    }\n\n    render() {\n        const { data, error, loading, buttonClicked } = this.state;\n\n        return (\n            <div className=\"App\">\n                <h1>Hello, Welcome to the React World!</h1>\n                <button\n                    onClick={() => this.handleButtonClick('GetPostsOperation', 'https://jsonplaceholder.typicode.com/posts', '/posts')}\n                    disabled={loading}\n                >\n                    {loading && buttonClicked === 'GetPostsOperation' ? 'Loading...' : 'Fetch Posts'}\n                </button>\n                <button\n                    onClick={() => this.handleButtonClick('GetUsersOperation', 'https://jsonplaceholder.typicode.com/users', '/users')}\n                    disabled={loading}\n                >\n                    {loading && buttonClicked === 'GetUsersOperation' ? 'Loading...' : 'Fetch Users'}\n                </button>\n                <div>\n                    {error && <p style={{ color: 'red' }}>Error: {error}</p>}\n                    {data && <pre>{JSON.stringify(data, null, 2)}</pre>}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withAITracking(ReactPlugin, App);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}