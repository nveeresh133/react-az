{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - Core, 3.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n\nimport { createPromise, doAwaitResponse } from \"@nevware21/ts-async\";\nimport { arrSlice, getLength } from \"@nevware21/ts-utils\";\nimport { _DYN_UNLOAD } from \"../__DynamicConstants\";\n/**\r\n * Run the unload function of the target object if it exists\r\n * @param target - The target object that contains the unload function\r\n * @param isAsync - The caller identifies whether it is expecting the operation to complete synchronously or asynchronously. Even\r\n * if the caller is not waiting the operation may still be performed asynchronously depending on the component and the reverse is\r\n * also true.\r\n * @returns The result of the target function\r\n */\nexport function runTargetUnload(target, isAsync) {\n  if (target && target[_DYN_UNLOAD /* @min:%2eunload */]) {\n    return target[_DYN_UNLOAD /* @min:%2eunload */](isAsync);\n  }\n}\n/**\r\n * Call the unload function on all targets handling any returned [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n * / Promise before calling the next targets unload\r\n * @param targets - An array of the targets to unload\r\n * @param isAsync - The caller identifies whether it is expecting the operations to complete synchronously or asynchronously.  Even\r\n * if the caller is not waiting the operation may still be performed asynchronously depending on the component and the reverse is\r\n * also true.\r\n * @param done - Optional callback function to call once all of the unload functions have been called.\r\n */\nexport function doUnloadAll(targets, isAsync, done) {\n  var result;\n  if (!done) {\n    result = createPromise(function (resolved) {\n      done = resolved;\n    });\n  }\n  if (targets && getLength(targets) > 0) {\n    doAwaitResponse(runTargetUnload(targets[0], isAsync), function () {\n      doUnloadAll(arrSlice(targets, 1), isAsync, done);\n    });\n  } else {\n    done();\n  }\n  return result;\n}","map":{"version":3,"names":["createPromise","doAwaitResponse","arrSlice","getLength","_DYN_UNLOAD","runTargetUnload","target","isAsync","doUnloadAll","targets","done","result","resolved"],"sources":["/home/veeresh133/app/react-az/node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/AsyncUtils.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { createPromise, doAwaitResponse } from \"@nevware21/ts-async\";\r\nimport { arrSlice, getLength } from \"@nevware21/ts-utils\";\r\nimport { _DYN_UNLOAD } from \"../__DynamicConstants\";\r\n/**\r\n * Run the unload function of the target object if it exists\r\n * @param target - The target object that contains the unload function\r\n * @param isAsync - The caller identifies whether it is expecting the operation to complete synchronously or asynchronously. Even\r\n * if the caller is not waiting the operation may still be performed asynchronously depending on the component and the reverse is\r\n * also true.\r\n * @returns The result of the target function\r\n */\r\nexport function runTargetUnload(target, isAsync) {\r\n    if (target && target[_DYN_UNLOAD /* @min:%2eunload */]) {\r\n        return target[_DYN_UNLOAD /* @min:%2eunload */](isAsync);\r\n    }\r\n}\r\n/**\r\n * Call the unload function on all targets handling any returned [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n * / Promise before calling the next targets unload\r\n * @param targets - An array of the targets to unload\r\n * @param isAsync - The caller identifies whether it is expecting the operations to complete synchronously or asynchronously.  Even\r\n * if the caller is not waiting the operation may still be performed asynchronously depending on the component and the reverse is\r\n * also true.\r\n * @param done - Optional callback function to call once all of the unload functions have been called.\r\n */\r\nexport function doUnloadAll(targets, isAsync, done) {\r\n    var result;\r\n    if (!done) {\r\n        result = createPromise(function (resolved) {\r\n            done = resolved;\r\n        });\r\n    }\r\n    if (targets && getLength(targets) > 0) {\r\n        doAwaitResponse(runTargetUnload(targets[0], isAsync), function () {\r\n            doUnloadAll(arrSlice(targets, 1), isAsync, done);\r\n        });\r\n    }\r\n    else {\r\n        done();\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=AsyncUtils.js.map"],"mappings":";;;;;AAEA,SAAAA,aAAA,EAAAC,eAAA;AACA,SAAAC,QAAA,EAAAC,SAAA;AACA,SAAAC,WAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAC,gBAAAC,MAAA,EAAAC,OAAA;EACA,IAAAD,MAAA,IAAAA,MAAA,CAAAF,WAAA;IACA,OAAAE,MAAA,CAAAF,WAAA,uBAAAG,OAAA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAAC,YAAAC,OAAA,EAAAF,OAAA,EAAAG,IAAA;EACA,IAAAC,MAAA;EACA,KAAAD,IAAA;IACAC,MAAA,GAAAX,aAAA,WAAAY,QAAA;MACAF,IAAA,GAAAE,QAAA;IACA;EACA;EACA,IAAAH,OAAA,IAAAN,SAAA,CAAAM,OAAA;IACAR,eAAA,CAAAI,eAAA,CAAAI,OAAA,KAAAF,OAAA;MACAC,WAAA,CAAAN,QAAA,CAAAO,OAAA,MAAAF,OAAA,EAAAG,IAAA;IACA;EACA,OACA;IACAA,IAAA;EACA;EACA,OAAAC,MAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}