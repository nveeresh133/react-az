{"ast":null,"code":"/*\n * Application Insights JavaScript SDK - React Plugin, 17.3.1\n * Copyright (c) Microsoft and contributors. All rights reserved.\n */\n/**\r\n* ReactPlugin.ts\r\n* @copyright Microsoft 2019\r\n*/\nimport { __extendsFn as __extends } from \"@microsoft/applicationinsights-shims\";\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\nimport { AnalyticsPluginIdentifier } from \"@microsoft/applicationinsights-common\";\nimport { BaseTelemetryPlugin, _throwInternal, isFunction, proxyFunctions, safeGetCookieMgr, onConfigChange, objDefineAccessors } from \"@microsoft/applicationinsights-core-js\";\nimport { objDeepFreeze } from \"@nevware21/ts-utils\";\nvar defaultReactExtensionConfig = objDeepFreeze({\n  history: {\n    blkVal: true,\n    v: undefined\n  }\n});\nvar ReactPlugin = /** @class */function (_super) {\n  __extends(ReactPlugin, _super);\n  function ReactPlugin() {\n    var _this = _super.call(this) || this;\n    _this.priority = 185;\n    _this.identifier = 'ReactPlugin';\n    var _analyticsPlugin;\n    var _extensionConfig;\n    var _unlisten;\n    var _pageViewTimer;\n    var _pageViewTracked;\n    dynamicProto(ReactPlugin, _this, function (_self, _base) {\n      _initDefaults();\n      _self.initialize = function (config, core, extensions, pluginChain) {\n        _super.prototype.initialize.call(_this, config, core, extensions, pluginChain);\n        _self._addHook(onConfigChange(config, function (details) {\n          var _a;\n          var ctx = _self._getTelCtx();\n          _extensionConfig = ctx.getExtCfg(_this.identifier, defaultReactExtensionConfig);\n          _analyticsPlugin = (_a = core.getPlugin(AnalyticsPluginIdentifier)) === null || _a === void 0 ? void 0 : _a.plugin;\n          if (isFunction(_unlisten)) {\n            _unlisten();\n            _unlisten = null;\n          }\n          if (_extensionConfig.history) {\n            _addHistoryListener(_extensionConfig.history);\n            if (!_pageViewTracked) {\n              var pageViewTelemetry = {\n                uri: _extensionConfig.history.location.pathname\n              };\n              _self.trackPageView(pageViewTelemetry);\n              _pageViewTracked = true;\n            }\n          }\n        }));\n      };\n      _self.getCookieMgr = function () {\n        return safeGetCookieMgr(_self.core);\n      };\n      _self.getAppInsights = _getAnalytics;\n      _self.processTelemetry = function (event, itemCtx) {\n        _self.processNext(event, itemCtx);\n      };\n      _self._doTeardown = function (unloadCtx, unloadState, asyncCallback) {\n        if (isFunction(_unlisten)) {\n          _unlisten();\n        }\n        if (_pageViewTimer) {\n          clearTimeout(_pageViewTimer);\n        }\n        _initDefaults();\n      };\n      // Proxy the analytics functions\n      proxyFunctions(_self, _getAnalytics, [\"trackMetric\", \"trackPageView\", \"trackEvent\", \"trackException\", \"trackTrace\"]);\n      function _initDefaults() {\n        _analyticsPlugin = null;\n        _extensionConfig = null;\n        _unlisten = null;\n        _pageViewTimer = null;\n        _pageViewTracked = false;\n      }\n      function _getAnalytics() {\n        if (!_analyticsPlugin) {\n          _throwInternal(_self.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, 64 /* _eInternalMessageId.TelemetryInitializerFailed */, \"Analytics plugin is not available, React plugin telemetry will not be sent: \");\n        }\n        return _analyticsPlugin;\n      }\n      function _addHistoryListener(history) {\n        var locationListener = function (arg) {\n          // v4 of the history API passes \"location\" as the first argument, while v5 passes an object that contains location and action \n          var locn = null;\n          if (\"location\" in arg) {\n            // Looks like v5\n            locn = arg[\"location\"];\n          } else {\n            locn = arg;\n          }\n          // Timeout to ensure any changes to the DOM made by route changes get included in pageView telemetry\n          _pageViewTimer = setTimeout(function () {\n            _pageViewTimer = null;\n            var pageViewTelemetry = {\n              uri: locn.pathname\n            };\n            _self.trackPageView(pageViewTelemetry);\n          }, 500);\n        };\n        _unlisten = history.listen(locationListener);\n      }\n      objDefineAccessors(_self, \"_extensionConfig\", function () {\n        return _extensionConfig;\n      });\n    });\n    return _this;\n  }\n  // Removed Stub for ReactPlugin.prototype.initialize.\n  // Removed Stub for ReactPlugin.prototype.getCookieMgr.\n  // Removed Stub for ReactPlugin.prototype.getAppInsights.\n  // Removed Stub for ReactPlugin.prototype.processTelemetry.\n  // Removed Stub for ReactPlugin.prototype.trackMetric.\n  // Removed Stub for ReactPlugin.prototype.trackPageView.\n  // Removed Stub for ReactPlugin.prototype.trackEvent.\n  // Removed Stub for ReactPlugin.prototype.trackException.\n  // Removed Stub for ReactPlugin.prototype.trackTrace.\n  // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any\n  // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.\n  // this will be removed when ES3 support is dropped.\n  ReactPlugin.__ieDyn = 1;\n  return ReactPlugin;\n}(BaseTelemetryPlugin);\nexport default ReactPlugin;","map":{"version":3,"names":["__extendsFn","__extends","dynamicProto","AnalyticsPluginIdentifier","BaseTelemetryPlugin","_throwInternal","isFunction","proxyFunctions","safeGetCookieMgr","onConfigChange","objDefineAccessors","objDeepFreeze","defaultReactExtensionConfig","history","blkVal","v","undefined","ReactPlugin","_super","_this","call","priority","identifier","_analyticsPlugin","_extensionConfig","_unlisten","_pageViewTimer","_pageViewTracked","_self","_base","_initDefaults","initialize","config","core","extensions","pluginChain","prototype","_addHook","details","_a","ctx","_getTelCtx","getExtCfg","getPlugin","plugin","_addHistoryListener","pageViewTelemetry","uri","location","pathname","trackPageView","getCookieMgr","getAppInsights","_getAnalytics","processTelemetry","event","itemCtx","processNext","_doTeardown","unloadCtx","unloadState","asyncCallback","clearTimeout","diagLog","locationListener","arg","locn","setTimeout","listen"],"sources":["/home/veeresh133/app/my-app/node_modules/@microsoft/applicationinsights-react-js/dist-esm/ReactPlugin.js"],"sourcesContent":["/**\r\n* ReactPlugin.ts\r\n* @copyright Microsoft 2019\r\n*/\r\nimport { __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { AnalyticsPluginIdentifier } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, _throwInternal, isFunction, proxyFunctions, safeGetCookieMgr, onConfigChange, objDefineAccessors } from \"@microsoft/applicationinsights-core-js\";\r\nimport { objDeepFreeze } from \"@nevware21/ts-utils\";\r\nvar defaultReactExtensionConfig = objDeepFreeze({\r\n    history: { blkVal: true, v: undefined }\r\n});\r\nvar ReactPlugin = /** @class */ (function (_super) {\r\n    __extends(ReactPlugin, _super);\r\n    function ReactPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.priority = 185;\r\n        _this.identifier = 'ReactPlugin';\r\n        var _analyticsPlugin;\r\n        var _extensionConfig;\r\n        var _unlisten;\r\n        var _pageViewTimer;\r\n        var _pageViewTracked;\r\n        dynamicProto(ReactPlugin, _this, function (_self, _base) {\r\n            _initDefaults();\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                _super.prototype.initialize.call(_this, config, core, extensions, pluginChain);\r\n                _self._addHook(onConfigChange(config, function (details) {\r\n                    var _a;\r\n                    var ctx = _self._getTelCtx();\r\n                    _extensionConfig = ctx.getExtCfg(_this.identifier, defaultReactExtensionConfig);\r\n                    _analyticsPlugin = (_a = core.getPlugin(AnalyticsPluginIdentifier)) === null || _a === void 0 ? void 0 : _a.plugin;\r\n                    if (isFunction(_unlisten)) {\r\n                        _unlisten();\r\n                        _unlisten = null;\r\n                    }\r\n                    if (_extensionConfig.history) {\r\n                        _addHistoryListener(_extensionConfig.history);\r\n                        if (!_pageViewTracked) {\r\n                            var pageViewTelemetry = {\r\n                                uri: _extensionConfig.history.location.pathname\r\n                            };\r\n                            _self.trackPageView(pageViewTelemetry);\r\n                            _pageViewTracked = true;\r\n                        }\r\n                    }\r\n                }));\r\n            };\r\n            _self.getCookieMgr = function () {\r\n                return safeGetCookieMgr(_self.core);\r\n            };\r\n            _self.getAppInsights = _getAnalytics;\r\n            _self.processTelemetry = function (event, itemCtx) {\r\n                _self.processNext(event, itemCtx);\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState, asyncCallback) {\r\n                if (isFunction(_unlisten)) {\r\n                    _unlisten();\r\n                }\r\n                if (_pageViewTimer) {\r\n                    clearTimeout(_pageViewTimer);\r\n                }\r\n                _initDefaults();\r\n            };\r\n            // Proxy the analytics functions\r\n            proxyFunctions(_self, _getAnalytics, [\r\n                \"trackMetric\",\r\n                \"trackPageView\",\r\n                \"trackEvent\",\r\n                \"trackException\",\r\n                \"trackTrace\",\r\n            ]);\r\n            function _initDefaults() {\r\n                _analyticsPlugin = null;\r\n                _extensionConfig = null;\r\n                _unlisten = null;\r\n                _pageViewTimer = null;\r\n                _pageViewTracked = false;\r\n            }\r\n            function _getAnalytics() {\r\n                if (!_analyticsPlugin) {\r\n                    _throwInternal(_self.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, 64 /* _eInternalMessageId.TelemetryInitializerFailed */, \"Analytics plugin is not available, React plugin telemetry will not be sent: \");\r\n                }\r\n                return _analyticsPlugin;\r\n            }\r\n            function _addHistoryListener(history) {\r\n                var locationListener = function (arg) {\r\n                    // v4 of the history API passes \"location\" as the first argument, while v5 passes an object that contains location and action \r\n                    var locn = null;\r\n                    if (\"location\" in arg) {\r\n                        // Looks like v5\r\n                        locn = arg[\"location\"];\r\n                    }\r\n                    else {\r\n                        locn = arg;\r\n                    }\r\n                    // Timeout to ensure any changes to the DOM made by route changes get included in pageView telemetry\r\n                    _pageViewTimer = setTimeout(function () {\r\n                        _pageViewTimer = null;\r\n                        var pageViewTelemetry = { uri: locn.pathname };\r\n                        _self.trackPageView(pageViewTelemetry);\r\n                    }, 500);\r\n                };\r\n                _unlisten = history.listen(locationListener);\r\n            }\r\n            objDefineAccessors(_self, \"_extensionConfig\", function () { return _extensionConfig; });\r\n        });\r\n        return _this;\r\n    }\r\n    ReactPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    ReactPlugin.prototype.getCookieMgr = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Get application insights instance.\r\n     */\r\n    ReactPlugin.prototype.getAppInsights = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add Part A fields to the event\r\n     * @param event The event that needs to be processed\r\n     */\r\n    ReactPlugin.prototype.processTelemetry = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ReactPlugin.prototype.trackMetric = function (metric, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ReactPlugin.prototype.trackPageView = function (pageView) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ReactPlugin.prototype.trackEvent = function (event, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ReactPlugin.prototype.trackException = function (exception, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ReactPlugin.prototype.trackTrace = function (trace, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return ReactPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport default ReactPlugin;\r\n//# sourceMappingURL=ReactPlugin.js.map"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,SAAAA,WAAA,IAAAC,SAAA;AACA,OAAAC,YAAA;AACA,SAAAC,yBAAA;AACA,SAAAC,mBAAA,EAAAC,cAAA,EAAAC,UAAA,EAAAC,cAAA,EAAAC,gBAAA,EAAAC,cAAA,EAAAC,kBAAA;AACA,SAAAC,aAAA;AACA,IAAAC,2BAAA,GAAAD,aAAA;EACAE,OAAA;IAAAC,MAAA;IAAAC,CAAA,EAAAC;EAAA;AACA;AACA,IAAAC,WAAA,0BAAAC,MAAA;EACAjB,SAAA,CAAAgB,WAAA,EAAAC,MAAA;EACA,SAAAD,YAAA;IACA,IAAAE,KAAA,GAAAD,MAAA,CAAAE,IAAA;IACAD,KAAA,CAAAE,QAAA;IACAF,KAAA,CAAAG,UAAA;IACA,IAAAC,gBAAA;IACA,IAAAC,gBAAA;IACA,IAAAC,SAAA;IACA,IAAAC,cAAA;IACA,IAAAC,gBAAA;IACAzB,YAAA,CAAAe,WAAA,EAAAE,KAAA,YAAAS,KAAA,EAAAC,KAAA;MACAC,aAAA;MACAF,KAAA,CAAAG,UAAA,aAAAC,MAAA,EAAAC,IAAA,EAAAC,UAAA,EAAAC,WAAA;QACAjB,MAAA,CAAAkB,SAAA,CAAAL,UAAA,CAAAX,IAAA,CAAAD,KAAA,EAAAa,MAAA,EAAAC,IAAA,EAAAC,UAAA,EAAAC,WAAA;QACAP,KAAA,CAAAS,QAAA,CAAA5B,cAAA,CAAAuB,MAAA,YAAAM,OAAA;UACA,IAAAC,EAAA;UACA,IAAAC,GAAA,GAAAZ,KAAA,CAAAa,UAAA;UACAjB,gBAAA,GAAAgB,GAAA,CAAAE,SAAA,CAAAvB,KAAA,CAAAG,UAAA,EAAAV,2BAAA;UACAW,gBAAA,IAAAgB,EAAA,GAAAN,IAAA,CAAAU,SAAA,CAAAxC,yBAAA,eAAAoC,EAAA,uBAAAA,EAAA,CAAAK,MAAA;UACA,IAAAtC,UAAA,CAAAmB,SAAA;YACAA,SAAA;YACAA,SAAA;UACA;UACA,IAAAD,gBAAA,CAAAX,OAAA;YACAgC,mBAAA,CAAArB,gBAAA,CAAAX,OAAA;YACA,KAAAc,gBAAA;cACA,IAAAmB,iBAAA;gBACAC,GAAA,EAAAvB,gBAAA,CAAAX,OAAA,CAAAmC,QAAA,CAAAC;cACA;cACArB,KAAA,CAAAsB,aAAA,CAAAJ,iBAAA;cACAnB,gBAAA;YACA;UACA;QACA;MACA;MACAC,KAAA,CAAAuB,YAAA;QACA,OAAA3C,gBAAA,CAAAoB,KAAA,CAAAK,IAAA;MACA;MACAL,KAAA,CAAAwB,cAAA,GAAAC,aAAA;MACAzB,KAAA,CAAA0B,gBAAA,aAAAC,KAAA,EAAAC,OAAA;QACA5B,KAAA,CAAA6B,WAAA,CAAAF,KAAA,EAAAC,OAAA;MACA;MACA5B,KAAA,CAAA8B,WAAA,aAAAC,SAAA,EAAAC,WAAA,EAAAC,aAAA;QACA,IAAAvD,UAAA,CAAAmB,SAAA;UACAA,SAAA;QACA;QACA,IAAAC,cAAA;UACAoC,YAAA,CAAApC,cAAA;QACA;QACAI,aAAA;MACA;MACA;MACAvB,cAAA,CAAAqB,KAAA,EAAAyB,aAAA,GACA,eACA,iBACA,cACA,kBACA,aACA;MACA,SAAAvB,cAAA;QACAP,gBAAA;QACAC,gBAAA;QACAC,SAAA;QACAC,cAAA;QACAC,gBAAA;MACA;MACA,SAAA0B,cAAA;QACA,KAAA9B,gBAAA;UACAlB,cAAA,CAAAuB,KAAA,CAAAmC,OAAA;QACA;QACA,OAAAxC,gBAAA;MACA;MACA,SAAAsB,oBAAAhC,OAAA;QACA,IAAAmD,gBAAA,YAAAA,CAAAC,GAAA;UACA;UACA,IAAAC,IAAA;UACA,kBAAAD,GAAA;YACA;YACAC,IAAA,GAAAD,GAAA;UACA,OACA;YACAC,IAAA,GAAAD,GAAA;UACA;UACA;UACAvC,cAAA,GAAAyC,UAAA;YACAzC,cAAA;YACA,IAAAoB,iBAAA;cAAAC,GAAA,EAAAmB,IAAA,CAAAjB;YAAA;YACArB,KAAA,CAAAsB,aAAA,CAAAJ,iBAAA;UACA;QACA;QACArB,SAAA,GAAAZ,OAAA,CAAAuD,MAAA,CAAAJ,gBAAA;MACA;MACAtD,kBAAA,CAAAkB,KAAA;QAAA,OAAAJ,gBAAA;MAAA;IACA;IACA,OAAAL,KAAA;EACA;EACA;;;;;;;;;;;;;;AAwCA,EAAAf,mBAAA;AACA,eAAAa,WAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}