{"version":3,"file":"logUtils.js","sourceRoot":"","sources":["../../../src/utils/logUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AvailabilityData,\n  TelemetryItem as Envelope,\n  KnownContextTagKeys,\n  KnownSeverityLevel,\n  MessageData,\n  MonitorDomain,\n  PageViewData,\n  TelemetryEventData,\n  TelemetryExceptionData,\n  TelemetryExceptionDetails,\n} from \"../generated\";\nimport { createTagsFromResource, hrTimeToDate } from \"./common\";\nimport { ReadableLogRecord } from \"@opentelemetry/sdk-logs\";\nimport {\n  SEMATTRS_EXCEPTION_MESSAGE,\n  SEMATTRS_EXCEPTION_STACKTRACE,\n  SEMATTRS_EXCEPTION_TYPE,\n} from \"@opentelemetry/semantic-conventions\";\nimport { Measurements, Properties, Tags } from \"../types\";\nimport { diag } from \"@opentelemetry/api\";\nimport {\n  ApplicationInsightsAvailabilityBaseType,\n  ApplicationInsightsAvailabilityName,\n  ApplicationInsightsBaseType,\n  ApplicationInsightsEventBaseType,\n  ApplicationInsightsEventName,\n  ApplicationInsightsExceptionBaseType,\n  ApplicationInsightsExceptionName,\n  ApplicationInsightsMessageBaseType,\n  ApplicationInsightsMessageName,\n  ApplicationInsightsPageViewBaseType,\n  ApplicationInsightsPageViewName,\n} from \"./constants/applicationinsights\";\n\n/**\n * Log to Azure envelope parsing.\n * @internal\n */\nexport function logToEnvelope(log: ReadableLogRecord, ikey: string): Envelope | undefined {\n  const time = hrTimeToDate(log.hrTime);\n  const sampleRate = 100;\n  const instrumentationKey = ikey;\n  const tags = createTagsFromLog(log);\n  // eslint-disable-next-line prefer-const\n  let [properties, measurements] = createPropertiesFromLog(log);\n  let name: string;\n  let baseType: string;\n  let baseData: MonitorDomain;\n\n  if (!log.attributes[ApplicationInsightsBaseType]) {\n    // Get Exception attributes if available\n    const exceptionType = log.attributes[SEMATTRS_EXCEPTION_TYPE];\n    if (exceptionType) {\n      const exceptionMessage = log.attributes[SEMATTRS_EXCEPTION_MESSAGE];\n      const exceptionStacktrace = log.attributes[SEMATTRS_EXCEPTION_STACKTRACE];\n      name = ApplicationInsightsExceptionName;\n      baseType = ApplicationInsightsExceptionBaseType;\n      const exceptionDetails: TelemetryExceptionDetails = {\n        typeName: String(exceptionType),\n        message: String(exceptionMessage),\n        hasFullStack: exceptionStacktrace ? true : false,\n        stack: String(exceptionStacktrace),\n      };\n      const exceptionData: TelemetryExceptionData = {\n        exceptions: [exceptionDetails],\n        severityLevel: String(getSeverity(log.severityNumber)),\n        version: 2,\n      };\n      baseData = exceptionData;\n    } else {\n      name = ApplicationInsightsMessageName;\n      baseType = ApplicationInsightsMessageBaseType;\n      const messageData: MessageData = {\n        message: String(log.body),\n        severityLevel: String(getSeverity(log.severityNumber)),\n        version: 2,\n      };\n      baseData = messageData;\n    }\n  } else {\n    // If Legacy Application Insights Log\n    baseType = String(log.attributes[ApplicationInsightsBaseType]);\n    name = getLegacyApplicationInsightsName(log);\n    baseData = getLegacyApplicationInsightsBaseData(log);\n    measurements = getLegacyApplicationInsightsMeasurements(log);\n    if (!baseData) {\n      // Failed to parse log\n      return;\n    }\n  }\n  return {\n    name,\n    sampleRate,\n    time,\n    instrumentationKey,\n    tags,\n    version: 1,\n    data: {\n      baseType,\n      baseData: {\n        ...baseData,\n        properties,\n        measurements,\n      },\n    },\n  };\n}\n\nfunction createTagsFromLog(log: ReadableLogRecord): Tags {\n  const tags: Tags = createTagsFromResource(log.resource);\n  if (log.spanContext?.traceId) {\n    tags[KnownContextTagKeys.AiOperationId] = log.spanContext.traceId;\n  }\n  if (log.spanContext?.spanId) {\n    tags[KnownContextTagKeys.AiOperationParentId] = log.spanContext.spanId;\n  }\n  return tags;\n}\n\nfunction createPropertiesFromLog(log: ReadableLogRecord): [Properties, Measurements] {\n  const measurements: Measurements = {};\n  const properties: { [propertyName: string]: string } = {};\n  if (log.attributes) {\n    for (const key of Object.keys(log.attributes)) {\n      // Avoid duplication ignoring fields already mapped.\n      if (\n        !(\n          key.startsWith(\"_MS.\") ||\n          key === SEMATTRS_EXCEPTION_TYPE ||\n          key === SEMATTRS_EXCEPTION_MESSAGE ||\n          key === SEMATTRS_EXCEPTION_STACKTRACE\n        )\n      ) {\n        properties[key] = log.attributes[key] as string;\n      }\n    }\n  }\n  return [properties, measurements];\n}\n\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/data-model.md#field-severitynumber\nfunction getSeverity(severityNumber: number | undefined): KnownSeverityLevel | undefined {\n  if (severityNumber) {\n    if (severityNumber > 0 && severityNumber < 9) {\n      return KnownSeverityLevel.Verbose;\n    } else if (severityNumber >= 9 && severityNumber < 13) {\n      return KnownSeverityLevel.Information;\n    } else if (severityNumber >= 13 && severityNumber < 17) {\n      return KnownSeverityLevel.Warning;\n    } else if (severityNumber >= 17 && severityNumber < 21) {\n      return KnownSeverityLevel.Error;\n    } else if (severityNumber >= 21 && severityNumber < 25) {\n      return KnownSeverityLevel.Critical;\n    }\n  }\n  return;\n}\n\nfunction getLegacyApplicationInsightsName(log: ReadableLogRecord): string {\n  let name = \"\";\n  switch (log.attributes[ApplicationInsightsBaseType]) {\n    case ApplicationInsightsAvailabilityBaseType:\n      name = ApplicationInsightsAvailabilityName;\n      break;\n    case ApplicationInsightsExceptionBaseType:\n      name = ApplicationInsightsExceptionName;\n      break;\n    case ApplicationInsightsMessageBaseType:\n      name = ApplicationInsightsMessageName;\n      break;\n    case ApplicationInsightsPageViewBaseType:\n      name = ApplicationInsightsPageViewName;\n      break;\n    case ApplicationInsightsEventBaseType:\n      name = ApplicationInsightsEventName;\n      break;\n  }\n  return name;\n}\n\nfunction getLegacyApplicationInsightsMeasurements(log: ReadableLogRecord): Measurements {\n  let measurements: Measurements = {};\n  if ((log.body as MonitorDomain)?.measurements) {\n    measurements = { ...(log.body as MonitorDomain).measurements };\n  }\n  return measurements;\n}\n\nfunction getLegacyApplicationInsightsBaseData(log: ReadableLogRecord): MonitorDomain {\n  let baseData: MonitorDomain = {\n    version: 2,\n  };\n  if (log.body) {\n    try {\n      switch (log.attributes[ApplicationInsightsBaseType]) {\n        case ApplicationInsightsAvailabilityBaseType:\n          baseData = log.body as AvailabilityData;\n          break;\n        case ApplicationInsightsExceptionBaseType:\n          baseData = log.body as TelemetryExceptionData;\n          break;\n        case ApplicationInsightsMessageBaseType:\n          baseData = log.body as MessageData;\n          break;\n        case ApplicationInsightsPageViewBaseType:\n          baseData = log.body as PageViewData;\n          break;\n        case ApplicationInsightsEventBaseType:\n          baseData = log.body as TelemetryEventData;\n          break;\n      }\n      if (typeof baseData?.message === \"object\") {\n        baseData.message = JSON.stringify(baseData.message);\n      }\n    } catch (err) {\n      diag.error(\"AzureMonitorLogExporter failed to parse Application Insights Telemetry\");\n    }\n  }\n  return baseData;\n}\n"]}