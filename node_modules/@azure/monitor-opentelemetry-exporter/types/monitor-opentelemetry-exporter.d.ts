import { AggregationTemporality } from '@opentelemetry/sdk-metrics';
import { Attributes } from '@opentelemetry/api';
import { Context } from '@opentelemetry/api';
import * as coreClient from '@azure/core-client';
import { ExportResult } from '@opentelemetry/core';
import { InstrumentType } from '@opentelemetry/sdk-metrics';
import { Link } from '@opentelemetry/api';
import type { LogRecordExporter } from '@opentelemetry/sdk-logs';
import { PushMetricExporter } from '@opentelemetry/sdk-metrics';
import type { ReadableLogRecord } from '@opentelemetry/sdk-logs';
import { ReadableSpan } from '@opentelemetry/sdk-trace-base';
import { ResourceMetrics } from '@opentelemetry/sdk-metrics';
import { Sampler } from '@opentelemetry/sdk-trace-base';
import { SamplingResult } from '@opentelemetry/sdk-trace-base';
import { SpanExporter } from '@opentelemetry/sdk-trace-base';
import { SpanKind } from '@opentelemetry/api';
import { TokenCredential } from '@azure/core-auth';

/** Optional parameters. */
export declare interface ApplicationInsightsClientOptionalParams extends coreClient.ServiceClientOptions {
    /** Breeze endpoint: https://dc.services.visualstudio.com */
    host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/**
 * ApplicationInsightsSampler is responsible for the following:
 * Implements same trace id hashing algorithm so that traces are sampled the same across multiple nodes
 * Adds item count to span attribute if span is sampled (needed for ingestion service)
 * @param samplingRatio - 0 to 1 value.
 */
export declare class ApplicationInsightsSampler implements Sampler {
    private readonly _sampleRate;
    private readonly samplingRatio;
    /**
     * Initializes a new instance of the ApplicationInsightsSampler class.
     * @param samplingRatio - Value in the range [0,1], 1 meaning all data will sampled and 0 all Tracing data will be sampled out.
     */
    constructor(samplingRatio?: number);
    /**
     * Checks whether span needs to be created and tracked.
     *
     * @param context - Parent Context which may contain a span.
     * @param traceId - traceif of the span to be created. It can be different from the
     *     traceId in the {@link SpanContext}. Typically in situations when the
     *     span to be created starts a new trace.
     * @param spanName - Name of the span to be created.
     * @param spanKind - Kind of the span to be created.
     * @param attributes - Initial set of SpanAttributes for the Span being constructed.
     * @param links - Collection of links that will be associated with the Span to
     *     be created. Typically useful for batch operations.
     * @returns a {@link SamplingResult}.
     */
    shouldSample(context: Context, traceId: string, spanName: string, spanKind: SpanKind, attributes: Attributes, links: Link[]): SamplingResult;
    /**
     * Return Sampler description
     */
    toString(): string;
    private _getSamplingHashCode;
}

/**
 * Azure Monitor OpenTelemetry Trace Exporter.
 */
export declare abstract class AzureMonitorBaseExporter {
    /**
     * Instrumentation key to be used for exported envelopes
     */
    protected instrumentationKey: string;
    /**
     * Ingestion Endpoint URL
     */
    protected endpointUrl: string;
    /**
     *Flag to determine if exporter will generate Statsbeat data
     */
    protected trackStatsbeat: boolean;
    /**
     * Instrumentation key to be used for exported envelopes
     */
    protected aadAudience: string | undefined;
    /**
     * Flag to determine if the Exporter is a Statsbeat Exporter
     */
    private isStatsbeatExporter;
    /**
     * Exporter internal configuration
     */
    private readonly options;
    /**
     * Initializes a new instance of the AzureMonitorBaseExporter class.
     * @param AzureMonitorExporterOptions - Exporter configuration.
     */
    constructor(options?: AzureMonitorExporterOptions, isStatsbeatExporter?: boolean);
}

/**
 * Provides configuration options for AzureMonitorTraceExporter.
 */
export declare interface AzureMonitorExporterOptions extends ApplicationInsightsClientOptionalParams {
    /**
     * Azure Monitor Connection String, if not provided the exporter will try to use environment variable APPLICATIONINSIGHTS_CONNECTION_STRING
     * Ex: "InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://dc.services.visualstudio.com"
     */
    connectionString?: string;
    /**
     * Azure service API version.
     */
    apiVersion?: ServiceApiVersion;
    /**
     * Token Credential
     */
    credential?: TokenCredential;
    /**
     * Directory to store retriable telemetry when it fails to export.
     */
    storageDirectory?: string;
    /**
     * Disable offline storage when telemetry cannot be exported.
     */
    disableOfflineStorage?: boolean;
}

/**
 * Azure Monitor OpenTelemetry Log Exporter.
 */
export declare class AzureMonitorLogExporter extends AzureMonitorBaseExporter implements LogRecordExporter {
    /**
     * Flag to determine if Exporter is shutdown.
     */
    private _isShutdown;
    private readonly _sender;
    /**
     * Initializes a new instance of the AzureMonitorLogExporter class.
     * @param AzureExporterConfig - Exporter configuration.
     */
    constructor(options?: AzureMonitorExporterOptions);
    /**
     * Export OpenTelemetry logs.
     * @param logs - Logs to export.
     * @param resultCallback - Result callback.
     */
    export(logs: ReadableLogRecord[], resultCallback: (result: ExportResult) => void): Promise<void>;
    /**
     * Shutdown AzureMonitorLogExporter.
     */
    shutdown(): Promise<void>;
}

/**
 * Azure Monitor OpenTelemetry Metric Exporter.
 */
export declare class AzureMonitorMetricExporter extends AzureMonitorBaseExporter implements PushMetricExporter {
    /**
     * Flag to determine if Exporter is shutdown.
     */
    private _isShutdown;
    private _sender;
    /**
     * Initializes a new instance of the AzureMonitorMetricExporter class.
     * @param AzureExporterConfig - Exporter configuration.
     */
    constructor(options?: AzureMonitorExporterOptions);
    /**
     * Export OpenTelemetry resource metrics.
     * @param metrics - Resource metrics to export.
     * @param resultCallback - Result callback.
     */
    export(metrics: ResourceMetrics, resultCallback: (result: ExportResult) => void): Promise<void>;
    /**
     * Shutdown AzureMonitorMetricExporter.
     */
    shutdown(): Promise<void>;
    /**
     * Select aggregation temporality
     */
    selectAggregationTemporality(instrumentType: InstrumentType): AggregationTemporality;
    /**
     * Force flush
     */
    forceFlush(): Promise<void>;
}

/**
 * Azure Monitor OpenTelemetry Trace Exporter.
 */
export declare class AzureMonitorTraceExporter extends AzureMonitorBaseExporter implements SpanExporter {
    /**
     * Flag to determine if Exporter is shutdown.
     */
    private isShutdown;
    private readonly sender;
    private shouldCreateResourceMetric;
    /**
     * Initializes a new instance of the AzureMonitorTraceExporter class.
     * @param AzureExporterConfig - Exporter configuration.
     */
    constructor(options?: AzureMonitorExporterOptions);
    /**
     * Export OpenTelemetry spans.
     * @param spans - Spans to export.
     * @param resultCallback - Result callback.
     */
    export(spans: ReadableSpan[], resultCallback: (result: ExportResult) => void): Promise<void>;
    /**
     * Shutdown AzureMonitorTraceExporter.
     */
    shutdown(): Promise<void>;
}

/**
 * Azure service API version.
 */
export declare enum ServiceApiVersion {
    /**
     * V2 Version
     */
    V2 = "2020-09-15_Preview"
}

export { }
