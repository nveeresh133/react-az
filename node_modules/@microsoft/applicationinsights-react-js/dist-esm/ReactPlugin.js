/*
 * Application Insights JavaScript SDK - React Plugin, 17.3.1
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
* ReactPlugin.ts
* @copyright Microsoft 2019
*/
import { __extendsFn as __extends } from "@microsoft/applicationinsights-shims";
import dynamicProto from "@microsoft/dynamicproto-js";
import { AnalyticsPluginIdentifier } from "@microsoft/applicationinsights-common";
import { BaseTelemetryPlugin, _throwInternal, isFunction, proxyFunctions, safeGetCookieMgr, onConfigChange, objDefineAccessors } from "@microsoft/applicationinsights-core-js";
import { objDeepFreeze } from "@nevware21/ts-utils";
var defaultReactExtensionConfig = objDeepFreeze({
    history: { blkVal: true, v: undefined }
});
var ReactPlugin = /** @class */ (function (_super) {
    __extends(ReactPlugin, _super);
    function ReactPlugin() {
        var _this = _super.call(this) || this;
        _this.priority = 185;
        _this.identifier = 'ReactPlugin';
        var _analyticsPlugin;
        var _extensionConfig;
        var _unlisten;
        var _pageViewTimer;
        var _pageViewTracked;
        dynamicProto(ReactPlugin, _this, function (_self, _base) {
            _initDefaults();
            _self.initialize = function (config, core, extensions, pluginChain) {
                _super.prototype.initialize.call(_this, config, core, extensions, pluginChain);
                _self._addHook(onConfigChange(config, function (details) {
                    var _a;
                    var ctx = _self._getTelCtx();
                    _extensionConfig = ctx.getExtCfg(_this.identifier, defaultReactExtensionConfig);
                    _analyticsPlugin = (_a = core.getPlugin(AnalyticsPluginIdentifier)) === null || _a === void 0 ? void 0 : _a.plugin;
                    if (isFunction(_unlisten)) {
                        _unlisten();
                        _unlisten = null;
                    }
                    if (_extensionConfig.history) {
                        _addHistoryListener(_extensionConfig.history);
                        if (!_pageViewTracked) {
                            var pageViewTelemetry = {
                                uri: _extensionConfig.history.location.pathname
                            };
                            _self.trackPageView(pageViewTelemetry);
                            _pageViewTracked = true;
                        }
                    }
                }));
            };
            _self.getCookieMgr = function () {
                return safeGetCookieMgr(_self.core);
            };
            _self.getAppInsights = _getAnalytics;
            _self.processTelemetry = function (event, itemCtx) {
                _self.processNext(event, itemCtx);
            };
            _self._doTeardown = function (unloadCtx, unloadState, asyncCallback) {
                if (isFunction(_unlisten)) {
                    _unlisten();
                }
                if (_pageViewTimer) {
                    clearTimeout(_pageViewTimer);
                }
                _initDefaults();
            };
            // Proxy the analytics functions
            proxyFunctions(_self, _getAnalytics, [
                "trackMetric",
                "trackPageView",
                "trackEvent",
                "trackException",
                "trackTrace",
            ]);
            function _initDefaults() {
                _analyticsPlugin = null;
                _extensionConfig = null;
                _unlisten = null;
                _pageViewTimer = null;
                _pageViewTracked = false;
            }
            function _getAnalytics() {
                if (!_analyticsPlugin) {
                    _throwInternal(_self.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, 64 /* _eInternalMessageId.TelemetryInitializerFailed */, "Analytics plugin is not available, React plugin telemetry will not be sent: ");
                }
                return _analyticsPlugin;
            }
            function _addHistoryListener(history) {
                var locationListener = function (arg) {
                    // v4 of the history API passes "location" as the first argument, while v5 passes an object that contains location and action 
                    var locn = null;
                    if ("location" in arg) {
                        // Looks like v5
                        locn = arg["location"];
                    }
                    else {
                        locn = arg;
                    }
                    // Timeout to ensure any changes to the DOM made by route changes get included in pageView telemetry
                    _pageViewTimer = setTimeout(function () {
                        _pageViewTimer = null;
                        var pageViewTelemetry = { uri: locn.pathname };
                        _self.trackPageView(pageViewTelemetry);
                    }, 500);
                };
                _unlisten = history.listen(locationListener);
            }
            objDefineAccessors(_self, "_extensionConfig", function () { return _extensionConfig; });
        });
        return _this;
    }
// Removed Stub for ReactPlugin.prototype.initialize.
// Removed Stub for ReactPlugin.prototype.getCookieMgr.
// Removed Stub for ReactPlugin.prototype.getAppInsights.
// Removed Stub for ReactPlugin.prototype.processTelemetry.
// Removed Stub for ReactPlugin.prototype.trackMetric.
// Removed Stub for ReactPlugin.prototype.trackPageView.
// Removed Stub for ReactPlugin.prototype.trackEvent.
// Removed Stub for ReactPlugin.prototype.trackException.
// Removed Stub for ReactPlugin.prototype.trackTrace.
    // This is a workaround for an IE8 bug when using dynamicProto() with classes that don't have any
    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.
    // this will be removed when ES3 support is dropped.
    ReactPlugin.__ieDyn=1;

    return ReactPlugin;
}(BaseTelemetryPlugin));
export default ReactPlugin;
//# sourceMappingURL=ReactPlugin.js.map