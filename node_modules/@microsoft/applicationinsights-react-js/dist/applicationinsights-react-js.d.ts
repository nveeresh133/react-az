/*
 * Microsoft Application Insights react plugin, 17.3.1
 * Copyright (c) Microsoft and contributors. All rights reserved.
 *
 * Microsoft Application Insights Team
 * https://github.com/microsoft/applicationinsights-react-js#readme
 */

declare namespace ApplicationInsights {
    import { BaseTelemetryPlugin } from '@microsoft/applicationinsights-core-js';
    import { Context } from 'react';
    import { Dispatch } from 'react';
    import { History as History_2 } from 'history';
    import { IAppInsights } from '@microsoft/applicationinsights-common';
    import { IAppInsightsCore } from '@microsoft/applicationinsights-core-js';
    import { IConfig } from '@microsoft/applicationinsights-common';
    import { IConfiguration } from '@microsoft/applicationinsights-core-js';
    import { ICookieMgr } from '@microsoft/applicationinsights-core-js';
    import { ICustomProperties } from '@microsoft/applicationinsights-core-js';
    import { IEventTelemetry } from '@microsoft/applicationinsights-common';
    import { IExceptionTelemetry } from '@microsoft/applicationinsights-common';
    import { IMetricTelemetry } from '@microsoft/applicationinsights-common';
    import { IPageViewTelemetry } from '@microsoft/applicationinsights-common';
    import { IPlugin } from '@microsoft/applicationinsights-core-js';
    import { IProcessTelemetryContext } from '@microsoft/applicationinsights-core-js';
    import { ITelemetryItem } from '@microsoft/applicationinsights-core-js';
    import { ITelemetryPluginChain } from '@microsoft/applicationinsights-core-js';
    import { ITraceTelemetry } from '@microsoft/applicationinsights-common';
    import * as React_2 from 'react';
    import { default as React_3 } from 'react';
    import { SetStateAction } from 'react';

    type AIReactCustomEvent<T> = Dispatch<SetStateAction<T>>;

    /**
     * Higher-order component base class to hook Application Insights tracking
     * in a React component's lifecycle.
     */
    abstract class AITrackedComponentBase<P> extends React_2.Component<P> {
        protected _mountTimestamp: number;
        protected _firstActiveTimestamp: number;
        protected _idleStartTimestamp: number;
        protected _lastActiveTimestamp: number;
        protected _totalIdleTime: number;
        protected _idleCount: number;
        protected _idleTimeout: number;
        protected _intervalId?: any;
        protected _componentName: string;
        protected _reactPlugin: ReactPlugin;
        constructor(props: P, reactPlugin: ReactPlugin, componentName: string);
        componentDidMount(): void;
        componentWillUnmount(): void;
        protected trackActivity: (e: React_2.SyntheticEvent<any>) => void;
        private getEngagementTimeSeconds;
    }

    const AppInsightsContext: AppInsightsReactContext;

    class AppInsightsErrorBoundary extends React_3.Component<IAppInsightsErrorBoundaryProps, IAppInsightsErrorBoundaryState> {
        state: {
            hasError: boolean;
        };
        componentDidCatch(error: Error, errorInfo: React_3.ErrorInfo): void;
        render(): React_3.ReactElement<any, string | React_3.JSXElementConstructor<any>> & React_3.ReactNode;
    }

    type AppInsightsReactContext = Context<ReactPlugin>;

    interface IAppInsightsErrorBoundaryProps {
        appInsights: ReactPlugin;
        onError: React_3.ComponentType<any>;
        children: React_3.ReactElement;
    }

    interface IAppInsightsErrorBoundaryState {
        hasError: boolean;
    }

    /**
     * Settings to initialize a ReactAI instance.
     */
    interface IReactExtensionConfig {
        /**
         * React router history for enabling Application Insights PageView tracking.
         *
         * @type {History}
         * @memberof IReactAISettings
         */
        readonly history?: History_2;
    }

    class ReactPlugin extends BaseTelemetryPlugin {
        priority: number;
        identifier: string;
        constructor();
        initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[], pluginChain?: ITelemetryPluginChain): void;
        /**
         * Get the current cookie manager for this instance
         */
        getCookieMgr(): ICookieMgr;
        /**
         * Get application insights instance.
         */
        getAppInsights(): IAppInsights;
        /**
         * Add Part A fields to the event
         * @param event The event that needs to be processed
         */
        processTelemetry(event: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
        trackMetric(metric: IMetricTelemetry, customProperties: ICustomProperties): void;
        trackPageView(pageView: IPageViewTelemetry): void;
        trackEvent(event: IEventTelemetry, customProperties?: ICustomProperties): void;
        trackException(exception: IExceptionTelemetry, customProperties?: ICustomProperties): void;
        trackTrace(trace: ITraceTelemetry, customProperties?: ICustomProperties): void;
    }

    const useAppInsightsContext: () => ReactPlugin;

    function useTrackEvent<T>(reactPlugin: ReactPlugin, eventName: string, eventData: T, skipFirstRun?: boolean): AIReactCustomEvent<T>;

    const useTrackMetric: (reactPlugin: ReactPlugin, componentName: string, customProperties?: ICustomProperties) => () => void;

    /**
     * Higher-order component function to hook Application Insights tracking
     * in a React component's lifecycle.
     *
     * @param reactPlugin ReactPlugin instance
     * @param Component the React component to be instrumented
     * @param componentName (optional) component name
     * @param className (optional) className of the HOC div
     */
    function withAITracking<P>(reactPlugin: ReactPlugin, Component: React_2.ComponentType<P>, componentName?: string, className?: string): React_2.ComponentClass<P>;

    
}